{"version":3,"file":"IconBase.js","sources":["../../src/IconBase.tsx"],"sourcesContent":["import { forwardRef, memo } from \"react\";\nimport styled from \"@emotion/styled\";\nimport {\n  getColor,\n  HvColor,\n  HvColorAny,\n  HvSize,\n  theme,\n} from \"@hitachivantara/uikit-styles\";\n\nimport { HvIconContainer, HvIconContainerProps } from \"./IconContainer\";\nimport { getSizeStyles } from \"./utils\";\n\nconst getColorVars = (colorArray: string[]) => {\n  return colorArray.reduce<Record<string, string>>((acc, value, index) => {\n    acc[`--color-${index}`] = value;\n    return acc;\n  }, {});\n};\n\nconst getIconColors = (\n  palette: string[] = [],\n  color?: HvColorAny | HvColorAny[],\n  semantic?: string,\n  inverted = false,\n) => {\n  // Copy array to avoid mutating the palette\n  const colorArray = [...palette];\n\n  if (typeof color === \"string\") {\n    colorArray[0] = color;\n  } else if (Array.isArray(color)) {\n    colorArray.forEach((_, i) => {\n      colorArray[i] = color[i];\n    });\n  }\n\n  // TODO: remove in v6\n  if (semantic) {\n    colorArray[0] = theme.colors?.[semantic as HvColor] || colorArray[0];\n  }\n\n  // TODO: remove in v6\n  if (inverted && colorArray[1]) {\n    // eslint-disable-next-line prefer-destructuring\n    colorArray[1] = colorArray[0];\n    colorArray[0] = \"none\";\n  }\n\n  return colorArray.map((c) => getColor(c)!);\n};\n\nexport type IconSize = \"XS\" | \"S\" | \"M\" | \"L\";\n\nexport interface IconBaseProps extends Omit<HvIconContainerProps, \"color\"> {\n  /**\n   * A color or array of colors to override the default icon colors.\n   * Accepts any valid CSS color or color from the UI Kit palette.\n   * @example [\"brand\", \"inherit\"]\n   */\n  color?: HvColorAny | HvColorAny[];\n  /**\n   * The size of the SVG icon. Takes in a `number` in pixels or any `HvSize` or `IconSize`.\n   *\n   * Using this new prop:\n   * - overrides the deprecated `iconSize`, `height`, and `width` props\n   * - makes the icon use the `\"currentcolor\"`, if the `color` isn't passed\n   *\n   * @example\n   * size={16} // 16px\n   * size=\"S\" // 16px\n   * size=\"sm\" // 16px\n   * size=\"md\" // 32px\n   *\n   * @default \"S\"\n   */\n  size?: HvSize | IconSize | number;\n  /** Sets one of the standard sizes of the icons @deprecated use `size` instead */\n  iconSize?: IconSize;\n  /**\n   * A string that will override the viewbox of the svg\n   * @deprecated DO NOT OVERRIDE viewbox - use the `size` instead\n   */\n  viewbox?: string;\n  /**\n   * A string that will override the height of the svg\n   * @deprecated use `size` instead (or `svgProps.style.height`)\n   */\n  height?: number;\n  /**\n   * A string that will override the width of the svg\n   * @deprecated use `size` instead (or `svgProps.style.height`)\n   */\n  width?: number;\n  /**\n   * Sets one of the standard semantic palette colors of the icon\n   * @deprecated use the `color` prop instead\n   */\n  semantic?: string;\n  /**\n   * Inverts the background-foreground on semantic icons\n   * @deprecated use the `color` prop instead\n   */\n  inverted?: boolean;\n  /** Props passed down to the svg element. */\n  svgProps?: React.SVGProps<SVGSVGElement>;\n}\n\nconst StyledSvg = styled(\"svg\")({\n  margin: \"auto\",\n  color: \"inherit\",\n  fill: \"currentcolor\",\n  width: \"1em\",\n  height: \"1em\",\n  fontSize: \"inherit\",\n});\n\nexport type IconType = React.ForwardRefExoticComponent<IconBaseProps>;\n\nconst IconBaseInternal = (\n  props: IconBaseProps & {\n    palette?: string[];\n    iconName: string;\n    viewBox?: string;\n  },\n  ref: React.Ref<HTMLDivElement>,\n) => {\n  const {\n    // internal props\n    children,\n    palette,\n    iconName,\n    viewBox,\n\n    // deprecated props\n    viewbox: viewBoxProp,\n    height,\n    width,\n    semantic,\n    inverted,\n\n    // standard props\n    title: titleProp,\n    // keep aria-label for `HvTooltip`+icon compatibility\n    \"aria-label\": ariaLabel,\n    color,\n    size,\n    iconSize,\n    style: styleProp,\n\n    svgProps,\n    ...others\n  } = props;\n  const colorArray = getIconColors(palette, color, semantic, inverted);\n  const title = titleProp ?? ariaLabel;\n\n  /** Whether the icon colors should be inherited. Used for icons:\n   * - using the new `size` prop (backwards compatibility) - TODO: make default in v6\n   * - without a custom user-provided `color`\n   * - with a single `palette` color\n   */\n  const inheritColor = !!size && !color && palette?.length === 1;\n\n  return (\n    <HvIconContainer\n      ref={ref}\n      data-name={iconName}\n      style={{\n        ...(!inheritColor && getColorVars(colorArray)),\n        ...getSizeStyles(iconName ?? \"\", size),\n        ...styleProp,\n      }}\n      size={size ?? iconSize}\n      {...others}\n    >\n      <StyledSvg\n        viewBox={viewBoxProp ?? viewBox}\n        focusable={false}\n        role={title ? \"img\" : \"none\"}\n        // TODO: remove in v6\n        style={width && height ? { width, height } : undefined}\n        {...svgProps}\n      >\n        {title ? <title>{title}</title> : null}\n        {children}\n      </StyledSvg>\n    </HvIconContainer>\n  );\n};\n\nexport const IconBase = memo(forwardRef(IconBaseInternal));\n\nexport const createHvIcon = (\n  iconName: string,\n  viewBox: string,\n  palette: string[],\n  children: React.ReactNode,\n): IconType => {\n  const IconComponent = (\n    props: IconBaseProps,\n    ref: React.Ref<HTMLDivElement>,\n  ) => {\n    return (\n      <IconBase\n        ref={ref}\n        iconName={iconName}\n        viewBox={viewBox}\n        palette={palette}\n        {...props}\n      >\n        {children}\n      </IconBase>\n    );\n  };\n  IconComponent.displayName = `HvIcon${iconName}`;\n\n  return memo(forwardRef(IconComponent));\n};\n"],"names":[],"mappings":";;;;;;AAaA,MAAM,eAAe,CAAC,eAAyB;AAC7C,SAAO,WAAW,OAA+B,CAAC,KAAK,OAAO,UAAU;AAClE,QAAA,WAAW,KAAK,EAAE,IAAI;AACnB,WAAA;AAAA,EACT,GAAG,EAAE;AACP;AAEA,MAAM,gBAAgB,CACpB,UAAoB,IACpB,OACA,UACA,WAAW,UACR;AAEG,QAAA,aAAa,CAAC,GAAG,OAAO;AAE1B,MAAA,OAAO,UAAU,UAAU;AAC7B,eAAW,CAAC,IAAI;AAAA,EACP,WAAA,MAAM,QAAQ,KAAK,GAAG;AACpB,eAAA,QAAQ,CAAC,GAAG,MAAM;AAChB,iBAAA,CAAC,IAAI,MAAM,CAAC;AAAA,IAAA,CACxB;AAAA,EAAA;AAIH,MAAI,UAAU;AACZ,eAAW,CAAC,IAAI,MAAM,SAAS,QAAmB,KAAK,WAAW,CAAC;AAAA,EAAA;AAIjE,MAAA,YAAY,WAAW,CAAC,GAAG;AAElB,eAAA,CAAC,IAAI,WAAW,CAAC;AAC5B,eAAW,CAAC,IAAI;AAAA,EAAA;AAGlB,SAAO,WAAW,IAAI,CAAC,MAAM,SAAS,CAAC,CAAE;AAC3C;AA0DA,MAAM,YAAY,OAAO,KAAK,EAAE;AAAA,EAC9B,QAAQ;AAAA,EACR,OAAO;AAAA,EACP,MAAM;AAAA,EACN,OAAO;AAAA,EACP,QAAQ;AAAA,EACR,UAAU;AACZ,CAAC;AAID,MAAM,mBAAmB,CACvB,OAKA,QACG;AACG,QAAA;AAAA;AAAA,IAEJ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAAA,IAGA,SAAS;AAAA,IACT;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAAA,IAGA,OAAO;AAAA;AAAA,IAEP,cAAc;AAAA,IACd;AAAA,IACA;AAAA,IACA;AAAA,IACA,OAAO;AAAA,IAEP;AAAA,IACA,GAAG;AAAA,EAAA,IACD;AACJ,QAAM,aAAa,cAAc,SAAS,OAAO,UAAU,QAAQ;AACnE,QAAM,QAAQ,aAAa;AAO3B,QAAM,eAAe,CAAC,CAAC,QAAQ,CAAC,SAAS,SAAS,WAAW;AAG3D,SAAA;AAAA,IAAC;AAAA,IAAA;AAAA,MACC;AAAA,MACA,aAAW;AAAA,MACX,OAAO;AAAA,QACL,GAAI,CAAC,gBAAgB,aAAa,UAAU;AAAA,QAC5C,GAAG,cAAc,YAAY,IAAI,IAAI;AAAA,QACrC,GAAG;AAAA,MACL;AAAA,MACA,MAAM,QAAQ;AAAA,MACb,GAAG;AAAA,MAEJ,UAAA;AAAA,QAAC;AAAA,QAAA;AAAA,UACC,SAAS,eAAe;AAAA,UACxB,WAAW;AAAA,UACX,MAAM,QAAQ,QAAQ;AAAA,UAEtB,OAAO,SAAS,SAAS,EAAE,OAAO,OAAW,IAAA;AAAA,UAC5C,GAAG;AAAA,UAEH,UAAA;AAAA,YAAQ,QAAA,oBAAC,SAAO,EAAA,UAAA,MAAM,CAAA,IAAW;AAAA,YACjC;AAAA,UAAA;AAAA,QAAA;AAAA,MAAA;AAAA,IACH;AAAA,EACF;AAEJ;AAEO,MAAM,WAAW,KAAK,WAAW,gBAAgB,CAAC;AAElD,MAAM,eAAe,CAC1B,UACA,SACA,SACA,aACa;AACP,QAAA,gBAAgB,CACpB,OACA,QACG;AAED,WAAA;AAAA,MAAC;AAAA,MAAA;AAAA,QACC;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACC,GAAG;AAAA,QAEH;AAAA,MAAA;AAAA,IACH;AAAA,EAEJ;AACc,gBAAA,cAAc,SAAS,QAAQ;AAEtC,SAAA,KAAK,WAAW,aAAa,CAAC;AACvC;"}