{"version":3,"file":"classes.js","sources":["../../../src/utils/classes.ts"],"sourcesContent":["import { useMemo } from \"react\";\nimport type { CSSInterpolation } from \"@emotion/serialize\";\n\nimport { useCss } from \"../hooks/useCss\";\n\nexport type ExtractNames<\n  T extends (...args: any) => { classes: Record<string, any>; cx: any },\n> = Partial<ReturnType<T>[\"classes\"]>;\n\n/** Maps over an object, preserving the original keys */\nfunction mapObject<T extends Record<string, any>, Value>(\n  /** Input object to convert */\n  inputObject: T,\n  /** Function to map over each entry */\n  mapFn: (key: string, value: T[keyof T]) => Value,\n) {\n  return Object.entries(inputObject).reduce(\n    (acc, [key, value]) => {\n      acc[key as keyof T] = mapFn(key, value);\n      return acc;\n    },\n    {} as { [J in keyof T]: Value },\n  );\n}\n\nconst deepRenameKeys = <T extends object>(\n  obj: T,\n  mapFn: (key: string) => string,\n): T => {\n  const result: any = {};\n  for (const key in obj) {\n    if (Object.hasOwn(obj, key)) {\n      const newKey = mapFn(key);\n      const value = obj[key];\n      result[newKey] =\n        typeof value === \"object\" ? deepRenameKeys(value as any, mapFn) : value;\n    }\n  }\n  return result;\n};\n\n/** Given a `stylesObj`, replaces its keys' `$myClass` with `.{name}-myClass`. */\nconst replace$ = <T extends object>(stylesObj: T, name: string): T => {\n  return deepRenameKeys(stylesObj, (key) => {\n    const matches = key.match(/\\$\\w+/g);\n    if (!matches?.length) return key;\n    const newKey = matches.reduce(\n      (acc, match) => acc.replace(match, `.${name}-${match.slice(1)}`),\n      key,\n    );\n    return newKey ?? key;\n  });\n};\n\n/** Utility function to create classes for a component. */\nexport function createClasses<\n  Name extends string,\n  Styles extends Record<string, CSSInterpolation>,\n>(\n  /** Component name in PascalCase (ie. `HvTableCell`). */\n  name: Name,\n  stylesObject: Styles,\n) {\n  const styles = replace$(stylesObject, name);\n\n  const staticClasses = mapObject(styles, (key) => `${name}-${key}`);\n\n  /**\n   * Hook that takes in a component's `classesProp` overrides, and returns the\n   * concatenated static/internal/override `classes`, and the cached `cx` and `css` utilities.\n   */\n  function useClasses(\n    classesProp: Partial<Record<keyof Styles, string>> = {},\n    /** Whether to add the static classes. Disable when included by `classesProp` */\n    addStatic = true,\n  ) {\n    const { cx, css } = useCss();\n\n    /** Object with the merged static+internal+external classes */\n    const classes = useMemo(() => {\n      return mapObject(styles, (key) =>\n        cx(addStatic && `${name}-${key}`, css(styles[key]), classesProp?.[key]),\n      );\n    }, [addStatic, classesProp, css, cx]);\n\n    return { classes, css, cx } as const;\n  }\n\n  return { useClasses, staticClasses } as const;\n}\n"],"names":[],"mappings":";;AAUA,SAAS,UAEP,aAEA,OACA;AACO,SAAA,OAAO,QAAQ,WAAW,EAAE;AAAA,IACjC,CAAC,KAAK,CAAC,KAAK,KAAK,MAAM;AACrB,UAAI,GAAc,IAAI,MAAM,KAAK,KAAK;AAC/B,aAAA;AAAA,IACT;AAAA,IACA,CAAA;AAAA,EACF;AACF;AAEA,MAAM,iBAAiB,CACrB,KACA,UACM;AACN,QAAM,SAAc,CAAC;AACrB,aAAW,OAAO,KAAK;AACrB,QAAI,OAAO,OAAO,KAAK,GAAG,GAAG;AACrB,YAAA,SAAS,MAAM,GAAG;AAClB,YAAA,QAAQ,IAAI,GAAG;AACd,aAAA,MAAM,IACX,OAAO,UAAU,WAAW,eAAe,OAAc,KAAK,IAAI;AAAA,IAAA;AAAA,EACtE;AAEK,SAAA;AACT;AAGA,MAAM,WAAW,CAAmB,WAAc,SAAoB;AAC7D,SAAA,eAAe,WAAW,CAAC,QAAQ;AAClC,UAAA,UAAU,IAAI,MAAM,QAAQ;AAC9B,QAAA,CAAC,SAAS,OAAe,QAAA;AAC7B,UAAM,SAAS,QAAQ;AAAA,MACrB,CAAC,KAAK,UAAU,IAAI,QAAQ,OAAO,IAAI,IAAI,IAAI,MAAM,MAAM,CAAC,CAAC,EAAE;AAAA,MAC/D;AAAA,IACF;AACA,WAAO,UAAU;AAAA,EAAA,CAClB;AACH;AAGgB,SAAA,cAKd,MACA,cACA;AACM,QAAA,SAAS,SAAS,cAAc,IAAI;AAEpC,QAAA,gBAAgB,UAAU,QAAQ,CAAC,QAAQ,GAAG,IAAI,IAAI,GAAG,EAAE;AAMjE,WAAS,WACP,cAAqD,IAErD,YAAY,MACZ;AACA,UAAM,EAAE,IAAI,IAAI,IAAI,OAAO;AAGrB,UAAA,UAAU,QAAQ,MAAM;AACrB,aAAA;AAAA,QAAU;AAAA,QAAQ,CAAC,QACxB,GAAG,aAAa,GAAG,IAAI,IAAI,GAAG,IAAI,IAAI,OAAO,GAAG,CAAC,GAAG,cAAc,GAAG,CAAC;AAAA,MACxE;AAAA,OACC,CAAC,WAAW,aAAa,KAAK,EAAE,CAAC;AAE7B,WAAA,EAAE,SAAS,KAAK,GAAG;AAAA,EAAA;AAGrB,SAAA,EAAE,YAAY,cAAc;AACrC;"}