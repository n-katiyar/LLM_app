{"version":3,"file":"utils.mjs","sources":["../../src/utils.ts"],"sourcesContent":["import type {\n  DeepString,\n  HvThemeBreakpoint,\n  HvThemeStructure,\n  HvThemeVars,\n  SpacingValue,\n} from \"./types\";\n\nexport const spacingUtil = (value: SpacingValue, vars: HvThemeVars): string => {\n  switch (typeof value) {\n    case \"number\":\n      return value === 0 ? \"0\" : `calc(${vars.space.base} * ${value}px)`;\n    case \"string\":\n      return vars.space[value as HvThemeBreakpoint] || value;\n    default:\n      return value;\n  }\n};\n\n// TODO: remove in favour or `spacingUtil` in v6\nexport const spacingUtilOld = (\n  value: SpacingValue,\n  vars: HvThemeVars,\n): string => {\n  switch (typeof value) {\n    case \"number\":\n      return `${value}px`;\n    case \"string\":\n      return vars.space[value as HvThemeBreakpoint] || value;\n    default:\n      return \"0px\";\n  }\n};\n\nconst toCSSVars = (obj: object, prefix = \"--uikit\") => {\n  const vars: Record<string, string> = {};\n\n  for (const [key, value] of Object.entries(obj)) {\n    if (typeof value === \"object\") {\n      const nestedVars = toCSSVars(value, `${prefix}-${key}`);\n\n      for (const [nestedKey, nestedValue] of Object.entries(nestedVars)) {\n        vars[nestedKey] = nestedValue;\n      }\n    } else {\n      vars[`${prefix}-${key}`] = value;\n    }\n  }\n\n  return vars;\n};\n\nexport const hasMultipleArgs = <T>(args: T[] | [T[]]): args is T[] => {\n  return args.length > 1;\n};\n\nexport const mapCSSVars = <T extends object>(\n  obj: T,\n  prefix = \"--uikit\",\n): DeepString<T> => {\n  const vars: DeepString<any> = {};\n\n  for (const [key, value] of Object.entries(obj)) {\n    if (typeof value === \"object\") {\n      vars[key] = mapCSSVars(value, `${prefix}-${key}`);\n    } else {\n      vars[key] = `var(${prefix}-${key})`;\n    }\n  }\n\n  return vars;\n};\n\n// TODO: review in v6:\n// - typings: accept any or theme object?\n// - arguments: source/target themes, or any number of theme objects?\nexport const mergeTheme = (...objects: any[]) => {\n  const isObject = (obj: unknown) => obj && typeof obj === \"object\";\n\n  return objects.reduce((prev, obj) => {\n    Object.keys(obj).forEach((key) => {\n      const pVal = prev[key];\n      const oVal = obj[key];\n\n      if (isObject(pVal) && isObject(oVal)) {\n        prev[key] = mergeTheme(pVal, oVal);\n      } else {\n        prev[key] = oVal !== undefined ? oVal : pVal;\n      }\n    });\n\n    return prev;\n  }, {});\n};\n\nexport const parseTheme = (\n  themes: HvThemeStructure[],\n  theme = \"\",\n  colorMode = \"\",\n): {\n  theme: HvThemeStructure;\n  selectedTheme: string;\n  selectedMode: string;\n  colorModes: string[];\n  colorScheme: string;\n} => {\n  const names = themes.map((t) => t.name);\n  const selectedTheme = names.includes(theme) ? theme : names[0];\n  const themeStructure =\n    themes.find((t) => t.name === selectedTheme) || themes[0];\n  const colorModes = Object.keys(themeStructure.colors.modes);\n  const selectedMode = colorModes.includes(colorMode)\n    ? colorMode\n    : colorModes[0];\n  const colorScheme = themeStructure.colors.modes[selectedMode].type;\n\n  return {\n    theme: themeStructure,\n    selectedTheme,\n    selectedMode,\n    colorModes,\n    colorScheme,\n  };\n};\n\nexport const getThemesList = (themes: Record<string, any>) => {\n  const list: Record<string, any> = {};\n\n  Object.keys(themes).forEach((themeName) => {\n    const theme = themes[themeName];\n    const colorModes = Object.keys(theme.colors.modes);\n\n    list[themeName] = {\n      colorModes: {},\n    };\n\n    colorModes.forEach((colorMode) => {\n      list[themeName].colorModes[colorMode] = toCSSVars({\n        ...theme,\n        colors: {\n          ...theme.colors.modes[colorMode],\n        },\n      });\n    });\n  });\n\n  return list;\n};\n\nexport const getThemesVars = (themes: HvThemeStructure[]) => {\n  const vars: Record<string, any> = {};\n\n  themes.forEach((theme) => {\n    const colorModes = Object.keys(theme.colors.modes);\n\n    colorModes.forEach((colorMode) => {\n      const styleName = `[data-theme=\"${theme.name}\"][data-color-mode=\"${colorMode}\"]`;\n      const themeName = `[data-theme=\"${theme.name}\"]`;\n\n      // extract properties that shouldn't be mapped to CSS variables\n      // @ts-expect-error align HvTheme <-> HvThemeStructure?\n      const { components, name, colors, palette, ...rest } = theme;\n\n      vars[styleName] = toCSSVars({\n        colors: {\n          ...colors.modes[colorMode],\n        },\n      });\n\n      vars[themeName] = toCSSVars({\n        ...rest,\n      });\n    });\n  });\n\n  return vars;\n};\n"],"names":[],"mappings":"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"}