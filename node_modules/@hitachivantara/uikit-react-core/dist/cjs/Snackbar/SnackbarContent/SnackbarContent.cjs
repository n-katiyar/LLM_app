"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("react/jsx-runtime");
const React = require("react");
const SnackbarContent = require("@mui/material/SnackbarContent");
const uikitReactUtils = require("@hitachivantara/uikit-react-utils");
const iconVariant = require("../../utils/iconVariant.cjs");
const setId = require("../../utils/setId.cjs");
const SnackbarContent_styles = require("./SnackbarContent.styles.cjs");
const ActionsGeneric = require("../../ActionsGeneric/ActionsGeneric.cjs");
const _interopDefault = (e) => e && e.__esModule ? e : { default: e };
const SnackbarContent__default = /* @__PURE__ */ _interopDefault(SnackbarContent);
const HvSnackbarContent = React.forwardRef(function HvSnackbarContent2(props, ref) {
  const {
    className,
    id,
    classes: classesProp,
    label,
    variant = "default",
    showIcon,
    customIcon,
    action,
    actionCallback,
    // TODO - remove in v6
    onAction,
    ...others
  } = uikitReactUtils.useDefaultProps("HvSnackbarContent", props);
  const icon = customIcon || showIcon && iconVariant.iconVariant(variant, "base_dark");
  const innerAction = React.isValidElement(action) ? action : [action];
  const { classes, cx } = SnackbarContent_styles.useClasses(classesProp);
  const { activeTheme } = uikitReactUtils.useTheme();
  return /* @__PURE__ */ jsxRuntime.jsx(
    SnackbarContent__default.default,
    {
      ref,
      id,
      classes: {
        root: classes.root,
        message: classes.message
      },
      className: cx(classes?.[variant], className),
      message: /* @__PURE__ */ jsxRuntime.jsxs("div", { id: setId.setId(id, "message"), className: classes.messageSpan, children: [
        icon && /* @__PURE__ */ jsxRuntime.jsx("div", { className: classes.iconVariant, children: icon }),
        /* @__PURE__ */ jsxRuntime.jsx("div", { className: classes.messageText, children: label }),
        action && /* @__PURE__ */ jsxRuntime.jsx("div", { id: setId.setId(id, "action"), className: classes.action, children: /* @__PURE__ */ jsxRuntime.jsx(
          ActionsGeneric.HvActionsGeneric,
          {
            id,
            variant: activeTheme?.snackbar.actionButtonVariant,
            actions: innerAction,
            actionsCallback: actionCallback,
            onAction
          }
        ) })
      ] }),
      ...others
    }
  );
});
exports.snackbarContentClasses = SnackbarContent_styles.staticClasses;
exports.HvSnackbarContent = HvSnackbarContent;
