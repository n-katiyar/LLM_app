"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("react/jsx-runtime");
const uikitReactIcons = require("@hitachivantara/uikit-react-icons");
const setId = require("../../../utils/setId.cjs");
const Navigation_styles = require("./Navigation.styles.cjs");
const Button = require("../../../Button/Button.cjs");
const Navigation = ({
  id,
  classes: classesProp,
  onNavigatePrevious,
  onNavigateNext,
  onTextClick,
  navigationText = "n/a",
  isPreviousEnabled = true,
  isNextEnabled = true
}) => {
  const { classes, cx } = Navigation_styles.useClasses(classesProp);
  return /* @__PURE__ */ jsxRuntime.jsxs("div", { className: classes.root, children: [
    /* @__PURE__ */ jsxRuntime.jsx(
      Button.HvButton,
      {
        icon: true,
        disabled: !isPreviousEnabled,
        "aria-label": "Previous",
        id: setId.setId(id, "left"),
        className: cx(classes.icon, {
          [classes.disabled]: !isPreviousEnabled
        }),
        onClick: onNavigatePrevious,
        children: /* @__PURE__ */ jsxRuntime.jsx(uikitReactIcons.DropLeftXS, {})
      }
    ),
    /* @__PURE__ */ jsxRuntime.jsx(
      Button.HvButton,
      {
        id,
        variant: "secondaryGhost",
        onClick: onTextClick,
        component: onTextClick ? "button" : "div",
        className: cx(classes.text, {
          [classes.textWithoutHover]: !onTextClick
        }),
        children: navigationText
      }
    ),
    /* @__PURE__ */ jsxRuntime.jsx(
      Button.HvButton,
      {
        icon: true,
        disabled: !isNextEnabled,
        "aria-label": "Next",
        id: setId.setId(id, "right"),
        className: cx(classes.icon, {
          [classes.disabled]: !isNextEnabled
        }),
        onClick: onNavigateNext,
        children: /* @__PURE__ */ jsxRuntime.jsx(uikitReactIcons.DropRightXS, {})
      }
    )
  ] });
};
exports.navigationClasses = Navigation_styles.staticClasses;
exports.Navigation = Navigation;
