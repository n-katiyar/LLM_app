"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("react/jsx-runtime");
const React = require("react");
const uikitReactIcons = require("@hitachivantara/uikit-react-icons");
const uikitReactUtils = require("@hitachivantara/uikit-react-utils");
const setId = require("../../utils/setId.cjs");
const FilterGroupContext = require("../FilterGroupContext.cjs");
const FilterContent_styles = require("./FilterContent.styles.cjs");
const LeftPanel = require("../LeftPanel/LeftPanel.cjs");
const RightPanel = require("../RightPanel/RightPanel.cjs");
const Button = require("../../Button/Button.cjs");
const Typography = require("../../Typography/Typography.cjs");
const BaseDropdown = require("../../BaseDropdown/BaseDropdown.cjs");
const ActionBar = require("../../ActionBar/ActionBar.cjs");
const Counter = require("../Counter/Counter.cjs");
const HvFilterGroupContent = React.forwardRef(function HvFilterGroupContent2(props, ref) {
  const {
    id,
    status,
    disabled = false,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledBy,
    description,
    "aria-describedby": ariaDescribedBy,
    onChange,
    onCancel,
    onClear,
    labels,
    horizontalPlacement = "right",
    disablePortal = true,
    escapeWithReference = true,
    height,
    leftEmptyElement,
    rightEmptyElement,
    classes: classesProp,
    ...others
  } = uikitReactUtils.useDefaultProps("HvFilterGroupContent", props);
  const { classes } = FilterContent_styles.useClasses(classesProp);
  const { activeTheme } = uikitReactUtils.useTheme();
  const [filterGroupOpen, setFilterGroupOpen] = React.useState(false);
  const {
    defaultValue,
    filterValues,
    rollbackFilters,
    clearFilters,
    applyFilters,
    applyDisabled
  } = React.useContext(FilterGroupContext.HvFilterGroupContext);
  const focusTarget = React.useRef(null);
  const focusOnContainer = () => {
    focusTarget.current?.focus();
  };
  const onApplyHandler = (event) => {
    applyFilters();
    onChange?.(event, filterValues);
    setFilterGroupOpen(false);
  };
  const onCancelHandler = (event) => {
    rollbackFilters();
    onCancel?.(event);
    setFilterGroupOpen(false);
  };
  const onClearHandler = (event) => {
    clearFilters();
    onClear?.(event);
  };
  const handleToggle = (event, open) => {
    if (event === null) return;
    setFilterGroupOpen(open);
    if (!open) onCancelHandler?.(event);
  };
  const Header = React.useMemo(
    () => /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [
      /* @__PURE__ */ jsxRuntime.jsx(uikitReactIcons.Filters, {}),
      /* @__PURE__ */ jsxRuntime.jsx(Typography.HvTypography, { variant: "label", children: labels?.placeholder })
    ] }),
    [labels?.placeholder]
  );
  return /* @__PURE__ */ jsxRuntime.jsxs(
    BaseDropdown.HvBaseDropdown,
    {
      ref,
      id: setId.setId(id, "dropdown"),
      role: "combobox",
      classes: {
        root: classes.dropdown,
        panel: classes.panel,
        selection: classes.baseDropdownSelection,
        header: classes.header
      },
      disabled,
      disablePortal,
      variableWidth: true,
      placement: horizontalPlacement,
      expanded: filterGroupOpen,
      onToggle: handleToggle,
      onClickOutside: onCancelHandler,
      onContainerCreation: focusOnContainer,
      placeholder: Header,
      adornment: /* @__PURE__ */ jsxRuntime.jsx(Counter.HvFilterGroupCounter, {}),
      popperProps: {
        modifiers: [{ name: "preventOverflow", enabled: escapeWithReference }]
      },
      "aria-haspopup": "dialog",
      "aria-label": ariaLabel,
      "aria-labelledby": ariaLabelledBy,
      "aria-invalid": status === "invalid" ? true : void 0,
      "aria-errormessage": status === "invalid" ? setId.setId(id, "error") : void 0,
      "aria-describedby": [description && setId.setId(id, "description"), ariaDescribedBy].join(" ").trim() || void 0,
      ...others,
      children: [
        /* @__PURE__ */ jsxRuntime.jsx("div", { ref: focusTarget, tabIndex: -1 }),
        /* @__PURE__ */ jsxRuntime.jsxs("div", { className: classes.root, style: { height }, children: [
          /* @__PURE__ */ jsxRuntime.jsx(
            LeftPanel.HvFilterGroupLeftPanel,
            {
              id,
              className: classes.leftSidePanel,
              emptyElement: leftEmptyElement
            }
          ),
          /* @__PURE__ */ jsxRuntime.jsx(
            RightPanel.HvFilterGroupRightPanel,
            {
              id,
              className: classes.rightSidePanel,
              emptyElement: rightEmptyElement,
              labels
            }
          )
        ] }),
        /* @__PURE__ */ jsxRuntime.jsxs(ActionBar.HvActionBar, { className: classes.actionBar, children: [
          /* @__PURE__ */ jsxRuntime.jsx(
            Button.HvButton,
            {
              id: setId.setId(id, "clearFilters-button"),
              disabled: defaultValue ? defaultValue?.flat().length === filterValues?.flat().length : filterValues?.flat().length === 0,
              variant: "secondaryGhost",
              onClick: onClearHandler,
              children: labels?.clearLabel
            }
          ),
          /* @__PURE__ */ jsxRuntime.jsx("div", { "aria-hidden": "true", className: classes.space, children: "Â " }),
          /* @__PURE__ */ jsxRuntime.jsx(
            Button.HvButton,
            {
              id: setId.setId(id, "apply-button"),
              disabled: applyDisabled,
              variant: activeTheme?.filterGroup.applyButtonVariant,
              onClick: onApplyHandler,
              className: classes.applyButton,
              children: labels?.applyLabel
            }
          ),
          /* @__PURE__ */ jsxRuntime.jsx(
            Button.HvButton,
            {
              id: setId.setId(id, "cancel-button"),
              variant: activeTheme?.filterGroup.cancelButtonVariant,
              onClick: onCancelHandler,
              children: labels?.cancelLabel
            }
          )
        ] })
      ]
    }
  );
});
exports.filterGroupContentClasses = FilterContent_styles.staticClasses;
exports.HvFilterGroupContent = HvFilterGroupContent;
