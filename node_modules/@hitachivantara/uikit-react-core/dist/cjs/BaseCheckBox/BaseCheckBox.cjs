"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("react/jsx-runtime");
const React = require("react");
const MuiCheckbox = require("@mui/material/Checkbox");
const uikitReactUtils = require("@hitachivantara/uikit-react-utils");
const BaseCheckBox_styles = require("./BaseCheckBox.styles.cjs");
const icons = require("./icons.cjs");
const _interopDefault = (e) => e && e.__esModule ? e : { default: e };
const MuiCheckbox__default = /* @__PURE__ */ _interopDefault(MuiCheckbox);
const getSelectorIcons = () => {
  return {
    checkbox: /* @__PURE__ */ jsxRuntime.jsx(icons.Box, {}),
    checkboxPartial: /* @__PURE__ */ jsxRuntime.jsx(icons.Partial, {}),
    checkboxChecked: /* @__PURE__ */ jsxRuntime.jsx(icons.Check, {})
  };
};
const HvBaseCheckBox = React.forwardRef(function HvBaseCheckBox2(props, ref) {
  const {
    id,
    classes: classesProp,
    className,
    name,
    inputProps,
    onChange,
    onFocusVisible,
    onBlur,
    checked,
    indeterminate,
    defaultChecked,
    value = "on",
    required = false,
    readOnly = false,
    disabled = false,
    semantic = false,
    ...others
  } = uikitReactUtils.useDefaultProps("HvBaseCheckBox", props);
  const { classes, cx } = BaseCheckBox_styles.useClasses(classesProp);
  const [focusVisible, setFocusVisible] = React.useState(false);
  const icons2 = getSelectorIcons();
  const onChangeCallback = React.useCallback(
    (event) => {
      if (readOnly) {
        return;
      }
      onChange?.(event, event.target.checked, value);
    },
    [onChange, readOnly, value]
  );
  const onBlurCallback = React.useCallback(
    (event) => {
      setFocusVisible(false);
      onBlur?.(event);
    },
    [onBlur]
  );
  const onFocusVisibleCallback = React.useCallback(
    (event) => {
      setFocusVisible(true);
      onFocusVisible?.(event);
    },
    [onFocusVisible]
  );
  return /* @__PURE__ */ jsxRuntime.jsx(
    MuiCheckbox__default.default,
    {
      ref,
      id,
      name,
      value,
      className: cx(
        classes.root,
        {
          [classes.disabled]: disabled,
          [classes.focusVisible]: focusVisible,
          [classes.checked]: checked,
          [classes.indeterminate]: indeterminate,
          [classes.semantic]: semantic
        },
        className
      ),
      icon: icons2.checkbox,
      indeterminateIcon: icons2.checkboxPartial,
      checkedIcon: icons2.checkboxChecked,
      disabled,
      required,
      readOnly,
      checked,
      defaultChecked,
      indeterminate,
      inputProps,
      onChange: onChangeCallback,
      onFocusVisible: onFocusVisibleCallback,
      onBlur: onBlurCallback,
      color: "default",
      ...others
    }
  );
});
exports.baseCheckBoxClasses = BaseCheckBox_styles.staticClasses;
exports.HvBaseCheckBox = HvBaseCheckBox;
