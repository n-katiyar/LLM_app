"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("react/jsx-runtime");
const React = require("react");
const SnackbarContent = require("@mui/material/SnackbarContent");
const uikitReactIcons = require("@hitachivantara/uikit-react-icons");
const iconVariant = require("../../utils/iconVariant.cjs");
const setId = require("../../utils/setId.cjs");
const BannerContent_styles = require("./BannerContent.styles.cjs");
const Button = require("../../Button/Button.cjs");
const ActionsGeneric = require("../../ActionsGeneric/ActionsGeneric.cjs");
const _interopDefault = (e) => e && e.__esModule ? e : { default: e };
const SnackbarContent__default = /* @__PURE__ */ _interopDefault(SnackbarContent);
const HvBannerContent = React.forwardRef(
  function HvBannerContent2(props, ref) {
    const {
      id,
      classes: classesProp,
      className,
      showIcon = false,
      customIcon,
      variant = "default",
      onClose,
      actions,
      actionsCallback,
      // TODO - remove in v6
      onAction,
      actionsPosition = "auto",
      content,
      children,
      actionProps,
      ...others
    } = props;
    const { classes, cx } = BannerContent_styles.useClasses(classesProp);
    const icon = customIcon || showIcon && iconVariant.iconVariant(variant, "base_dark");
    const effectiveActionsPosition = actionsPosition === "auto" ? "inline" : actionsPosition;
    const handleAction = (evt, action) => {
      onAction?.(evt, action);
      actionsCallback?.(evt, id, action);
    };
    return /* @__PURE__ */ jsxRuntime.jsx("div", { className: classes.outContainer, children: /* @__PURE__ */ jsxRuntime.jsx(
      SnackbarContent__default.default,
      {
        ref,
        id,
        classes: {
          root: classes.root,
          message: classes.message,
          action: classes.action
        },
        className: cx(classes.baseVariant, classes[variant], className),
        message: /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [
          icon && /* @__PURE__ */ jsxRuntime.jsx("div", { className: classes.iconContainer, children: icon }),
          /* @__PURE__ */ jsxRuntime.jsx(
            "div",
            {
              id: setId.setId(id, "message-text"),
              className: classes.messageContainer,
              children: children ?? content
            }
          ),
          actions && effectiveActionsPosition === "inline" && /* @__PURE__ */ jsxRuntime.jsx(
            "div",
            {
              id: setId.setId(id, "message-actions"),
              className: classes.messageActions,
              children: /* @__PURE__ */ jsxRuntime.jsx(
                ActionsGeneric.HvActionsGeneric,
                {
                  id,
                  variant: "semantic",
                  actions,
                  onAction: handleAction
                }
              )
            }
          )
        ] }),
        action: /* @__PURE__ */ jsxRuntime.jsxs("div", { className: classes.actionContainer, children: [
          /* @__PURE__ */ jsxRuntime.jsx(
            Button.HvButton,
            {
              icon: true,
              className: classes.closeAction,
              variant: "semantic",
              "aria-label": "Close",
              onClick: onClose,
              ...actionProps,
              children: /* @__PURE__ */ jsxRuntime.jsx(uikitReactIcons.Close, { size: "XS" })
            }
          ),
          actions && effectiveActionsPosition === "bottom-right" && /* @__PURE__ */ jsxRuntime.jsx("div", { className: classes.actionsInnerContainer, children: /* @__PURE__ */ jsxRuntime.jsx(
            ActionsGeneric.HvActionsGeneric,
            {
              id,
              variant: "semantic",
              actions,
              onAction: handleAction
            }
          ) })
        ] }),
        ...others
      }
    ) });
  }
);
exports.bannerContentClasses = BannerContent_styles.staticClasses;
exports.HvBannerContent = HvBannerContent;
