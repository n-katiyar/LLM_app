"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("react/jsx-runtime");
const React = require("react");
const uikitReactIcons = require("@hitachivantara/uikit-react-icons");
const uikitReactUtils = require("@hitachivantara/uikit-react-utils");
const useControlled = require("../hooks/useControlled.cjs");
const useLabels = require("../hooks/useLabels.cjs");
const useUniqueId = require("../hooks/useUniqueId.cjs");
const setId = require("../utils/setId.cjs");
const ColorPicker_styles = require("./ColorPicker.styles.cjs");
const PresetColors = require("./PresetColors/PresetColors.cjs");
const Picker = require("./Picker/Picker.cjs");
const SavedColors = require("./SavedColors/SavedColors.cjs");
const FormElement = require("../FormElement/FormElement.cjs");
const Label = require("../FormElement/Label/Label.cjs");
const InfoMessage = require("../FormElement/InfoMessage/InfoMessage.cjs");
const BaseDropdown = require("../BaseDropdown/BaseDropdown.cjs");
const Panel = require("../Panel/Panel.cjs");
const Typography = require("../Typography/Typography.cjs");
const DEFAULT_LABELS = {
  recommendedColorsLabel: "Recommended colors:",
  customColorsLabel: "Custom colors:"
};
const HvColorPicker = React.forwardRef(
  function HvColorPicker2(props, ref) {
    const {
      id,
      name,
      required,
      disabled,
      label,
      "aria-label": ariaLabel,
      "aria-labelledby": ariaLabelledBy,
      description,
      "aria-describedby": ariaDescribedBy,
      className,
      classes: classesProp,
      value,
      onChange,
      onChangeComplete,
      defaultValue = "",
      expanded,
      defaultExpanded = false,
      recommendedColorsPosition = "top",
      recommendedColors = [
        "#95AFE8",
        "#E89E5D",
        "#83B8A6",
        "#70759C",
        "#C57E7E",
        "#FADA95",
        "#ADBFE8",
        "#E3B386",
        "#9AC6B7",
        "#8B90AF",
        "#CF9797",
        "#FAE1AA"
      ],
      showLabels = true,
      labels: labelsProp,
      dropdownIcon = "colorPicker",
      placeholder = "Select color...",
      iconOnly = false,
      showSavedColors = true,
      showCustomColors = true,
      savedColorsValue,
      defaultSavedColorsValue = [],
      onSavedColorAdded,
      onSavedColorRemoved,
      deleteSavedColorButtonArialLabel = "Delete saved color",
      addSavedColorButtonAriaLabel = "Add current color to saved colors"
    } = uikitReactUtils.useDefaultProps("HvColorPicker", props);
    const { classes, cx } = ColorPicker_styles.useClasses(classesProp);
    const labels = useLabels.useLabels(DEFAULT_LABELS, labelsProp);
    const [isOpen, setIsOpen] = useControlled.useControlled(expanded, defaultExpanded);
    const [color, setColor] = useControlled.useControlled(value, defaultValue);
    const [savedColors, setSavedColors] = useControlled.useControlled(
      savedColorsValue,
      defaultSavedColorsValue
    );
    const elementId = useUniqueId.useUniqueId(id);
    const hasLabel = label != null;
    const hasDescription = description != null;
    const handleToggle = (_, open) => {
      setIsOpen(open);
    };
    const handleSelect = (val) => {
      onChange?.(val.hex);
      onChangeComplete?.(val.hex);
      setColor(val.hex);
    };
    const handleOnChange = (val) => {
      onChange?.(val.hex);
      setColor(val.hex);
    };
    const handleOnChangeComplete = (val) => {
      onChangeComplete?.(val.hex);
      setColor(val.hex);
    };
    const handleAddColor = () => {
      const colorToAdd = color || "#000000";
      onSavedColorAdded?.(colorToAdd);
      setSavedColors([...savedColors, colorToAdd]);
    };
    const handleRemoveColor = (val, position) => {
      if (savedColors[position] === val) {
        const sColors = [...savedColors];
        sColors.splice(position, 1);
        onSavedColorRemoved?.(val);
        setSavedColors(sColors);
      }
    };
    const setFocusToContent = (containerRef) => {
      const inputs = containerRef?.getElementsByTagName("input");
      if (inputs && inputs.length > 0) {
        inputs[0].focus();
      }
    };
    return /* @__PURE__ */ jsxRuntime.jsxs(
      FormElement.HvFormElement,
      {
        id,
        name,
        disabled,
        required,
        className: cx(classes.root, className),
        children: [
          (hasLabel || hasDescription) && /* @__PURE__ */ jsxRuntime.jsxs("div", { className: classes.labelContainer, children: [
            hasLabel && /* @__PURE__ */ jsxRuntime.jsx(
              Label.HvLabel,
              {
                showGutter: true,
                id: setId.setId(elementId, "label"),
                label,
                className: classes.label
              }
            ),
            hasDescription && /* @__PURE__ */ jsxRuntime.jsx(
              InfoMessage.HvInfoMessage,
              {
                id: setId.setId(elementId, "description"),
                className: classes.description,
                children: description
              }
            )
          ] }),
          /* @__PURE__ */ jsxRuntime.jsx(
            BaseDropdown.HvBaseDropdown,
            {
              ref,
              variableWidth: true,
              className,
              expanded: isOpen,
              onToggle: handleToggle,
              onContainerCreation: setFocusToContent,
              classes: {
                root: cx({ [classes.dropdownRootIconOnly]: iconOnly })
              },
              adornment: iconOnly && color ? /* @__PURE__ */ jsxRuntime.jsx(
                "div",
                {
                  style: { backgroundColor: color },
                  className: cx(
                    classes.headerColorIcon,
                    classes.headerColorIconOnly
                  )
                }
              ) : dropdownIcon === "colorPicker" ? /* @__PURE__ */ jsxRuntime.jsx(uikitReactIcons.ColorPicker, { className: classes.colorPickerIcon }) : void 0,
              placeholder: iconOnly ? void 0 : color ? /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [
                /* @__PURE__ */ jsxRuntime.jsx(
                  "div",
                  {
                    style: { backgroundColor: color },
                    className: classes.headerColorIcon
                  }
                ),
                /* @__PURE__ */ jsxRuntime.jsx(
                  Typography.HvTypography,
                  {
                    className: classes.headerColorValue,
                    variant: "label",
                    children: color
                  }
                )
              ] }) : placeholder,
              "aria-label": ariaLabel,
              "aria-labelledby": [label && setId.setId(elementId, "label"), ariaLabelledBy].join(" ").trim() || void 0,
              "aria-describedby": [description && setId.setId(elementId, "description"), ariaDescribedBy].join(" ").trim() || void 0,
              children: /* @__PURE__ */ jsxRuntime.jsx(Panel.HvPanel, { className: classes.panel, children: /* @__PURE__ */ jsxRuntime.jsxs("div", { className: classes.colorPicker, children: [
                recommendedColorsPosition === "top" && /* @__PURE__ */ jsxRuntime.jsx(
                  PresetColors.PresetColors,
                  {
                    className: classes.recommendedColorsRoot,
                    colors: recommendedColors,
                    onClick: handleSelect,
                    title: showLabels ? labels.recommendedColorsLabel : void 0
                  }
                ),
                showCustomColors && /* @__PURE__ */ jsxRuntime.jsx(
                  Picker.Picker,
                  {
                    classes: {
                      fields: cx({
                        [classes.pickerFields]: recommendedColorsPosition === "bottom" || showSavedColors
                      })
                    },
                    title: showLabels ? labels.customColorsLabel : void 0,
                    color,
                    onChange: handleOnChange,
                    onChangeComplete: handleOnChangeComplete
                  }
                ),
                showSavedColors && /* @__PURE__ */ jsxRuntime.jsx(
                  SavedColors.SavedColors,
                  {
                    colors: savedColors,
                    onAddColor: handleAddColor,
                    onClickColor: handleSelect,
                    onRemoveColor: handleRemoveColor,
                    deleteButtonAriaLabel: deleteSavedColorButtonArialLabel,
                    addButtonAriaLabel: addSavedColorButtonAriaLabel
                  }
                ),
                recommendedColorsPosition === "bottom" && /* @__PURE__ */ jsxRuntime.jsx(
                  PresetColors.PresetColors,
                  {
                    colors: recommendedColors,
                    onClick: handleSelect,
                    title: showLabels ? labels.recommendedColorsLabel : void 0
                  }
                )
              ] }) })
            }
          )
        ]
      }
    );
  }
);
exports.colorPickerClasses = ColorPicker_styles.staticClasses;
exports.HvColorPicker = HvColorPicker;
