"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("react/jsx-runtime");
const React = require("react");
const uikitReactIcons = require("@hitachivantara/uikit-react-icons");
const Context = require("../Context.cjs");
const QueryBuilder_styles = require("../QueryBuilder.styles.cjs");
const Button = require("../../Button/Button.cjs");
const Rule = require("../Rule/Rule.cjs");
const EmptyState = require("../../EmptyState/EmptyState.cjs");
const MultiButton = require("../../MultiButton/MultiButton.cjs");
const IconButton = require("../../IconButton/IconButton.cjs");
const Typography = require("../../Typography/Typography.cjs");
const RuleGroup = ({
  level = 0,
  id,
  combinator = "and",
  rules = [],
  classes: classesProp
}) => {
  const { classes, cx } = QueryBuilder_styles.useClasses(classesProp);
  const {
    dispatchAction,
    askAction,
    maxDepth,
    combinators,
    labels,
    readOnly,
    disableConfirmation,
    allowRepeatedAttributes
  } = Context.useQueryBuilderContext();
  const normalizedMaxDepth = maxDepth - 1;
  const actionButtons = /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [
    /* @__PURE__ */ jsxRuntime.jsx("div", { className: classes.buttonBackground, children: /* @__PURE__ */ jsxRuntime.jsx(
      Button.HvButton,
      {
        variant: "secondarySubtle",
        onClick: () => {
          dispatchAction({ type: "add-rule", id });
        },
        disabled: readOnly,
        startIcon: /* @__PURE__ */ jsxRuntime.jsx(uikitReactIcons.Add, {}),
        children: level === 0 && labels.query?.addRule?.label != null ? labels.query?.addRule?.label : labels.group.addRule.label
      }
    ) }),
    level <= normalizedMaxDepth && /* @__PURE__ */ jsxRuntime.jsx("div", { className: classes.buttonBackground, children: /* @__PURE__ */ jsxRuntime.jsx(
      Button.HvButton,
      {
        variant: "secondarySubtle",
        onClick: () => {
          dispatchAction({ type: "add-group", id });
        },
        disabled: readOnly,
        startIcon: /* @__PURE__ */ jsxRuntime.jsx(uikitReactIcons.Add, {}),
        children: level === 0 && labels.query?.addGroup?.label != null ? labels.query?.addGroup?.label : labels.group.addGroup.label
      }
    ) })
  ] });
  const onClickCombinator = React.useCallback(
    (item) => {
      dispatchAction({
        type: "set-combinator",
        id,
        combinator: item.operand
      });
    },
    [dispatchAction, id]
  );
  return /* @__PURE__ */ jsxRuntime.jsxs(
    "div",
    {
      className: cx(classes.root, {
        [classes.topGroup]: level === 0,
        [classes.subGroup]: level > 0
      }),
      children: [
        /* @__PURE__ */ jsxRuntime.jsx(
          MultiButton.HvMultiButton,
          {
            className: cx(classes.combinator, classes.topCombinator),
            disabled: readOnly,
            "aria-disabled": readOnly,
            children: combinators?.map((item) => /* @__PURE__ */ jsxRuntime.jsx(
              Button.HvButton,
              {
                className: classes.combinatorButton,
                selected: item.operand === combinator,
                onClick: () => item.operand && onClickCombinator(item),
                disabled: readOnly,
                size: "xs",
                children: item.label
              },
              item.operand
            ))
          }
        ),
        /* @__PURE__ */ jsxRuntime.jsx("div", { className: cx(classes.buttonBackground, classes.topRemoveButton), children: /* @__PURE__ */ jsxRuntime.jsx(
          IconButton.HvIconButton,
          {
            className: classes.removeButton,
            onClick: () => disableConfirmation ? dispatchAction({ type: "remove-node", id }) : askAction({
              actions: [{ type: "remove-node", id }],
              dialog: level === 0 && labels.query?.delete != null ? labels.query.delete : labels.group.delete
            }),
            title: level === 0 && labels.query?.delete?.tooltip || labels.group.delete.tooltip || level === 0 && labels.query?.delete?.ariaLabel || labels.group.delete.ariaLabel,
            disabled: readOnly,
            children: /* @__PURE__ */ jsxRuntime.jsx(
              uikitReactIcons.Delete,
              {
                className: cx({ [classes.topRemoveButtonDisabled]: readOnly })
              }
            )
          }
        ) }),
        rules?.length > 0 && /* @__PURE__ */ jsxRuntime.jsx(
          "div",
          {
            className: cx(classes.rulesContainer, {
              [classes.subRulesContainer]: level > 0,
              [classes.topRulesContainer]: level === 0
            }),
            children: rules.map((rule, index) => {
              if ("combinator" in rule) {
                return /* @__PURE__ */ jsxRuntime.jsx(
                  RuleGroup,
                  {
                    level: level + 1,
                    ...rule,
                    id: rule.id,
                    classes
                  },
                  rule.id
                );
              }
              const isInvalid = allowRepeatedAttributes ? false : combinator === "and" && rules.some((r, i) => {
                if ("attribute" in r) {
                  if (r.attribute === rule.attribute && r.id !== rule.id && i < index) {
                    return true;
                  }
                }
                return false;
              });
              return /* @__PURE__ */ jsxRuntime.jsx(
                Rule.Rule,
                {
                  ...rule,
                  isInvalid,
                  id: rule.id,
                  combinator
                },
                rule.id
              );
            })
          }
        ),
        rules?.length === 0 && /* @__PURE__ */ jsxRuntime.jsx(
          EmptyState.HvEmptyState,
          {
            title: labels.empty?.title,
            message: /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [
              /* @__PURE__ */ jsxRuntime.jsx(
                Typography.HvTypography,
                {
                  link: true,
                  component: "button",
                  onClick: () => {
                    dispatchAction({ type: "add-rule", id });
                  },
                  className: classes.createConditionButton,
                  disabled: readOnly,
                  "aria-disabled": readOnly,
                  children: `${labels.empty?.createCondition}`
                }
              ),
              level <= normalizedMaxDepth && /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [
                `${labels.empty?.spacer}`,
                /* @__PURE__ */ jsxRuntime.jsx(
                  Typography.HvTypography,
                  {
                    link: true,
                    component: "button",
                    onClick: () => {
                      dispatchAction({ type: "add-group", id });
                    },
                    className: classes.createGroupButton,
                    disabled: readOnly,
                    "aria-disabled": readOnly,
                    children: `${labels.empty?.createGroup}`
                  }
                )
              ] })
            ] }),
            icon: /* @__PURE__ */ jsxRuntime.jsx(uikitReactIcons.Info, {})
          }
        ),
        /* @__PURE__ */ jsxRuntime.jsx(
          "div",
          {
            className: cx(
              classes.actionButtonContainer,
              classes.topActionButtonContainer
            ),
            children: actionButtons
          }
        )
      ]
    }
  );
};
exports.RuleGroup = RuleGroup;
