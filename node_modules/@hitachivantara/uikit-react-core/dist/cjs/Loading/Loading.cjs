"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("react/jsx-runtime");
const React = require("react");
const uikitReactUtils = require("@hitachivantara/uikit-react-utils");
const uikitStyles = require("@hitachivantara/uikit-styles");
const helpers = require("../utils/helpers.cjs");
const Loading_styles = require("./Loading.styles.cjs");
const Typography = require("../Typography/Typography.cjs");
const HvLoading = React.forwardRef(function HvLoading2(props, ref) {
  const {
    color,
    hidden,
    small,
    label,
    classes: classesProp,
    style,
    className,
    ...others
  } = uikitReactUtils.useDefaultProps("HvLoading", props);
  const { classes, cx } = Loading_styles.useClasses(classesProp);
  const size = small ? "small" : "regular";
  const colorVariant = color && `${size}Color`;
  return /* @__PURE__ */ jsxRuntime.jsxs(
    "div",
    {
      ref,
      hidden: !!hidden,
      style: uikitReactUtils.mergeStyles(style, {
        color: uikitStyles.getColor(color, small ? "secondary" : "brand"),
        "--customColor": uikitStyles.getColor(color)
      }),
      className: cx(
        classes.root,
        {
          [classes.hidden]: hidden
        },
        className
      ),
      ...others,
      children: [
        /* @__PURE__ */ jsxRuntime.jsx("div", { className: classes.barContainer, children: helpers.range(3).map((e) => /* @__PURE__ */ jsxRuntime.jsx(
          "div",
          {
            className: cx(
              classes.loadingBar,
              // TODO: hoist to parent & remove unused `colorVariant` in v6
              classes[size],
              classes[colorVariant]
            )
          },
          e
        )) }),
        label && /* @__PURE__ */ jsxRuntime.jsx(Typography.HvTypography, { variant: "caption1", className: classes.label, children: label })
      ]
    }
  );
});
exports.loadingClasses = Loading_styles.staticClasses;
exports.HvLoading = HvLoading;
