"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("react/jsx-runtime");
const React = require("react");
const uikitReactIcons = require("@hitachivantara/uikit-react-icons");
const uikitReactUtils = require("@hitachivantara/uikit-react-utils");
const uikitStyles = require("@hitachivantara/uikit-styles");
const useControlled = require("../hooks/useControlled.cjs");
const keyboardUtils = require("../utils/keyboardUtils.cjs");
const Tag_styles = require("./Tag.styles.cjs");
const ButtonBase = require("../ButtonBase/ButtonBase.cjs");
const Typography = require("../Typography/Typography.cjs");
const HvTag = React.forwardRef(function HvTag2(props, ref) {
  const {
    classes: classesProp,
    className,
    component,
    style,
    label,
    disabled,
    type = "semantic",
    selectable,
    selected,
    defaultSelected = false,
    color,
    deleteIcon: deleteIconProp,
    onDelete,
    onClick,
    onKeyDown,
    onKeyUp,
    // TODO: remove from API
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    deleteButtonArialLabel = "Delete tag",
    deleteButtonProps = {},
    ...others
  } = uikitReactUtils.useDefaultProps("HvTag", props);
  const { classes, cx } = Tag_styles.useClasses(classesProp);
  const [isSelected, setIsSelected] = useControlled.useControlled(
    selected,
    Boolean(defaultSelected)
  );
  const handleDeleteClick = (event) => {
    event.stopPropagation();
    onDelete?.(event);
  };
  const backgroundColor = type === "semantic" && uikitStyles.getColor(color, "neutral_20") || type === "categorical" && uikitStyles.theme.alpha(uikitStyles.getColor(color, "cat1"), 0.2) || void 0;
  const isClickable = !!(onClick || onDelete || selectable);
  const CheckboxIcon = isSelected ? uikitReactIcons.CheckboxCheck : uikitReactIcons.Checkbox;
  const deleteIcon = deleteIconProp && React.isValidElement(deleteIconProp) ? React.cloneElement(deleteIconProp, {
    className: cx(classes.deleteIcon, {
      [classes.disabledDeleteIcon]: disabled
    }),
    onClick: handleDeleteClick
  }) : /* @__PURE__ */ jsxRuntime.jsx(
    uikitReactIcons.CloseXS,
    {
      size: "XS",
      onClick: handleDeleteClick,
      className: cx(classes.deleteIcon, classes.button, classes.tagButton),
      ...deleteButtonProps
    }
  );
  return /* @__PURE__ */ jsxRuntime.jsxs(
    ButtonBase.HvButtonBase,
    {
      ref,
      component: isClickable ? ButtonBase.HvButtonBase : "div",
      disabled,
      "data-color": color,
      style: uikitReactUtils.mergeStyles(style, {
        "--bgColor": backgroundColor
      }),
      className: cx(classes.root, classes.chipRoot, className, {
        [classes.disabled]: disabled,
        [classes.selected]: isSelected,
        [classes.clickable]: isClickable && !disabled,
        [classes.categorical]: type === "categorical",
        [classes.categoricalFocus]: type === "categorical" && !disabled,
        [classes.categoricalDisabled]: type === "categorical" && disabled
      }),
      onKeyUp: (event) => {
        if (event.currentTarget === event.target && keyboardUtils.isDeleteKey(event)) {
          onDelete?.(event);
        }
        onKeyUp?.(event);
      },
      onClick: (event) => {
        if (disabled) return;
        if (selectable) setIsSelected(!isSelected);
        onClick?.(event, !isSelected);
      },
      selected: isClickable && isSelected,
      ...others,
      children: [
        selectable && type === "semantic" && /* @__PURE__ */ jsxRuntime.jsx(
          CheckboxIcon,
          {
            className: classes.icon,
            color: disabled && ["atmo3", "secondary_60"] || void 0,
            size: "XS"
          }
        ),
        /* @__PURE__ */ jsxRuntime.jsx(
          Typography.HvTypography,
          {
            noWrap: true,
            variant: "caption2",
            component: "span",
            className: classes.label,
            children: label
          }
        ),
        onDelete && !disabled && deleteIcon
      ]
    }
  );
});
exports.tagClasses = Tag_styles.staticClasses;
exports.HvTag = HvTag;
