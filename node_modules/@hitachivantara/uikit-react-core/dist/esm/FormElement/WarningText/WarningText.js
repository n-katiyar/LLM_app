import { jsx, jsxs } from "react/jsx-runtime";
import { useContext } from "react";
import { Fail } from "@hitachivantara/uikit-react-icons";
import { useDefaultProps } from "@hitachivantara/uikit-react-utils";
import { setId } from "../../utils/setId.js";
import { HvFormElementContext } from "../context.js";
import { useClasses } from "./WarningText.styles.js";
import { staticClasses } from "./WarningText.styles.js";
const HvWarningText = (props) => {
  const {
    children,
    adornment: adornmentProp,
    isVisible: isVisibleProp,
    classes: classesProp,
    className,
    id: idProp,
    disabled: disabledProp,
    disableGutter = false,
    disableBorder = false,
    disableAdornment = false,
    hideText = false,
    ...others
  } = useDefaultProps("HvWarningText", props);
  const { classes, cx } = useClasses(classesProp);
  const context = useContext(HvFormElementContext);
  const disabled = disabledProp ?? context.disabled;
  const visible = isVisibleProp ?? context.status === "invalid";
  const id = idProp ?? setId(context.id, "error");
  const showWarning = visible && !disabled;
  const adornment = adornmentProp || /* @__PURE__ */ jsx(Fail, { size: "xs", className: classes.defaultIcon });
  return /* @__PURE__ */ jsxs(
    "div",
    {
      className: cx(
        classes.root,
        {
          [classes.show]: showWarning,
          [classes.topBorder]: !disableBorder
        },
        className
      ),
      children: [
        !disableAdornment && adornment,
        /* @__PURE__ */ jsx(
          "span",
          {
            id,
            className: cx(classes.warningText, {
              [classes.topGutter]: !disableGutter,
              [classes.hideText]: hideText
            }),
            role: "status",
            "aria-live": "polite",
            "aria-relevant": "additions text",
            ...others,
            children: showWarning && children
          }
        )
      ]
    }
  );
};
export {
  HvWarningText,
  staticClasses as warningTextClasses
};
