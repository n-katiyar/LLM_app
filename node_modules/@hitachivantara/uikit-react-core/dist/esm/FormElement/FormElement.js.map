{"version":3,"file":"FormElement.js","sources":["../../../src/FormElement/FormElement.tsx"],"sourcesContent":["import { useMemo } from \"react\";\nimport {\n  useDefaultProps,\n  type ExtractNames,\n} from \"@hitachivantara/uikit-react-utils\";\n\nimport { useUniqueId } from \"../hooks/useUniqueId\";\nimport { HvBaseProps } from \"../types/generic\";\nimport {\n  HvFormElementContext,\n  HvFormElementDescriptorsContext,\n  HvFormElementValueContext,\n  type HvFormElementContextValue,\n} from \"./context\";\nimport { staticClasses, useClasses } from \"./FormElement.styles\";\nimport { findDescriptors } from \"./utils\";\n\nexport { staticClasses as formElementClasses };\n\nexport type HvFormElementClasses = ExtractNames<typeof useClasses>;\n\nexport type HvFormStatus = \"standBy\" | \"valid\" | \"invalid\" | \"empty\";\n\nexport interface HvFormElementProps\n  extends HvFormElementContextValue,\n    HvBaseProps<HTMLDivElement, \"onChange\" | \"onToggle\"> {\n  /**\n   * Current value of the form element.\n   *\n   * Part of a name/value pair, should be the value property of the underling native input.\n   */\n  value?: any;\n  /**\n   * The label of the form element.\n   *\n   * The form element must be labeled for accessibility reasons.\n   * If not provided, an aria-label or aria-labelledby must be provided instead.\n   */\n  label?: React.ReactNode;\n  /** Provide additional descriptive text for the form element. */\n  description?: React.ReactNode;\n  /** The error message to show when `status` is \"invalid\". */\n  statusMessage?: string;\n  /** The callback fired when the value changes. */\n  onChange?: (event: React.FormEvent<HTMLDivElement>) => void;\n  /** A Jss Object used to override or extend the styles applied to the component. */\n  classes?: HvFormElementClasses;\n}\n\n/**\n * Provides form-related context (ie. required/disabled/readOnly) for building form components,\n * analogous to MUI's [`FormControl`](https://mui.com/material-ui/api/form-control/) component.\n *\n * It is used internally to build UI Kit's form components (eg. `HvInput`, `HvDatePicker`), and can be used to build custom form components.\n */\nexport const HvFormElement = (props: HvFormElementProps) => {\n  const {\n    classes: classesProp,\n    className,\n    children,\n    id: idProp,\n    name,\n    value,\n    disabled,\n    required,\n    readOnly,\n    status = \"standBy\",\n    ...others\n  } = useDefaultProps(\"HvFormElement\", props);\n\n  const { classes, cx } = useClasses(classesProp);\n\n  const id = useUniqueId(idProp);\n\n  const contextValue = useMemo<HvFormElementContextValue>(\n    () => ({ id, name, status, disabled, required, readOnly }),\n    [id, name, status, disabled, required, readOnly],\n  );\n\n  const descriptors = useMemo(() => findDescriptors(children), [children]);\n\n  return (\n    <div id={id} className={cx(classes.root, className)} {...others}>\n      <HvFormElementContext.Provider value={contextValue}>\n        <HvFormElementValueContext.Provider value={value}>\n          <HvFormElementDescriptorsContext.Provider value={descriptors}>\n            {children}\n          </HvFormElementDescriptorsContext.Provider>\n        </HvFormElementValueContext.Provider>\n      </HvFormElementContext.Provider>\n    </div>\n  );\n};\n\nHvFormElement.formElementType = \"formelement\";\n"],"names":[],"mappings":";;;;;;;;AAuDa,MAAA,gBAAgB,CAAC,UAA8B;AACpD,QAAA;AAAA,IACJ,SAAS;AAAA,IACT;AAAA,IACA;AAAA,IACA,IAAI;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,SAAS;AAAA,IACT,GAAG;AAAA,EAAA,IACD,gBAAgB,iBAAiB,KAAK;AAE1C,QAAM,EAAE,SAAS,OAAO,WAAW,WAAW;AAExC,QAAA,KAAK,YAAY,MAAM;AAE7B,QAAM,eAAe;AAAA,IACnB,OAAO,EAAE,IAAI,MAAM,QAAQ,UAAU,UAAU;IAC/C,CAAC,IAAI,MAAM,QAAQ,UAAU,UAAU,QAAQ;AAAA,EACjD;AAEM,QAAA,cAAc,QAAQ,MAAM,gBAAgB,QAAQ,GAAG,CAAC,QAAQ,CAAC;AAEvE,SACG,oBAAA,OAAA,EAAI,IAAQ,WAAW,GAAG,QAAQ,MAAM,SAAS,GAAI,GAAG,QACvD,UAAA,oBAAC,qBAAqB,UAArB,EAA8B,OAAO,cACpC,UAAC,oBAAA,0BAA0B,UAA1B,EAAmC,OAClC,UAAC,oBAAA,gCAAgC,UAAhC,EAAyC,OAAO,aAC9C,SACH,CAAA,EACF,CAAA,EACF,CAAA,GACF;AAEJ;AAEA,cAAc,kBAAkB;"}