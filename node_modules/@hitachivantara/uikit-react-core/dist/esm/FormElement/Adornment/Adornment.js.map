{"version":3,"file":"Adornment.js","sources":["../../../../src/FormElement/Adornment/Adornment.tsx"],"sourcesContent":["import { forwardRef, useContext } from \"react\";\nimport {\n  useDefaultProps,\n  type ExtractNames,\n} from \"@hitachivantara/uikit-react-utils\";\n\nimport { HvButtonBase } from \"../../ButtonBase\";\nimport { HvBaseProps } from \"../../types/generic\";\nimport {\n  HvFormElementContext,\n  HvFormElementDescriptorsContext,\n} from \"../context\";\nimport { HvFormStatus } from \"../FormElement\";\nimport { staticClasses, useClasses } from \"./Adornment.styles\";\n\nexport { staticClasses as adornmentClasses };\n\nexport type HvAdornmentClasses = ExtractNames<typeof useClasses>;\n\nexport interface HvAdornmentProps\n  extends HvBaseProps<\n    HTMLDivElement | HTMLButtonElement,\n    \"onMouseDown\" | \"onKeyDown\"\n  > {\n  /** The icon to be added into the input. */\n  icon: React.ReactNode;\n  /** Controls the visibility of the adornment based on the form element's status. `isVisible` overrides this behavior. */\n  showWhen?: HvFormStatus;\n  /** Function to be executed when this element is clicked. */\n  onClick?: React.MouseEventHandler<HTMLButtonElement>;\n  /** If this property is defined the adornment visibility will be exclusively controlled by this value. */\n  isVisible?: boolean;\n  /** A Jss Object used to override or extend the styles applied to the component. */\n  classes?: HvAdornmentClasses;\n}\n\n/**\n * Allows to add a decorative icon or an action to a form element, usually on the right side of an input.\n * E.g., the reveal password button.\n *\n * This component disables keyboard navigation by default, ensuring that it doesn't steal focus from the input.\n * As such, its functionality, if any, for accessibility purposes must be provided through an alternative mean.\n * This behavior can be overridden by providing an a `tabIndex={0}`.\n */\nexport const HvAdornment = forwardRef<\n  HTMLDivElement | HTMLButtonElement,\n  HvAdornmentProps\n>(function HvAdornment(props, ref) {\n  const {\n    classes: classesProp,\n    className,\n    icon,\n    showWhen,\n    onClick,\n    isVisible,\n    tabIndex,\n    ...others\n  } = useDefaultProps(\"HvAdornment\", props);\n  const { classes, cx } = useClasses(classesProp);\n\n  const { status, disabled } = useContext(HvFormElementContext);\n  const { input } = useContext(HvFormElementDescriptorsContext);\n\n  const displayIcon = isVisible ?? (showWhen == null || status === showWhen);\n\n  const Component = onClick ? HvButtonBase : \"div\";\n\n  return (\n    <Component\n      ref={ref as React.ForwardedRef<any>}\n      aria-hidden={tabIndex == null || tabIndex < 0 ? true : undefined}\n      className={cx(\n        classes.root,\n        classes.adornment,\n        classes.icon,\n        onClick ? classes.adornmentButton : classes.adornmentIcon,\n        {\n          [classes.hideIcon]: !displayIcon,\n          [classes.disabled]: disabled,\n        },\n        className,\n      )}\n      {...(onClick && {\n        disabled,\n        tabIndex: tabIndex ?? -1,\n        \"aria-controls\": input?.[0]?.id,\n        onClick: onClick as React.MouseEventHandler<any>,\n        onMouseDown: (event) => event.preventDefault(),\n      })}\n      {...others}\n    >\n      {icon}\n    </Component>\n  );\n});\n"],"names":["HvAdornment"],"mappings":";;;;;;;AA4CO,MAAM,cAAc,WAGzB,SAASA,aAAY,OAAO,KAAK;AAC3B,QAAA;AAAA,IACJ,SAAS;AAAA,IACT;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,GAAG;AAAA,EAAA,IACD,gBAAgB,eAAe,KAAK;AACxC,QAAM,EAAE,SAAS,OAAO,WAAW,WAAW;AAE9C,QAAM,EAAE,QAAQ,aAAa,WAAW,oBAAoB;AAC5D,QAAM,EAAE,MAAA,IAAU,WAAW,+BAA+B;AAE5D,QAAM,cAAc,cAAc,YAAY,QAAQ,WAAW;AAE3D,QAAA,YAAY,UAAU,eAAe;AAGzC,SAAA;AAAA,IAAC;AAAA,IAAA;AAAA,MACC;AAAA,MACA,eAAa,YAAY,QAAQ,WAAW,IAAI,OAAO;AAAA,MACvD,WAAW;AAAA,QACT,QAAQ;AAAA,QACR,QAAQ;AAAA,QACR,QAAQ;AAAA,QACR,UAAU,QAAQ,kBAAkB,QAAQ;AAAA,QAC5C;AAAA,UACE,CAAC,QAAQ,QAAQ,GAAG,CAAC;AAAA,UACrB,CAAC,QAAQ,QAAQ,GAAG;AAAA,QACtB;AAAA,QACA;AAAA,MACF;AAAA,MACC,GAAI,WAAW;AAAA,QACd;AAAA,QACA,UAAU,YAAY;AAAA,QACtB,iBAAiB,QAAQ,CAAC,GAAG;AAAA,QAC7B;AAAA,QACA,aAAa,CAAC,UAAU,MAAM,eAAe;AAAA,MAC/C;AAAA,MACC,GAAG;AAAA,MAEH,UAAA;AAAA,IAAA;AAAA,EACH;AAEJ,CAAC;"}