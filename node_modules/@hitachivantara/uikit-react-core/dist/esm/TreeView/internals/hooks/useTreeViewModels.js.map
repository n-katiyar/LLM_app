{"version":3,"file":"useTreeViewModels.js","sources":["../../../../../src/TreeView/internals/hooks/useTreeViewModels.ts"],"sourcesContent":["import * as React from \"react\";\n\nimport {\n  ConvertPluginsIntoSignatures,\n  MergePluginsProperty,\n  TreeViewAnyPluginSignature,\n  TreeViewPlugin,\n} from \"../types\";\n\n/**\n * Implements the same behavior as `useControlled` but for several models.\n * The controlled models are never stored in the state and the state is only updated if the model is not controlled.\n */\nexport const useTreeViewModels = <\n  TPlugins extends readonly TreeViewPlugin<TreeViewAnyPluginSignature>[],\n>(\n  plugins: TPlugins,\n  props: MergePluginsProperty<\n    ConvertPluginsIntoSignatures<TPlugins>,\n    \"defaultizedParams\"\n  >,\n) => {\n  const modelsRef = React.useRef<{\n    [modelName: string]: {\n      controlledProp: keyof typeof props;\n      defaultProp: keyof typeof props;\n      isControlled: boolean;\n    };\n  }>({});\n\n  const [modelsState, setModelsState] = React.useState<{\n    [modelName: string]: any;\n  }>(() => {\n    const initialState: { [modelName: string]: any } = {};\n\n    plugins.forEach((plugin) => {\n      if (plugin.models) {\n        Object.entries(plugin.models).forEach(([modelName, model]) => {\n          modelsRef.current[modelName] = {\n            controlledProp: model.controlledProp as keyof typeof props,\n            defaultProp: model.defaultProp as keyof typeof props,\n            isControlled:\n              props[model.controlledProp as keyof typeof props] !== undefined,\n          };\n          initialState[modelName] =\n            props[model.defaultProp as keyof typeof props];\n        });\n      }\n    });\n\n    return initialState;\n  });\n\n  const models = Object.fromEntries(\n    Object.entries(modelsRef.current).map(([modelName, model]) => {\n      const value = model.isControlled\n        ? props[model.controlledProp]\n        : modelsState[modelName];\n\n      return [\n        modelName,\n        {\n          value,\n          setValue: (newValue: any) => {\n            if (!model.isControlled) {\n              setModelsState((prevState) => ({\n                ...prevState,\n                [modelName]: newValue,\n              }));\n            }\n          },\n        },\n      ];\n    }),\n  ) as MergePluginsProperty<ConvertPluginsIntoSignatures<TPlugins>, \"models\">;\n\n  return models;\n};\n"],"names":[],"mappings":";AAaa,MAAA,oBAAoB,CAG/B,SACA,UAIG;AACH,QAAM,YAAY,MAAM,OAMrB,EAAE;AAEL,QAAM,CAAC,aAAa,cAAc,IAAI,MAAM,SAEzC,MAAM;AACP,UAAM,eAA6C,CAAC;AAE5C,YAAA,QAAQ,CAAC,WAAW;AAC1B,UAAI,OAAO,QAAQ;AACV,eAAA,QAAQ,OAAO,MAAM,EAAE,QAAQ,CAAC,CAAC,WAAW,KAAK,MAAM;AAClD,oBAAA,QAAQ,SAAS,IAAI;AAAA,YAC7B,gBAAgB,MAAM;AAAA,YACtB,aAAa,MAAM;AAAA,YACnB,cACE,MAAM,MAAM,cAAoC,MAAM;AAAA,UAC1D;AACA,uBAAa,SAAS,IACpB,MAAM,MAAM,WAAiC;AAAA,QAAA,CAChD;AAAA,MAAA;AAAA,IACH,CACD;AAEM,WAAA;AAAA,EAAA,CACR;AAED,QAAM,SAAS,OAAO;AAAA,IACpB,OAAO,QAAQ,UAAU,OAAO,EAAE,IAAI,CAAC,CAAC,WAAW,KAAK,MAAM;AACtD,YAAA,QAAQ,MAAM,eAChB,MAAM,MAAM,cAAc,IAC1B,YAAY,SAAS;AAElB,aAAA;AAAA,QACL;AAAA,QACA;AAAA,UACE;AAAA,UACA,UAAU,CAAC,aAAkB;AACvB,gBAAA,CAAC,MAAM,cAAc;AACvB,6BAAe,CAAC,eAAe;AAAA,gBAC7B,GAAG;AAAA,gBACH,CAAC,SAAS,GAAG;AAAA,cAAA,EACb;AAAA,YAAA;AAAA,UACJ;AAAA,QACF;AAAA,MAEJ;AAAA,IACD,CAAA;AAAA,EACH;AAEO,SAAA;AACT;"}