{"version":3,"file":"useTreeView.js","sources":["../../../../../src/TreeView/internals/hooks/useTreeView.ts"],"sourcesContent":["import * as React from \"react\";\nimport { EventHandlers } from \"@mui/base/utils\";\nimport { useForkRef } from \"@mui/material/utils\";\n\nimport { TREE_VIEW_CORE_PLUGINS } from \"../corePlugins\";\nimport {\n  DEFAULT_TREE_VIEW_CONTEXT_VALUE,\n  TreeViewContextValue,\n} from \"../TreeViewProvider\";\nimport {\n  ConvertPluginsIntoSignatures,\n  MergePluginsProperty,\n  TreeViewAnyPluginSignature,\n  TreeViewInstance,\n  TreeViewPlugin,\n} from \"../types\";\nimport { useTreeViewModels } from \"./useTreeViewModels\";\n\nexport type UseTreeViewParameters<\n  TPlugins extends readonly TreeViewPlugin<TreeViewAnyPluginSignature>[],\n> = {\n  rootRef?: React.Ref<HTMLUListElement> | undefined;\n  plugins: TPlugins;\n} & MergePluginsProperty<ConvertPluginsIntoSignatures<TPlugins>, \"params\">;\n\nexport type UseTreeViewDefaultizedParameters<\n  TPlugins extends readonly TreeViewPlugin<TreeViewAnyPluginSignature>[],\n> = {\n  rootRef?: React.Ref<HTMLUListElement> | undefined;\n  plugins: TPlugins;\n} & MergePluginsProperty<\n  ConvertPluginsIntoSignatures<TPlugins>,\n  \"defaultizedParams\"\n>;\n\nexport interface UseTreeViewRootSlotProps\n  extends Pick<\n    React.HTMLAttributes<HTMLUListElement>,\n    | \"onFocus\"\n    | \"onBlur\"\n    | \"onKeyDown\"\n    | \"id\"\n    | \"aria-activedescendant\"\n    | \"aria-multiselectable\"\n    | \"role\"\n    | \"tabIndex\"\n  > {\n  ref: React.Ref<HTMLUListElement>;\n}\n\nexport interface UseTreeViewReturnValue<\n  TPlugins extends readonly TreeViewAnyPluginSignature[],\n> {\n  getRootProps: <TOther extends EventHandlers = {}>(\n    otherHandlers?: TOther,\n  ) => UseTreeViewRootSlotProps;\n  rootRef: React.RefCallback<HTMLUListElement> | null;\n  contextValue: TreeViewContextValue<TPlugins>;\n}\n\nexport const useTreeView = <\n  Plugins extends readonly TreeViewPlugin<TreeViewAnyPluginSignature>[],\n>(\n  inParams: UseTreeViewParameters<Plugins>,\n): UseTreeViewReturnValue<ConvertPluginsIntoSignatures<Plugins>> => {\n  const plugins = [...TREE_VIEW_CORE_PLUGINS, ...inParams.plugins];\n  type Signatures = ConvertPluginsIntoSignatures<typeof plugins>;\n\n  const params = plugins.reduce((acc, plugin) => {\n    if (plugin.getDefaultizedParams) {\n      return plugin.getDefaultizedParams(acc);\n    }\n\n    return acc;\n  }, inParams) as unknown as UseTreeViewDefaultizedParameters<Plugins>;\n\n  const models = useTreeViewModels(\n    plugins,\n    params as MergePluginsProperty<Signatures, \"defaultizedParams\">,\n  );\n  const instanceRef = React.useRef<TreeViewInstance<Signatures>>(\n    {} as TreeViewInstance<Signatures>,\n  );\n  const instance = instanceRef.current;\n  const innerRootRef = React.useRef(null);\n  const handleRootRef = useForkRef(innerRootRef, inParams.rootRef);\n\n  const [state, setState] = React.useState(() => {\n    const temp = {} as MergePluginsProperty<Signatures, \"state\">;\n    plugins.forEach((plugin) => {\n      if (plugin.getInitialState) {\n        Object.assign(\n          temp,\n          plugin.getInitialState(\n            params as UseTreeViewDefaultizedParameters<any>,\n          ),\n        );\n      }\n    });\n\n    return temp;\n  });\n\n  const rootPropsGetters: (<TOther extends EventHandlers = {}>(\n    otherHandlers: TOther,\n  ) => React.HTMLAttributes<HTMLUListElement>)[] = [];\n  let contextValue: TreeViewContextValue<Signatures> =\n    DEFAULT_TREE_VIEW_CONTEXT_VALUE;\n\n  const runPlugin = (plugin: TreeViewPlugin<any>) => {\n    const pluginResponse =\n      plugin({\n        instance,\n        params,\n        state,\n        setState,\n        rootRef: innerRootRef,\n        models,\n      }) || {};\n\n    if (pluginResponse.getRootProps) {\n      rootPropsGetters.push(pluginResponse.getRootProps);\n    }\n\n    if (pluginResponse.contextValue) {\n      contextValue = pluginResponse.contextValue;\n    }\n  };\n\n  plugins.forEach(runPlugin);\n\n  const getRootProps = <TOther extends EventHandlers = {}>(\n    otherHandlers: TOther = {} as TOther,\n  ) => {\n    const rootProps: UseTreeViewRootSlotProps = {\n      role: \"tree\",\n      tabIndex: 0,\n      ...otherHandlers,\n      ref: handleRootRef,\n    };\n\n    rootPropsGetters.forEach((rootPropsGetter) => {\n      Object.assign(rootProps, rootPropsGetter(otherHandlers));\n    });\n\n    return rootProps;\n  };\n\n  return { getRootProps, rootRef: handleRootRef, contextValue };\n};\n"],"names":[],"mappings":";;;;;AA4Da,MAAA,cAAc,CAGzB,aACkE;AAClE,QAAM,UAAU,CAAC,GAAG,wBAAwB,GAAG,SAAS,OAAO;AAG/D,QAAM,SAAS,QAAQ,OAAO,CAAC,KAAK,WAAW;AAC7C,QAAI,OAAO,sBAAsB;AACxB,aAAA,OAAO,qBAAqB,GAAG;AAAA,IAAA;AAGjC,WAAA;AAAA,KACN,QAAQ;AAEX,QAAM,SAAS;AAAA,IACb;AAAA,IACA;AAAA,EACF;AACA,QAAM,cAAc,MAAM;AAAA,IACxB,CAAA;AAAA,EACF;AACA,QAAM,WAAW,YAAY;AACvB,QAAA,eAAe,MAAM,OAAO,IAAI;AACtC,QAAM,gBAAgB,WAAW,cAAc,SAAS,OAAO;AAE/D,QAAM,CAAC,OAAO,QAAQ,IAAI,MAAM,SAAS,MAAM;AAC7C,UAAM,OAAO,CAAC;AACN,YAAA,QAAQ,CAAC,WAAW;AAC1B,UAAI,OAAO,iBAAiB;AACnB,eAAA;AAAA,UACL;AAAA,UACA,OAAO;AAAA,YACL;AAAA,UAAA;AAAA,QAEJ;AAAA,MAAA;AAAA,IACF,CACD;AAEM,WAAA;AAAA,EAAA,CACR;AAED,QAAM,mBAE2C,CAAC;AAClD,MAAI,eACF;AAEI,QAAA,YAAY,CAAC,WAAgC;AACjD,UAAM,iBACJ,OAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,SAAS;AAAA,MACT;AAAA,IACD,CAAA,KAAK,CAAC;AAET,QAAI,eAAe,cAAc;AACd,uBAAA,KAAK,eAAe,YAAY;AAAA,IAAA;AAGnD,QAAI,eAAe,cAAc;AAC/B,qBAAe,eAAe;AAAA,IAAA;AAAA,EAElC;AAEA,UAAQ,QAAQ,SAAS;AAEzB,QAAM,eAAe,CACnB,gBAAwB,OACrB;AACH,UAAM,YAAsC;AAAA,MAC1C,MAAM;AAAA,MACN,UAAU;AAAA,MACV,GAAG;AAAA,MACH,KAAK;AAAA,IACP;AAEiB,qBAAA,QAAQ,CAAC,oBAAoB;AAC5C,aAAO,OAAO,WAAW,gBAAgB,aAAa,CAAC;AAAA,IAAA,CACxD;AAEM,WAAA;AAAA,EACT;AAEA,SAAO,EAAE,cAAc,SAAS,eAAe,aAAa;AAC9D;"}