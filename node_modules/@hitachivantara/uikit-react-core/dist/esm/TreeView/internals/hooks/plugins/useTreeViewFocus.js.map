{"version":3,"file":"useTreeViewFocus.js","sources":["../../../../../../src/TreeView/internals/hooks/plugins/useTreeViewFocus.ts"],"sourcesContent":["import * as React from \"react\";\nimport { EventHandlers } from \"@mui/base/utils\";\nimport { ownerDocument, useEventCallback } from \"@mui/material/utils\";\n\nimport type { TreeViewPlugin, TreeViewPluginSignature } from \"../../types\";\nimport { useInstanceEventHandler } from \"../useInstanceEventHandler\";\nimport { populateInstance } from \"../utils\";\nimport type { UseTreeViewExpansionSignature } from \"./useTreeViewExpansion\";\nimport type { UseTreeViewNodesSignature } from \"./useTreeViewNodes\";\nimport type { UseTreeViewSelectionSignature } from \"./useTreeViewSelection\";\n\nexport interface UseTreeViewFocusInstance {\n  isNodeFocused: (nodeId: string) => boolean;\n  focusNode: (event: React.SyntheticEvent, nodeId: string | null) => void;\n}\n\nexport interface UseTreeViewFocusParameters {\n  /**\n   * Callback fired when tree items are focused.\n   * @param {React.SyntheticEvent} event The event source of the callback **Warning**: This is a generic event not a focus event.\n   * @param {string} nodeId The id of the node focused.\n   * @param {string} value of the focused node.\n   */\n  onNodeFocus?: (event: React.SyntheticEvent, nodeId: string) => void;\n}\n\nexport type UseTreeViewFocusDefaultizedParameters = UseTreeViewFocusParameters;\n\nexport interface UseTreeViewFocusState {\n  focusedNodeId: string | null;\n}\n\nexport type UseTreeViewFocusSignature = TreeViewPluginSignature<\n  UseTreeViewFocusParameters,\n  UseTreeViewFocusParameters,\n  UseTreeViewFocusInstance,\n  {},\n  UseTreeViewFocusState,\n  never,\n  [\n    UseTreeViewNodesSignature,\n    UseTreeViewSelectionSignature<any>,\n    UseTreeViewExpansionSignature,\n  ]\n>;\n\nexport const useTreeViewFocus: TreeViewPlugin<UseTreeViewFocusSignature> = ({\n  instance,\n  params,\n  state,\n  setState,\n  models,\n  rootRef,\n}) => {\n  const setFocusedNodeId = useEventCallback(\n    (nodeId: React.SetStateAction<string | null>) => {\n      const cleanNodeId =\n        typeof nodeId === \"function\" ? nodeId(state.focusedNodeId) : nodeId;\n      setState((prevState) => ({ ...prevState, focusedNodeId: cleanNodeId }));\n    },\n  );\n\n  const isNodeFocused = React.useCallback(\n    (nodeId: string) => state.focusedNodeId === nodeId,\n    [state.focusedNodeId],\n  );\n\n  const focusNode = useEventCallback(\n    (event: React.SyntheticEvent, nodeId: string | null) => {\n      if (nodeId) {\n        setFocusedNodeId(nodeId);\n\n        if (params.onNodeFocus) {\n          params.onNodeFocus(event, nodeId);\n        }\n      }\n    },\n  );\n\n  populateInstance<UseTreeViewFocusSignature>(instance, {\n    isNodeFocused,\n    focusNode,\n  });\n\n  useInstanceEventHandler(instance as any, \"removeNode\", ({ id }) => {\n    setFocusedNodeId((oldFocusedNodeId) => {\n      if (\n        oldFocusedNodeId === id &&\n        rootRef.current === ownerDocument(rootRef.current).activeElement\n      ) {\n        return instance.getChildrenIds(null)[0];\n      }\n      return oldFocusedNodeId;\n    });\n  });\n\n  const createHandleFocus =\n    (otherHandlers: EventHandlers) =>\n    (event: React.FocusEvent<HTMLUListElement>) => {\n      otherHandlers.onFocus?.(event);\n\n      // if the event bubbled (which is React specific) we don't want to steal focus\n      if (event.target === event.currentTarget) {\n        const isNodeVisible = (nodeId: string) => {\n          const node = instance.getNode(nodeId);\n          return (\n            node &&\n            (node.parentId == null || instance.isNodeExpanded(node.parentId))\n          );\n        };\n\n        let nodeToFocusId: string | null | undefined;\n        if (Array.isArray(models.selected.value)) {\n          nodeToFocusId = models.selected.value.find(isNodeVisible);\n        } else if (\n          models.selected.value != null &&\n          isNodeVisible(models.selected.value)\n        ) {\n          nodeToFocusId = models.selected.value;\n        }\n\n        if (nodeToFocusId == null) {\n          // eslint-disable-next-line prefer-destructuring\n          nodeToFocusId = instance.getNavigableChildrenIds(null)[0];\n        }\n\n        instance.focusNode(event, nodeToFocusId);\n      }\n    };\n\n  const createHandleBlur =\n    (otherHandlers: EventHandlers) =>\n    (event: React.FocusEvent<HTMLUListElement>) => {\n      otherHandlers.onBlur?.(event);\n      setFocusedNodeId(null);\n    };\n\n  const focusedNode = instance.getNode(state.focusedNodeId!);\n  const activeDescendant = focusedNode ? focusedNode.idAttribute : null;\n\n  return {\n    getRootProps: (otherHandlers) => ({\n      onFocus: createHandleFocus(otherHandlers),\n      onBlur: createHandleBlur(otherHandlers),\n      \"aria-activedescendant\": activeDescendant ?? undefined,\n    }),\n  };\n};\n\nuseTreeViewFocus.getInitialState = () => ({ focusedNodeId: null });\n\nuseTreeViewFocus.getDefaultizedParams = (params) => ({\n  ...params,\n  disabledItemsFocusable: params.disabledItemsFocusable ?? false,\n});\n"],"names":[],"mappings":";;;;AA8CO,MAAM,mBAA8D,CAAC;AAAA,EAC1E;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,MAAM;AACJ,QAAM,mBAAmB;AAAA,IACvB,CAAC,WAAgD;AAC/C,YAAM,cACJ,OAAO,WAAW,aAAa,OAAO,MAAM,aAAa,IAAI;AAC/D,eAAS,CAAC,eAAe,EAAE,GAAG,WAAW,eAAe,cAAc;AAAA,IAAA;AAAA,EAE1E;AAEA,QAAM,gBAAgB,MAAM;AAAA,IAC1B,CAAC,WAAmB,MAAM,kBAAkB;AAAA,IAC5C,CAAC,MAAM,aAAa;AAAA,EACtB;AAEA,QAAM,YAAY;AAAA,IAChB,CAAC,OAA6B,WAA0B;AACtD,UAAI,QAAQ;AACV,yBAAiB,MAAM;AAEvB,YAAI,OAAO,aAAa;AACf,iBAAA,YAAY,OAAO,MAAM;AAAA,QAAA;AAAA,MAClC;AAAA,IACF;AAAA,EAEJ;AAEA,mBAA4C,UAAU;AAAA,IACpD;AAAA,IACA;AAAA,EAAA,CACD;AAED,0BAAwB,UAAiB,cAAc,CAAC,EAAE,SAAS;AACjE,qBAAiB,CAAC,qBAAqB;AAEnC,UAAA,qBAAqB,MACrB,QAAQ,YAAY,cAAc,QAAQ,OAAO,EAAE,eACnD;AACA,eAAO,SAAS,eAAe,IAAI,EAAE,CAAC;AAAA,MAAA;AAEjC,aAAA;AAAA,IAAA,CACR;AAAA,EAAA,CACF;AAED,QAAM,oBACJ,CAAC,kBACD,CAAC,UAA8C;AAC7C,kBAAc,UAAU,KAAK;AAGzB,QAAA,MAAM,WAAW,MAAM,eAAe;AAClC,YAAA,gBAAgB,CAAC,WAAmB;AAClC,cAAA,OAAO,SAAS,QAAQ,MAAM;AACpC,eACE,SACC,KAAK,YAAY,QAAQ,SAAS,eAAe,KAAK,QAAQ;AAAA,MAEnE;AAEI,UAAA;AACJ,UAAI,MAAM,QAAQ,OAAO,SAAS,KAAK,GAAG;AACxC,wBAAgB,OAAO,SAAS,MAAM,KAAK,aAAa;AAAA,MAAA,WAExD,OAAO,SAAS,SAAS,QACzB,cAAc,OAAO,SAAS,KAAK,GACnC;AACA,wBAAgB,OAAO,SAAS;AAAA,MAAA;AAGlC,UAAI,iBAAiB,MAAM;AAEzB,wBAAgB,SAAS,wBAAwB,IAAI,EAAE,CAAC;AAAA,MAAA;AAGjD,eAAA,UAAU,OAAO,aAAa;AAAA,IAAA;AAAA,EAE3C;AAEF,QAAM,mBACJ,CAAC,kBACD,CAAC,UAA8C;AAC7C,kBAAc,SAAS,KAAK;AAC5B,qBAAiB,IAAI;AAAA,EACvB;AAEF,QAAM,cAAc,SAAS,QAAQ,MAAM,aAAc;AACnD,QAAA,mBAAmB,cAAc,YAAY,cAAc;AAE1D,SAAA;AAAA,IACL,cAAc,CAAC,mBAAmB;AAAA,MAChC,SAAS,kBAAkB,aAAa;AAAA,MACxC,QAAQ,iBAAiB,aAAa;AAAA,MACtC,yBAAyB,oBAAoB;AAAA,IAC/C;AAAA,EACF;AACF;AAEA,iBAAiB,kBAAkB,OAAO,EAAE,eAAe,KAAK;AAEhE,iBAAiB,uBAAuB,CAAC,YAAY;AAAA,EACnD,GAAG;AAAA,EACH,wBAAwB,OAAO,0BAA0B;AAC3D;"}