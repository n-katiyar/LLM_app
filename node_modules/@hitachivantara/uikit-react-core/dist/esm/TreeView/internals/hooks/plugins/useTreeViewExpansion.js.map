{"version":3,"file":"useTreeViewExpansion.js","sources":["../../../../../../src/TreeView/internals/hooks/plugins/useTreeViewExpansion.ts"],"sourcesContent":["import * as React from \"react\";\nimport { useEventCallback } from \"@mui/material/utils\";\n\nimport {\n  DefaultizedProps,\n  TreeViewPlugin,\n  TreeViewPluginSignature,\n} from \"../../types\";\nimport { populateInstance } from \"../utils\";\nimport type { UseTreeViewNodesSignature } from \"./useTreeViewNodes\";\n\nexport interface UseTreeViewExpansionInstance {\n  isNodeExpanded: (nodeId: string) => boolean;\n  isNodeExpandable: (nodeId: string) => boolean;\n  toggleNodeExpansion: (event: React.SyntheticEvent, value: string) => void;\n  expandAllSiblings: (\n    event: React.KeyboardEvent<HTMLUListElement>,\n    nodeId: string,\n  ) => void;\n}\n\nexport interface UseTreeViewExpansionParameters {\n  /**\n   * Expanded node ids.\n   * Used when the item's expansion is controlled.\n   */\n  expanded?: string[];\n  /**\n   * Expanded node ids.\n   * Used when the item's expansion is not controlled.\n   * @default []\n   */\n  defaultExpanded?: string[];\n  /**\n   * Callback fired when tree items are expanded/collapsed.\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {array} nodeIds The ids of the expanded nodes.\n   */\n  onNodeToggle?: (event: React.SyntheticEvent, nodeIds: string[]) => void;\n}\n\nexport type UseTreeViewExpansionDefaultizedParameters = DefaultizedProps<\n  UseTreeViewExpansionParameters,\n  \"defaultExpanded\"\n>;\n\nexport type UseTreeViewExpansionSignature = TreeViewPluginSignature<\n  UseTreeViewExpansionParameters,\n  UseTreeViewExpansionDefaultizedParameters,\n  UseTreeViewExpansionInstance,\n  {},\n  {},\n  \"expanded\",\n  [UseTreeViewNodesSignature]\n>;\n\nexport const useTreeViewExpansion: TreeViewPlugin<\n  UseTreeViewExpansionSignature\n> = ({ instance, params, models }) => {\n  const isNodeExpanded = React.useCallback(\n    (nodeId: string) => {\n      return Array.isArray(models.expanded.value)\n        ? models.expanded.value.indexOf(nodeId) !== -1\n        : false;\n    },\n    [models.expanded.value],\n  );\n\n  const isNodeExpandable = React.useCallback(\n    (nodeId: string) => !!instance.getNode(nodeId)?.expandable,\n    [instance],\n  );\n\n  const toggleNodeExpansion = useEventCallback(\n    (event: React.SyntheticEvent, nodeId: string | null) => {\n      if (nodeId == null) {\n        return;\n      }\n\n      let newExpanded: string[];\n\n      if (models.expanded.value.indexOf(nodeId!) !== -1) {\n        newExpanded = models.expanded.value.filter((id) => id !== nodeId);\n      } else {\n        newExpanded = [nodeId].concat(models.expanded.value);\n      }\n\n      if (params.onNodeToggle) {\n        params.onNodeToggle(event, newExpanded);\n      }\n\n      models.expanded.setValue(newExpanded);\n    },\n  );\n\n  const expandAllSiblings = (\n    event: React.KeyboardEvent<HTMLUListElement>,\n    nodeId: string,\n  ) => {\n    const node = instance.getNode(nodeId);\n    const siblings = instance.getChildrenIds(node.parentId);\n\n    const diff = siblings.filter(\n      (child) =>\n        instance.isNodeExpandable(child) && !instance.isNodeExpanded(child),\n    );\n\n    const newExpanded = models.expanded.value.concat(diff);\n\n    if (diff.length > 0) {\n      models.expanded.setValue(newExpanded);\n\n      if (params.onNodeToggle) {\n        params.onNodeToggle(event, newExpanded);\n      }\n    }\n  };\n\n  populateInstance<UseTreeViewExpansionSignature>(instance, {\n    isNodeExpanded,\n    isNodeExpandable,\n    toggleNodeExpansion,\n    expandAllSiblings,\n  });\n};\n\nuseTreeViewExpansion.models = {\n  expanded: {\n    controlledProp: \"expanded\",\n    defaultProp: \"defaultExpanded\",\n  },\n};\n\nconst DEFAULT_EXPANDED: string[] = [];\n\nuseTreeViewExpansion.getDefaultizedParams = (params) => ({\n  ...params,\n  defaultExpanded: params.defaultExpanded ?? DEFAULT_EXPANDED,\n});\n"],"names":[],"mappings":";;;AAwDO,MAAM,uBAET,CAAC,EAAE,UAAU,QAAQ,aAAa;AACpC,QAAM,iBAAiB,MAAM;AAAA,IAC3B,CAAC,WAAmB;AAClB,aAAO,MAAM,QAAQ,OAAO,SAAS,KAAK,IACtC,OAAO,SAAS,MAAM,QAAQ,MAAM,MAAM,KAC1C;AAAA,IACN;AAAA,IACA,CAAC,OAAO,SAAS,KAAK;AAAA,EACxB;AAEA,QAAM,mBAAmB,MAAM;AAAA,IAC7B,CAAC,WAAmB,CAAC,CAAC,SAAS,QAAQ,MAAM,GAAG;AAAA,IAChD,CAAC,QAAQ;AAAA,EACX;AAEA,QAAM,sBAAsB;AAAA,IAC1B,CAAC,OAA6B,WAA0B;AACtD,UAAI,UAAU,MAAM;AAClB;AAAA,MAAA;AAGE,UAAA;AAEJ,UAAI,OAAO,SAAS,MAAM,QAAQ,MAAO,MAAM,IAAI;AACjD,sBAAc,OAAO,SAAS,MAAM,OAAO,CAAC,OAAO,OAAO,MAAM;AAAA,MAAA,OAC3D;AACL,sBAAc,CAAC,MAAM,EAAE,OAAO,OAAO,SAAS,KAAK;AAAA,MAAA;AAGrD,UAAI,OAAO,cAAc;AAChB,eAAA,aAAa,OAAO,WAAW;AAAA,MAAA;AAGjC,aAAA,SAAS,SAAS,WAAW;AAAA,IAAA;AAAA,EAExC;AAEM,QAAA,oBAAoB,CACxB,OACA,WACG;AACG,UAAA,OAAO,SAAS,QAAQ,MAAM;AACpC,UAAM,WAAW,SAAS,eAAe,KAAK,QAAQ;AAEtD,UAAM,OAAO,SAAS;AAAA,MACpB,CAAC,UACC,SAAS,iBAAiB,KAAK,KAAK,CAAC,SAAS,eAAe,KAAK;AAAA,IACtE;AAEA,UAAM,cAAc,OAAO,SAAS,MAAM,OAAO,IAAI;AAEjD,QAAA,KAAK,SAAS,GAAG;AACZ,aAAA,SAAS,SAAS,WAAW;AAEpC,UAAI,OAAO,cAAc;AAChB,eAAA,aAAa,OAAO,WAAW;AAAA,MAAA;AAAA,IACxC;AAAA,EAEJ;AAEA,mBAAgD,UAAU;AAAA,IACxD;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EAAA,CACD;AACH;AAEA,qBAAqB,SAAS;AAAA,EAC5B,UAAU;AAAA,IACR,gBAAgB;AAAA,IAChB,aAAa;AAAA,EAAA;AAEjB;AAEA,MAAM,mBAA6B,CAAC;AAEpC,qBAAqB,uBAAuB,CAAC,YAAY;AAAA,EACvD,GAAG;AAAA,EACH,iBAAiB,OAAO,mBAAmB;AAC7C;"}