{"version":3,"file":"useTreeViewSelection.js","sources":["../../../../../../src/TreeView/internals/hooks/plugins/useTreeViewSelection.ts"],"sourcesContent":["import * as React from \"react\";\n\nimport type {\n  DefaultizedProps,\n  TreeViewInstance,\n  TreeViewItemRange,\n  TreeViewPlugin,\n  TreeViewPluginSignature,\n} from \"../../types\";\nimport {\n  getFirstNode,\n  getLastNode,\n  getNextNode,\n  populateInstance,\n} from \"../utils\";\nimport type { UseTreeViewExpansionSignature } from \"./useTreeViewExpansion\";\nimport type { UseTreeViewNodesSignature } from \"./useTreeViewNodes\";\n\n/**\n * This is used to determine the start and end of a selection range so\n * we can get the nodes between the two border nodes.\n *\n * It finds the nodes' common ancestor using\n * a naive implementation of a lowest common ancestor algorithm\n * (https://en.wikipedia.org/wiki/Lowest_common_ancestor).\n * Then compares the ancestor's 2 children that are ancestors of nodeA and NodeB\n * so we can compare their indexes to work out which node comes first in a depth first search.\n * (https://en.wikipedia.org/wiki/Depth-first_search)\n *\n * Another way to put it is which node is shallower in a tr√©maux tree\n * https://en.wikipedia.org/wiki/Tr%C3%A9maux_tree\n */\nexport const findOrderInTremauxTree = (\n  instance: TreeViewInstance<[UseTreeViewNodesSignature]>,\n  nodeAId: string,\n  nodeBId: string,\n) => {\n  if (nodeAId === nodeBId) {\n    return [nodeAId, nodeBId];\n  }\n\n  const nodeA = instance.getNode(nodeAId);\n  const nodeB = instance.getNode(nodeBId);\n\n  if (nodeA.parentId === nodeB.id || nodeB.parentId === nodeA.id) {\n    return nodeB.parentId === nodeA.id\n      ? [nodeA.id, nodeB.id]\n      : [nodeB.id, nodeA.id];\n  }\n\n  const aFamily: (string | null)[] = [nodeA.id];\n  const bFamily: (string | null)[] = [nodeB.id];\n\n  let aAncestor = nodeA.parentId;\n  let bAncestor = nodeB.parentId;\n\n  let aAncestorIsCommon = bFamily.indexOf(aAncestor) !== -1;\n  let bAncestorIsCommon = aFamily.indexOf(bAncestor) !== -1;\n\n  let continueA = true;\n  let continueB = true;\n\n  while (!bAncestorIsCommon && !aAncestorIsCommon) {\n    if (continueA) {\n      aFamily.push(aAncestor);\n      aAncestorIsCommon = bFamily.indexOf(aAncestor) !== -1;\n      continueA = aAncestor !== null;\n      if (!aAncestorIsCommon && continueA) {\n        aAncestor = instance.getNode(aAncestor!).parentId;\n      }\n    }\n\n    if (continueB && !aAncestorIsCommon) {\n      bFamily.push(bAncestor);\n      bAncestorIsCommon = aFamily.indexOf(bAncestor) !== -1;\n      continueB = bAncestor !== null;\n      if (!bAncestorIsCommon && continueB) {\n        bAncestor = instance.getNode(bAncestor!).parentId;\n      }\n    }\n  }\n\n  const commonAncestor = aAncestorIsCommon ? aAncestor : bAncestor;\n  const ancestorFamily = instance.getChildrenIds(commonAncestor);\n\n  const aSide = aFamily[aFamily.indexOf(commonAncestor) - 1];\n  const bSide = bFamily[bFamily.indexOf(commonAncestor) - 1];\n\n  return ancestorFamily.indexOf(aSide!) < ancestorFamily.indexOf(bSide!)\n    ? [nodeAId, nodeBId]\n    : [nodeBId, nodeAId];\n};\n\nexport interface UseTreeViewSelectionInstance {\n  isNodeSelected: (nodeId: string) => boolean;\n  selectNode: (\n    event: React.SyntheticEvent,\n    nodeId: string,\n    multiple?: boolean,\n  ) => void;\n  selectRange: (\n    event: React.SyntheticEvent,\n    nodes: TreeViewItemRange,\n    stacked?: boolean,\n  ) => void;\n  rangeSelectToFirst: (\n    event: React.KeyboardEvent<HTMLUListElement>,\n    nodeId: string,\n  ) => void;\n  rangeSelectToLast: (\n    event: React.KeyboardEvent<HTMLUListElement>,\n    nodeId: string,\n  ) => void;\n}\n\ntype TreeViewSelectionValue<Multiple extends boolean | undefined> =\n  Multiple extends true ? string[] : string | null;\n\nexport interface UseTreeViewSelectionParameters<\n  Multiple extends boolean | undefined,\n> {\n  /**\n   * If `true` selection is disabled.\n   * @default false\n   */\n  disableSelection?: boolean;\n  /**\n   * Selected node ids. (Uncontrolled)\n   * When `multiSelect` is true this takes an array of strings; when false (default) a string.\n   * @default []\n   */\n  defaultSelected?: TreeViewSelectionValue<Multiple>;\n  /**\n   * Selected node ids. (Controlled)\n   * When `multiSelect` is true this takes an array of strings; when false (default) a string.\n   */\n  selected?: TreeViewSelectionValue<Multiple>;\n  /**\n   * If true `ctrl` and `shift` will trigger multiselect.\n   * @default false\n   */\n  multiSelect?: Multiple;\n  /**\n   * Callback fired when tree items are selected/unselected.\n   * @param {React.SyntheticEvent} event The event source of the callback\n   * @param {string[] | string} nodeIds Ids of the selected nodes. When `multiSelect` is true\n   * this is an array of strings; when false (default) a string.\n   */\n  onNodeSelect?: (\n    event: React.SyntheticEvent,\n    nodeIds: Exclude<TreeViewSelectionValue<Multiple>, null>,\n  ) => void;\n}\n\nexport type UseTreeViewSelectionDefaultizedParameters<\n  Multiple extends boolean,\n> = DefaultizedProps<\n  UseTreeViewSelectionParameters<Multiple>,\n  \"disableSelection\" | \"defaultSelected\" | \"multiSelect\"\n>;\n\nexport type UseTreeViewSelectionSignature<\n  Multiple extends boolean | undefined,\n> = TreeViewPluginSignature<\n  UseTreeViewSelectionParameters<Multiple>,\n  UseTreeViewSelectionDefaultizedParameters<\n    Multiple extends undefined ? false : Multiple\n  >,\n  UseTreeViewSelectionInstance,\n  {},\n  {},\n  \"selected\",\n  [\n    UseTreeViewNodesSignature,\n    UseTreeViewExpansionSignature,\n    UseTreeViewNodesSignature,\n  ]\n>;\n\nexport const useTreeViewSelection: TreeViewPlugin<\n  UseTreeViewSelectionSignature<any>\n> = ({ instance, params, models }) => {\n  const lastSelectedNode = React.useRef<string | null>(null);\n  const lastSelectionWasRange = React.useRef(false);\n  const currentRangeSelection = React.useRef<string[]>([]);\n\n  const isNodeSelected = (nodeId: string) =>\n    Array.isArray(models.selected.value)\n      ? models.selected.value.indexOf(nodeId) !== -1\n      : models.selected.value === nodeId;\n\n  const selectNode = (\n    event: React.SyntheticEvent,\n    nodeId: string,\n    multiple = false,\n  ) => {\n    if (params.disableSelection) {\n      return;\n    }\n\n    if (multiple) {\n      if (Array.isArray(models.selected.value)) {\n        let newSelected: string[];\n        if (models.selected.value.indexOf(nodeId) !== -1) {\n          newSelected = models.selected.value.filter((id) => id !== nodeId);\n        } else {\n          newSelected = [nodeId].concat(models.selected.value);\n        }\n\n        if (params.onNodeSelect) {\n          (params.onNodeSelect as UseTreeViewSelectionDefaultizedParameters<true>[\"onNodeSelect\"])!(\n            event,\n            newSelected,\n          );\n        }\n\n        models.selected.setValue(newSelected);\n      }\n    } else {\n      const newSelected = params.multiSelect ? [nodeId] : nodeId;\n\n      if (params.onNodeSelect) {\n        params.onNodeSelect(event, newSelected as string & string[]);\n      }\n\n      models.selected.setValue(newSelected);\n    }\n    lastSelectedNode.current = nodeId;\n    lastSelectionWasRange.current = false;\n    currentRangeSelection.current = [];\n  };\n\n  const getNodesInRange = (nodeAId: string, nodeBId: string) => {\n    const [first, last] = findOrderInTremauxTree(instance, nodeAId, nodeBId);\n    const nodes = [first];\n\n    let current = first;\n\n    while (current !== last) {\n      current = getNextNode(instance, current)!;\n      nodes.push(current);\n    }\n\n    return nodes;\n  };\n\n  const handleRangeArrowSelect = (\n    event: React.SyntheticEvent,\n    nodes: TreeViewItemRange,\n  ) => {\n    let base = (models.selected.value as string[]).slice();\n    const { start, next, current } = nodes;\n\n    if (!next || !current) {\n      return;\n    }\n\n    if (currentRangeSelection.current.indexOf(current) === -1) {\n      currentRangeSelection.current = [];\n    }\n\n    if (lastSelectionWasRange.current) {\n      if (currentRangeSelection.current.indexOf(next) !== -1) {\n        base = base.filter((id) => id === start || id !== current);\n        currentRangeSelection.current = currentRangeSelection.current.filter(\n          (id) => id === start || id !== current,\n        );\n      } else {\n        base.push(next);\n        currentRangeSelection.current.push(next);\n      }\n    } else {\n      base.push(next);\n      currentRangeSelection.current.push(current, next);\n    }\n\n    if (params.onNodeSelect) {\n      (params.onNodeSelect as UseTreeViewSelectionDefaultizedParameters<true>[\"onNodeSelect\"])!(\n        event,\n        base,\n      );\n    }\n\n    models.selected.setValue(base);\n  };\n\n  const handleRangeSelect = (\n    event: React.SyntheticEvent,\n    nodes: { start: string; end: string },\n  ) => {\n    let base = (models.selected.value as string[]).slice();\n    const { start, end } = nodes;\n    // If last selection was a range selection ignore nodes that were selected.\n    if (lastSelectionWasRange.current) {\n      base = base.filter(\n        (id) => currentRangeSelection.current.indexOf(id) === -1,\n      );\n    }\n\n    let range = getNodesInRange(start, end);\n    range = range.filter((node) => !instance.isNodeDisabled(node));\n    currentRangeSelection.current = range;\n    let newSelected = base.concat(range);\n    newSelected = newSelected.filter((id, i) => newSelected.indexOf(id) === i);\n\n    if (params.onNodeSelect) {\n      (params.onNodeSelect as UseTreeViewSelectionDefaultizedParameters<true>[\"onNodeSelect\"])!(\n        event,\n        newSelected,\n      );\n    }\n\n    models.selected.setValue(newSelected);\n  };\n\n  const selectRange = (\n    event: React.SyntheticEvent,\n    nodes: TreeViewItemRange,\n    stacked = false,\n  ) => {\n    if (params.disableSelection) {\n      return;\n    }\n\n    const { start = lastSelectedNode.current, end, current } = nodes;\n    if (stacked) {\n      handleRangeArrowSelect(event, { start, next: end, current });\n    } else if (start != null && end != null) {\n      handleRangeSelect(event, { start, end });\n    }\n    lastSelectionWasRange.current = true;\n  };\n\n  const rangeSelectToFirst = (\n    event: React.KeyboardEvent<HTMLUListElement>,\n    nodeId: string,\n  ) => {\n    if (!lastSelectedNode.current) {\n      lastSelectedNode.current = nodeId;\n    }\n\n    const start = lastSelectionWasRange.current\n      ? lastSelectedNode.current\n      : nodeId;\n\n    instance.selectRange(event, {\n      start,\n      end: getFirstNode(instance),\n    });\n  };\n\n  const rangeSelectToLast = (\n    event: React.KeyboardEvent<HTMLUListElement>,\n    nodeId: string,\n  ) => {\n    if (!lastSelectedNode.current) {\n      lastSelectedNode.current = nodeId;\n    }\n\n    const start = lastSelectionWasRange.current\n      ? lastSelectedNode.current\n      : nodeId;\n\n    instance.selectRange(event, {\n      start,\n      end: getLastNode(instance),\n    });\n  };\n\n  populateInstance<UseTreeViewSelectionSignature<any>>(instance, {\n    isNodeSelected,\n    selectNode,\n    selectRange,\n    rangeSelectToLast,\n    rangeSelectToFirst,\n  });\n\n  return {\n    getRootProps: () => ({\n      \"aria-multiselectable\": params.multiSelect,\n    }),\n  };\n};\n\nuseTreeViewSelection.models = {\n  selected: { controlledProp: \"selected\", defaultProp: \"defaultSelected\" },\n};\n\nconst DEFAULT_SELECTED: string[] = [];\n\nuseTreeViewSelection.getDefaultizedParams = (params) => ({\n  ...params,\n  disableSelection: params.disableSelection ?? false,\n  multiSelect: params.multiSelect ?? false,\n  defaultSelected:\n    params.defaultSelected ?? (params.multiSelect ? DEFAULT_SELECTED : null),\n});\n"],"names":[],"mappings":"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"}