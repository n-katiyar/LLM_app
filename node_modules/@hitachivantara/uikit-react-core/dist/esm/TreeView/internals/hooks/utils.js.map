{"version":3,"file":"utils.js","sources":["../../../../../src/TreeView/internals/hooks/utils.ts"],"sourcesContent":["import {\n  TreeViewAnyPluginSignature,\n  TreeViewInstance,\n  TreeViewUsedInstance,\n} from \"../types\";\nimport type { UseTreeViewExpansionSignature } from \"./plugins/useTreeViewExpansion\";\nimport type { UseTreeViewNodesSignature } from \"./plugins/useTreeViewNodes\";\n\nexport const getPreviousNode = (\n  instance: TreeViewInstance<\n    [UseTreeViewNodesSignature, UseTreeViewExpansionSignature]\n  >,\n  nodeId: string,\n) => {\n  const node = instance.getNode(nodeId);\n  const siblings = instance.getNavigableChildrenIds(node.parentId);\n  const nodeIndex = siblings.indexOf(nodeId);\n\n  if (nodeIndex === 0) {\n    return node.parentId;\n  }\n\n  let currentNode: string = siblings[nodeIndex - 1];\n  while (\n    instance.isNodeExpanded(currentNode) &&\n    instance.getNavigableChildrenIds(currentNode).length > 0\n  ) {\n    currentNode = instance.getNavigableChildrenIds(currentNode).pop()!;\n  }\n\n  return currentNode;\n};\n\nexport const getNextNode = (\n  instance: TreeViewInstance<\n    [UseTreeViewExpansionSignature, UseTreeViewNodesSignature]\n  >,\n  nodeId: string,\n) => {\n  // If expanded get first child\n  if (\n    instance.isNodeExpanded(nodeId) &&\n    instance.getNavigableChildrenIds(nodeId).length > 0\n  ) {\n    return instance.getNavigableChildrenIds(nodeId)[0];\n  }\n\n  let node = instance.getNode(nodeId);\n  while (node != null) {\n    // Try to get next sibling\n    const siblings = instance.getNavigableChildrenIds(node.parentId);\n    const nextSibling = siblings[siblings.indexOf(node.id) + 1];\n\n    if (nextSibling) {\n      return nextSibling;\n    }\n\n    // If the sibling does not exist, go up a level to the parent and try again.\n    node = instance.getNode(node.parentId!);\n  }\n\n  return null;\n};\n\nexport const getLastNode = (\n  instance: TreeViewInstance<\n    [UseTreeViewExpansionSignature, UseTreeViewNodesSignature]\n  >,\n) => {\n  let lastNode = instance.getNavigableChildrenIds(null).pop()!;\n\n  while (instance.isNodeExpanded(lastNode)) {\n    lastNode = instance.getNavigableChildrenIds(lastNode).pop()!;\n  }\n  return lastNode;\n};\n\nexport const getFirstNode = (\n  instance: TreeViewInstance<[UseTreeViewNodesSignature]>,\n) => instance.getNavigableChildrenIds(null)[0];\n\nexport const populateInstance = <T extends TreeViewAnyPluginSignature>(\n  instance: TreeViewUsedInstance<T>,\n  methods: T[\"instance\"],\n) => {\n  Object.assign(instance, methods);\n};\n"],"names":[],"mappings":"AAQa,MAAA,kBAAkB,CAC7B,UAGA,WACG;AACG,QAAA,OAAO,SAAS,QAAQ,MAAM;AACpC,QAAM,WAAW,SAAS,wBAAwB,KAAK,QAAQ;AACzD,QAAA,YAAY,SAAS,QAAQ,MAAM;AAEzC,MAAI,cAAc,GAAG;AACnB,WAAO,KAAK;AAAA,EAAA;AAGV,MAAA,cAAsB,SAAS,YAAY,CAAC;AAE9C,SAAA,SAAS,eAAe,WAAW,KACnC,SAAS,wBAAwB,WAAW,EAAE,SAAS,GACvD;AACA,kBAAc,SAAS,wBAAwB,WAAW,EAAE,IAAI;AAAA,EAAA;AAG3D,SAAA;AACT;AAEa,MAAA,cAAc,CACzB,UAGA,WACG;AAGD,MAAA,SAAS,eAAe,MAAM,KAC9B,SAAS,wBAAwB,MAAM,EAAE,SAAS,GAClD;AACA,WAAO,SAAS,wBAAwB,MAAM,EAAE,CAAC;AAAA,EAAA;AAG/C,MAAA,OAAO,SAAS,QAAQ,MAAM;AAClC,SAAO,QAAQ,MAAM;AAEnB,UAAM,WAAW,SAAS,wBAAwB,KAAK,QAAQ;AAC/D,UAAM,cAAc,SAAS,SAAS,QAAQ,KAAK,EAAE,IAAI,CAAC;AAE1D,QAAI,aAAa;AACR,aAAA;AAAA,IAAA;AAIF,WAAA,SAAS,QAAQ,KAAK,QAAS;AAAA,EAAA;AAGjC,SAAA;AACT;AAEa,MAAA,cAAc,CACzB,aAGG;AACH,MAAI,WAAW,SAAS,wBAAwB,IAAI,EAAE,IAAI;AAEnD,SAAA,SAAS,eAAe,QAAQ,GAAG;AACxC,eAAW,SAAS,wBAAwB,QAAQ,EAAE,IAAI;AAAA,EAAA;AAErD,SAAA;AACT;AAEO,MAAM,eAAe,CAC1B,aACG,SAAS,wBAAwB,IAAI,EAAE,CAAC;AAEhC,MAAA,mBAAmB,CAC9B,UACA,YACG;AACI,SAAA,OAAO,UAAU,OAAO;AACjC;"}