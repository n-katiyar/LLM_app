{"version":3,"file":"useTreeViewNodes.js","sources":["../../../../../../src/TreeView/internals/hooks/plugins/useTreeViewNodes.ts"],"sourcesContent":["import * as React from \"react\";\nimport { useEventCallback } from \"@mui/material/utils\";\n\nimport {\n  DefaultizedProps,\n  TreeViewNode,\n  TreeViewPlugin,\n  TreeViewPluginSignature,\n} from \"../../types\";\nimport { publishTreeViewEvent } from \"../../utils/publishTreeViewEvent\";\nimport { populateInstance } from \"../utils\";\n\nexport interface UseTreeViewNodesInstance {\n  getNode: (nodeId: string) => TreeViewNode;\n  updateNode: (node: TreeViewNode) => void;\n  removeNode: (nodeId: string) => void;\n  getChildrenIds: (nodeId: string | null) => string[];\n  getNavigableChildrenIds: (nodeId: string | null) => string[];\n  isNodeDisabled: (nodeId: string | null) => nodeId is string;\n}\n\nexport interface UseTreeViewNodesParameters {\n  /**\n   * If `true`, will allow focus on disabled items.\n   * @default false\n   */\n  disabledItemsFocusable?: boolean;\n}\n\nexport type UseTreeViewNodesDefaultizedParameters = DefaultizedProps<\n  UseTreeViewNodesParameters,\n  \"disabledItemsFocusable\"\n>;\n\ninterface UseTreeViewNodesEventLookup {\n  removeNode: {\n    params: { id: string };\n  };\n}\n\nexport type UseTreeViewNodesSignature = TreeViewPluginSignature<\n  UseTreeViewNodesParameters,\n  UseTreeViewNodesDefaultizedParameters,\n  UseTreeViewNodesInstance,\n  UseTreeViewNodesEventLookup,\n  {},\n  never,\n  []\n>;\n\nexport const useTreeViewNodes: TreeViewPlugin<UseTreeViewNodesSignature> = ({\n  instance,\n  params,\n}) => {\n  const nodeMap = React.useRef<{ [nodeId: string]: TreeViewNode }>({});\n\n  const getNode = React.useCallback(\n    (nodeId: string) => nodeMap.current[nodeId],\n    [],\n  );\n\n  const insertNode = React.useCallback((node: TreeViewNode) => {\n    nodeMap.current[node.id] = node;\n  }, []);\n\n  const removeNode = React.useCallback(\n    (nodeId: string) => {\n      const newMap = { ...nodeMap.current };\n      delete newMap[nodeId];\n      nodeMap.current = newMap;\n      publishTreeViewEvent(instance as any, \"removeNode\", { id: nodeId });\n    },\n    [instance],\n  );\n\n  const isNodeDisabled = React.useCallback(\n    (nodeId: string | null): nodeId is string => {\n      if (nodeId == null) {\n        return false;\n      }\n\n      let node = instance.getNode(nodeId);\n\n      // This can be called before the node has been added to the node map.\n      if (!node) {\n        return false;\n      }\n\n      if (node.disabled) {\n        return true;\n      }\n\n      while (node.parentId != null) {\n        node = instance.getNode(node.parentId);\n        if (node.disabled) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n    [instance],\n  );\n\n  const getChildrenIds = useEventCallback((nodeId: string | null) =>\n    Object.values(nodeMap.current)\n      .filter((node) => node.parentId === nodeId)\n      .sort((a, b) => a.index - b.index)\n      .map((child) => child.id),\n  );\n\n  const getNavigableChildrenIds = (nodeId: string | null) => {\n    let childrenIds = instance.getChildrenIds(nodeId);\n\n    if (!params.disabledItemsFocusable) {\n      childrenIds = childrenIds.filter(\n        (node) => !instance.isNodeDisabled(node),\n      );\n    }\n    return childrenIds;\n  };\n\n  populateInstance<UseTreeViewNodesSignature>(instance, {\n    getNode,\n    updateNode: insertNode,\n    removeNode,\n    getChildrenIds,\n    getNavigableChildrenIds,\n    isNodeDisabled,\n  });\n};\n"],"names":[],"mappings":";;;;AAkDO,MAAM,mBAA8D,CAAC;AAAA,EAC1E;AAAA,EACA;AACF,MAAM;AACJ,QAAM,UAAU,MAAM,OAA2C,EAAE;AAEnE,QAAM,UAAU,MAAM;AAAA,IACpB,CAAC,WAAmB,QAAQ,QAAQ,MAAM;AAAA,IAC1C,CAAA;AAAA,EACF;AAEA,QAAM,aAAa,MAAM,YAAY,CAAC,SAAuB;AACnD,YAAA,QAAQ,KAAK,EAAE,IAAI;AAAA,EAC7B,GAAG,EAAE;AAEL,QAAM,aAAa,MAAM;AAAA,IACvB,CAAC,WAAmB;AAClB,YAAM,SAAS,EAAE,GAAG,QAAQ,QAAQ;AACpC,aAAO,OAAO,MAAM;AACpB,cAAQ,UAAU;AAClB,2BAAqB,UAAiB,cAAc,EAAE,IAAI,QAAQ;AAAA,IACpE;AAAA,IACA,CAAC,QAAQ;AAAA,EACX;AAEA,QAAM,iBAAiB,MAAM;AAAA,IAC3B,CAAC,WAA4C;AAC3C,UAAI,UAAU,MAAM;AACX,eAAA;AAAA,MAAA;AAGL,UAAA,OAAO,SAAS,QAAQ,MAAM;AAGlC,UAAI,CAAC,MAAM;AACF,eAAA;AAAA,MAAA;AAGT,UAAI,KAAK,UAAU;AACV,eAAA;AAAA,MAAA;AAGF,aAAA,KAAK,YAAY,MAAM;AACrB,eAAA,SAAS,QAAQ,KAAK,QAAQ;AACrC,YAAI,KAAK,UAAU;AACV,iBAAA;AAAA,QAAA;AAAA,MACT;AAGK,aAAA;AAAA,IACT;AAAA,IACA,CAAC,QAAQ;AAAA,EACX;AAEA,QAAM,iBAAiB;AAAA,IAAiB,CAAC,WACvC,OAAO,OAAO,QAAQ,OAAO,EAC1B,OAAO,CAAC,SAAS,KAAK,aAAa,MAAM,EACzC,KAAK,CAAC,GAAG,MAAM,EAAE,QAAQ,EAAE,KAAK,EAChC,IAAI,CAAC,UAAU,MAAM,EAAE;AAAA,EAC5B;AAEM,QAAA,0BAA0B,CAAC,WAA0B;AACrD,QAAA,cAAc,SAAS,eAAe,MAAM;AAE5C,QAAA,CAAC,OAAO,wBAAwB;AAClC,oBAAc,YAAY;AAAA,QACxB,CAAC,SAAS,CAAC,SAAS,eAAe,IAAI;AAAA,MACzC;AAAA,IAAA;AAEK,WAAA;AAAA,EACT;AAEA,mBAA4C,UAAU;AAAA,IACpD;AAAA,IACA,YAAY;AAAA,IACZ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EAAA,CACD;AACH;"}