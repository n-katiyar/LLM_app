{"version":3,"file":"useTreeViewKeyboardNavigation.js","sources":["../../../../../../src/TreeView/internals/hooks/plugins/useTreeViewKeyboardNavigation.ts"],"sourcesContent":["import * as React from \"react\";\nimport { EventHandlers } from \"@mui/base/utils\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { useEventCallback } from \"@mui/material/utils\";\n\nimport { TreeViewPlugin, TreeViewPluginSignature } from \"../../types\";\nimport {\n  getFirstNode,\n  getLastNode,\n  getNextNode,\n  getPreviousNode,\n  populateInstance,\n} from \"../utils\";\nimport type { UseTreeViewExpansionSignature } from \"./useTreeViewExpansion\";\nimport type { UseTreeViewFocusSignature } from \"./useTreeViewFocus\";\nimport type { UseTreeViewNodesSignature } from \"./useTreeViewNodes\";\nimport type { UseTreeViewSelectionSignature } from \"./useTreeViewSelection\";\n\nfunction isPrintableCharacter(string: string) {\n  return string && string.length === 1 && string.match(/\\S/);\n}\n\nfunction findNextFirstChar(\n  firstChars: string[],\n  startIndex: number,\n  char: string,\n) {\n  for (let i = startIndex; i < firstChars.length; i += 1) {\n    if (char === firstChars[i]) {\n      return i;\n    }\n  }\n  return -1;\n}\n\nexport interface UseTreeViewKeyboardNavigationInstance {\n  mapFirstChar: (nodeId: string, firstChar: string) => () => void;\n}\n\nexport type UseTreeViewKeyboardNavigationSignature = TreeViewPluginSignature<\n  {},\n  {},\n  UseTreeViewKeyboardNavigationInstance,\n  {},\n  {},\n  never,\n  [\n    UseTreeViewNodesSignature,\n    UseTreeViewSelectionSignature<any>,\n    UseTreeViewFocusSignature,\n    UseTreeViewExpansionSignature,\n  ]\n>;\n\nexport const useTreeViewKeyboardNavigation: TreeViewPlugin<\n  UseTreeViewKeyboardNavigationSignature\n> = ({ instance, params, state }) => {\n  const theme = useTheme();\n  const isRtl = theme.direction === \"rtl\";\n  const firstCharMap = React.useRef<{ [nodeId: string]: string }>({});\n\n  const mapFirstChar = useEventCallback((nodeId: string, firstChar: string) => {\n    firstCharMap.current[nodeId] = firstChar;\n\n    return () => {\n      const newMap = { ...firstCharMap.current };\n      delete newMap[nodeId];\n      firstCharMap.current = newMap;\n    };\n  });\n\n  populateInstance<UseTreeViewKeyboardNavigationSignature>(instance, {\n    mapFirstChar,\n  });\n\n  const handleNextArrow = (event: React.KeyboardEvent<HTMLUListElement>) => {\n    if (\n      state.focusedNodeId != null &&\n      instance.isNodeExpandable(state.focusedNodeId)\n    ) {\n      if (instance.isNodeExpanded(state.focusedNodeId)) {\n        instance.focusNode(event, getNextNode(instance, state.focusedNodeId));\n      } else if (!instance.isNodeDisabled(state.focusedNodeId)) {\n        instance.toggleNodeExpansion(event, state.focusedNodeId);\n      }\n    }\n    return true;\n  };\n\n  const handlePreviousArrow = (\n    event: React.KeyboardEvent<HTMLUListElement>,\n  ) => {\n    if (state.focusedNodeId == null) {\n      return false;\n    }\n\n    if (\n      instance.isNodeExpanded(state.focusedNodeId) &&\n      !instance.isNodeDisabled(state.focusedNodeId)\n    ) {\n      instance.toggleNodeExpansion(event, state.focusedNodeId!);\n      return true;\n    }\n\n    const parent = instance.getNode(state.focusedNodeId).parentId;\n    if (parent) {\n      instance.focusNode(event, parent);\n      return true;\n    }\n    return false;\n  };\n\n  const focusByFirstCharacter = (\n    event: React.KeyboardEvent<HTMLUListElement>,\n    nodeId: string,\n    firstChar: string,\n  ) => {\n    let start: number;\n    let index: number;\n    const lowercaseChar = firstChar.toLowerCase();\n\n    const firstCharIds: string[] = [];\n    const firstChars: string[] = [];\n    // This really only works since the ids are strings\n    Object.keys(firstCharMap.current).forEach((mapNodeId) => {\n      const map = instance.getNode(mapNodeId);\n      const visible = map.parentId\n        ? instance.isNodeExpanded(map.parentId)\n        : true;\n      const shouldBeSkipped = params.disabledItemsFocusable\n        ? false\n        : instance.isNodeDisabled(mapNodeId);\n\n      if (visible && !shouldBeSkipped) {\n        firstCharIds.push(mapNodeId);\n        firstChars.push(firstCharMap.current[mapNodeId]);\n      }\n    });\n\n    // Get start index for search based on position of currentItem\n    start = firstCharIds.indexOf(nodeId) + 1;\n    if (start >= firstCharIds.length) {\n      start = 0;\n    }\n\n    // Check remaining slots in the menu\n    index = findNextFirstChar(firstChars, start, lowercaseChar);\n\n    // If not found in remaining slots, check from beginning\n    if (index === -1) {\n      index = findNextFirstChar(firstChars, 0, lowercaseChar);\n    }\n\n    // If match was found...\n    if (index > -1) {\n      instance.focusNode(event, firstCharIds[index]);\n    }\n  };\n\n  const selectNextNode = (\n    event: React.KeyboardEvent<HTMLUListElement>,\n    id: string,\n  ) => {\n    if (!instance.isNodeDisabled(getNextNode(instance, id))) {\n      instance.selectRange(\n        event,\n        {\n          end: getNextNode(instance, id),\n          current: id,\n        },\n        true,\n      );\n    }\n  };\n\n  const selectPreviousNode = (\n    event: React.KeyboardEvent<HTMLUListElement>,\n    nodeId: string,\n  ) => {\n    if (!instance.isNodeDisabled(getPreviousNode(instance, nodeId))) {\n      instance.selectRange(\n        event,\n        {\n          end: getPreviousNode(instance, nodeId)!,\n          current: nodeId,\n        },\n        true,\n      );\n    }\n  };\n\n  const createHandleKeyDown =\n    (otherHandlers: EventHandlers) =>\n    (event: React.KeyboardEvent<HTMLUListElement>) => {\n      otherHandlers.onKeyDown?.(event);\n\n      let flag = false;\n      const { key } = event;\n\n      // If the tree is empty there will be no focused node\n      if (\n        event.altKey ||\n        event.currentTarget !== event.target ||\n        state.focusedNodeId == null\n      ) {\n        return;\n      }\n\n      const ctrlPressed = event.ctrlKey || event.metaKey;\n      switch (key) {\n        case \" \":\n          if (\n            !params.disableSelection &&\n            !instance.isNodeDisabled(state.focusedNodeId)\n          ) {\n            flag = true;\n            if (params.multiSelect && event.shiftKey) {\n              instance.selectRange(event, { end: state.focusedNodeId });\n            } else if (params.multiSelect) {\n              instance.selectNode(event, state.focusedNodeId, true);\n            } else {\n              instance.selectNode(event, state.focusedNodeId);\n            }\n          }\n          event.stopPropagation();\n          break;\n        case \"Enter\":\n          if (!instance.isNodeDisabled(state.focusedNodeId)) {\n            if (instance.isNodeExpandable(state.focusedNodeId)) {\n              instance.toggleNodeExpansion(event, state.focusedNodeId);\n              flag = true;\n            } else if (!params.disableSelection) {\n              flag = true;\n              if (params.multiSelect) {\n                instance.selectNode(event, state.focusedNodeId, true);\n              } else {\n                instance.selectNode(event, state.focusedNodeId);\n              }\n            }\n          }\n          event.stopPropagation();\n          break;\n        case \"ArrowDown\":\n          if (\n            params.multiSelect &&\n            event.shiftKey &&\n            !params.disableSelection\n          ) {\n            selectNextNode(event, state.focusedNodeId);\n          }\n          instance.focusNode(event, getNextNode(instance, state.focusedNodeId));\n          flag = true;\n          break;\n        case \"ArrowUp\":\n          if (\n            params.multiSelect &&\n            event.shiftKey &&\n            !params.disableSelection\n          ) {\n            selectPreviousNode(event, state.focusedNodeId);\n          }\n          instance.focusNode(\n            event,\n            getPreviousNode(instance, state.focusedNodeId),\n          );\n          flag = true;\n          break;\n        case \"ArrowRight\":\n          if (isRtl) {\n            flag = handlePreviousArrow(event);\n          } else {\n            flag = handleNextArrow(event);\n          }\n          break;\n        case \"ArrowLeft\":\n          if (isRtl) {\n            flag = handleNextArrow(event);\n          } else {\n            flag = handlePreviousArrow(event);\n          }\n          break;\n        case \"Home\":\n          if (\n            params.multiSelect &&\n            ctrlPressed &&\n            event.shiftKey &&\n            !params.disableSelection &&\n            !instance.isNodeDisabled(state.focusedNodeId)\n          ) {\n            instance.rangeSelectToFirst(event, state.focusedNodeId);\n          }\n          instance.focusNode(event, getFirstNode(instance));\n          flag = true;\n          break;\n        case \"End\":\n          if (\n            params.multiSelect &&\n            ctrlPressed &&\n            event.shiftKey &&\n            !params.disableSelection &&\n            !instance.isNodeDisabled(state.focusedNodeId)\n          ) {\n            instance.rangeSelectToLast(event, state.focusedNodeId);\n          }\n          instance.focusNode(event, getLastNode(instance));\n          flag = true;\n          break;\n        default:\n          if (key === \"*\") {\n            instance.expandAllSiblings(event, state.focusedNodeId);\n            flag = true;\n          } else if (\n            params.multiSelect &&\n            ctrlPressed &&\n            key.toLowerCase() === \"a\" &&\n            !params.disableSelection\n          ) {\n            instance.selectRange(event, {\n              start: getFirstNode(instance),\n              end: getLastNode(instance),\n            });\n            flag = true;\n          } else if (\n            !ctrlPressed &&\n            !event.shiftKey &&\n            isPrintableCharacter(key)\n          ) {\n            focusByFirstCharacter(event, state.focusedNodeId, key);\n            flag = true;\n          }\n      }\n\n      if (flag) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n    };\n\n  return {\n    getRootProps: (otherHandlers) => ({\n      onKeyDown: createHandleKeyDown(otherHandlers),\n    }),\n  };\n};\n"],"names":[],"mappings":"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"}