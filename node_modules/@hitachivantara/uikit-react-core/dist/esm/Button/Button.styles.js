import { createClasses } from "@hitachivantara/uikit-react-utils";
import { theme } from "@hitachivantara/uikit-styles";
import { outlineStyles } from "../utils/focusUtils.js";
const { staticClasses, useClasses } = createClasses("HvButton", {
  /** applied to the root element */
  root: {
    display: "inline-flex",
    alignItems: "center",
    justifyContent: "center",
    textTransform: "none",
    cursor: "pointer",
    whiteSpace: "nowrap",
    // Background color common for almost all variants
    ":where(:not($disabled))": {
      ":hover, :focus-visible": {
        backgroundColor: theme.colors.containerBackgroundHover
      }
    },
    ":focus-visible": {
      ...outlineStyles
    },
    // Default button - no size specified
    fontFamily: theme.fontFamily.body,
    ...theme.typography.label,
    color: "var(--color, currentcolor)",
    backgroundColor: "transparent",
    height: "var(--HvButton-height)",
    border: "1px solid transparent",
    borderRadius: `var(--radius, ${theme.radii.base})`,
    padding: theme.spacing(0, "sm")
  },
  /** applied to the _left_ icon container */
  startIcon: {
    marginLeft: theme.spacing(-1),
    marginTop: -1,
    marginBottom: -1
  },
  /** applied to the _right_ icon container */
  endIcon: {
    marginRight: theme.spacing(-1),
    marginTop: -1,
    marginBottom: -1
  },
  focusVisible: {},
  /** applied to the root element when disabled */
  disabled: {
    cursor: "not-allowed",
    color: theme.colors.secondary_60,
    backgroundColor: "transparent",
    borderColor: "transparent",
    ":hover, :focus-visible": {
      backgroundColor: "transparent",
      borderColor: "transparent"
    }
  },
  /** applied to the root element when is icon-only */
  icon: {
    margin: 0,
    padding: 0,
    height: "fit-content",
    "& > *": {
      margin: -1
    }
  },
  /** applied to the root element when using the `contained` variant */
  contained: {
    color: theme.colors.atmo1,
    // `color-contrast(var(--color) vs ${colors.atmo1}, ${colors.base_light}, ${colors.base_dark})`,
    backgroundColor: "var(--color)",
    ":where(:not($disabled))": {
      ":hover, :focus-visible": {
        backgroundColor: "color-mix(in srgb, var(--color), black 20%)"
      },
      ":active": {
        backgroundColor: "color-mix(in srgb, var(--color), black 30%)"
      }
    }
  },
  /** applied to the root element when using the `subtle` variant */
  subtle: {
    borderColor: "currentcolor"
  },
  /** applied to the root element when using the `ghost` variant */
  ghost: {},
  /** applied to the root element when using the `semantic` variant */
  semantic: {
    color: theme.colors.base_dark,
    backgroundColor: "transparent",
    borderColor: "transparent",
    "&:hover, &:focus-visible": {
      backgroundColor: theme.alpha("base_light", 0.3)
    },
    "&:active": {
      backgroundColor: theme.alpha("base_light", 0.5)
    },
    "&$disabled": {
      backgroundColor: theme.alpha("base_light", 0.1)
    }
  },
  // TODO - remove in v6
  primary: {},
  primarySubtle: {},
  primaryGhost: {},
  secondarySubtle: {},
  secondaryGhost: {},
  // Deprecated (DS3)
  secondary: {}
});
const sizes = {
  xs: { height: "24px", fontSize: "sm" },
  sm: { height: "24px", fontSize: "sm" },
  md: { height: "32px" },
  lg: { height: "48px", space: "md" },
  xl: { height: "48px", space: "md" }
};
const getSizeStyles = (size) => {
  const { height, space = "sm", fontSize } = sizes[size];
  return {
    height,
    padding: theme.spacing(0, space),
    fontSize: fontSize && theme.fontSizes[fontSize]
  };
};
const getIconSizeStyles = (size) => {
  const { height } = sizes[size];
  return {
    height,
    width: height
  };
};
const getOverrideColors = () => ({
  "& svg .color0": {
    fill: "currentcolor"
  }
});
export {
  getIconSizeStyles,
  getOverrideColors,
  getSizeStyles,
  staticClasses,
  useClasses
};
