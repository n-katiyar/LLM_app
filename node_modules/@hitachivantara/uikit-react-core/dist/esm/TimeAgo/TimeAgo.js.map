{"version":3,"file":"TimeAgo.js","sources":["../../../src/TimeAgo/TimeAgo.tsx"],"sourcesContent":["import {\n  useDefaultProps,\n  type ExtractNames,\n} from \"@hitachivantara/uikit-react-utils\";\n\nimport { DEFAULT_LOCALE } from \"../Calendar/utils\";\nimport {\n  fixedForwardRef,\n  PolymorphicComponentRef,\n  PolymorphicRef,\n} from \"../types/generic\";\nimport { HvTypography } from \"../Typography\";\nimport { staticClasses, useClasses } from \"./TimeAgo.styles\";\nimport useTimeAgo from \"./useTimeAgo\";\n\nexport { staticClasses as timeAgoClasses };\n\nexport type HvTimeAgoClasses = ExtractNames<typeof useClasses>;\n\nexport type HvTimeAgoProps<C extends React.ElementType = \"p\"> =\n  PolymorphicComponentRef<\n    C,\n    {\n      /**\n       * The timestamp to format, in seconds or milliseconds.\n       * Defaults to `emptyElement` if value is null or 0\n       */\n      timestamp?: number;\n      /**\n       * The locale to be used. Should be on of the JS supported locales\n       * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\n       */\n      locale?: Intl.LocalesArgument;\n      /**\n       * The element to render when the timestamp is null or 0\n       * Defaults to `—` (Em Dash)\n       */\n      emptyElement?: React.ReactNode;\n      /** Disables periodic date refreshes */\n      disableRefresh?: boolean;\n      /** Whether to show seconds in the rendered time */\n      showSeconds?: boolean;\n      /**\n       * Whether the component should render just the string\n       * Consider using `useTimeAgo` instead\n       */\n      justText?: boolean;\n      /** A Jss Object used to override or extend the styles applied to the component. */\n      classes?: HvTimeAgoClasses;\n    }\n  >;\n\n/**\n * The HvTimeAgo component implements the Design System relative time format guidelines.\n */\nexport const HvTimeAgo = fixedForwardRef(function HvTimeAgo<\n  C extends React.ElementType = \"p\",\n>(props: HvTimeAgoProps<C>, ref: PolymorphicRef<C>) {\n  const {\n    classes: classesProp,\n    className,\n    timestamp,\n    locale = DEFAULT_LOCALE,\n    component: Component = HvTypography,\n    emptyElement = \"—\",\n    disableRefresh = false,\n    showSeconds = false,\n    justText = false,\n    ...others\n  } = useDefaultProps(\"HvTimeAgo\", props);\n\n  const { classes, cx } = useClasses(classesProp);\n  const timeAgo = useTimeAgo(timestamp, {\n    locale,\n    disableRefresh,\n    showSeconds,\n  });\n\n  if (justText && timestamp) return <>{timeAgo}</>;\n\n  return (\n    <Component ref={ref} className={cx(classes.root, className)} {...others}>\n      {!timestamp ? emptyElement : timeAgo}\n    </Component>\n  );\n});\n"],"names":["HvTimeAgo"],"mappings":";;;;;;;;AAuDO,MAAM,YAAY,gBAAgB,SAASA,WAEhD,OAA0B,KAAwB;AAC5C,QAAA;AAAA,IACJ,SAAS;AAAA,IACT;AAAA,IACA;AAAA,IACA,SAAS;AAAA,IACT,WAAW,YAAY;AAAA,IACvB,eAAe;AAAA,IACf,iBAAiB;AAAA,IACjB,cAAc;AAAA,IACd,WAAW;AAAA,IACX,GAAG;AAAA,EAAA,IACD,gBAAgB,aAAa,KAAK;AAEtC,QAAM,EAAE,SAAS,OAAO,WAAW,WAAW;AACxC,QAAA,UAAU,WAAW,WAAW;AAAA,IACpC;AAAA,IACA;AAAA,IACA;AAAA,EAAA,CACD;AAED,MAAI,YAAY,UAAkB,QAAA,oBAAA,UAAA,EAAG,UAAQ,SAAA;AAE7C,SACG,oBAAA,WAAA,EAAU,KAAU,WAAW,GAAG,QAAQ,MAAM,SAAS,GAAI,GAAG,QAC9D,UAAC,CAAA,YAAY,eAAe,SAC/B;AAEJ,CAAC;"}