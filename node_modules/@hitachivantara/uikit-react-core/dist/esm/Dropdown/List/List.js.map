{"version":3,"file":"List.js","sources":["../../../../src/Dropdown/List/List.tsx"],"sourcesContent":["import { useEffect, useMemo, useState } from \"react\";\nimport {\n  mergeStyles,\n  useDefaultProps,\n  type ExtractNames,\n} from \"@hitachivantara/uikit-react-utils\";\nimport { theme } from \"@hitachivantara/uikit-styles\";\n\nimport { HvActionBar } from \"../../ActionBar\";\nimport { useBaseDropdownContext } from \"../../BaseDropdown/context\";\nimport { HvButton } from \"../../Button\";\nimport { HvCheckBox } from \"../../CheckBox\";\nimport { HvInput } from \"../../Input\";\nimport { HvList, HvListProps, HvListValue } from \"../../List\";\nimport { HvTypography } from \"../../Typography\";\nimport { setId } from \"../../utils/setId\";\nimport type { HvDropdownLabels } from \"../Dropdown\";\nimport { getSelected } from \"../utils\";\nimport { staticClasses, useClasses } from \"./List.styles\";\n\nexport { staticClasses as dropdownListClasses };\n\nexport type HvDropdownListClasses = ExtractNames<typeof useClasses>;\n\nexport interface HvDropdownListProps {\n  /**\n   * Id to be applied to the root node.\n   */\n  id?: string;\n  /**\n   * A Jss Object used to override or extend the component styles.\n   */\n  classes?: HvDropdownListClasses;\n  /**\n   * The list to be rendered.\n   */\n  values?: HvListValue[];\n  /**\n   * If true renders a multi select list.\n   */\n  multiSelect?: boolean;\n  /**\n   * If true renders the search component.\n   */\n  showSearch?: boolean;\n  /**\n   * A function to be executed whenever a item is selected in the list\n   * or the Apply button is activated (when `multiSelect` is `true`).\n   */\n  onChange: (\n    /** An array containing the selected values */\n    listValues: HvListValue[],\n    /** If `true` the selection if finally committed the dropdown header text should reflect the new selection */\n    commitChanges: boolean,\n    /** If `true` the dropdown should toggle it's current state */\n    toggle: boolean,\n    /** If `true` the dropdown will call onChange */\n    notifyChanges: boolean,\n  ) => void;\n  /**\n   * A function to be executed whenever the Cancel button is activated.\n   */\n  onCancel: (event: React.MouseEvent) => void;\n  /**\n   * An object containing all the labels for the dropdown.\n   */\n  labels?: HvDropdownLabels;\n  /**\n   * If 'true' the dropdown will notify on the first render.\n   */\n  notifyChangesOnFirstRender?: boolean;\n  /**\n   * If `true` the dropdown will show tooltips when user mouseenter text in list\n   */\n  hasTooltips?: boolean;\n  /**\n   * If `true`, selection can be toggled when single selection.\n   */\n  singleSelectionToggle?: boolean;\n  /**\n   * Experimental. Height of the dropdown, in case you want to control it from a prop. Styles can also be used through dropdownListContainer class. Required in case virtualized is used\n   */\n  height?: number;\n  /**\n   * Experimental. Max height of the dropdown, in case you want to control it from a prop. Styles can also be used through dropdownListContainer class.\n   */\n  maxHeight?: number;\n  /**\n   * Experimental. Uses dropdown in a virtualized form, where not all options are rendered initially. Good for use cases with a lot of options.\n   */\n  virtualized?: boolean;\n}\n\n/**\n * The values property was being deeply cloned. That created a significant performance\n * hit when the values contained complex properties' values, like React Nodes.\n *\n * For minimizing the impact of removing the clone, a shallow clone of the array and its\n * objects is performed instead. That should have the same effect in the majority of the\n * cases, where the properties' values are primitive.\n */\nconst clone = (values: HvListValue[]) => values.map((value) => ({ ...value }));\n\n/**\n * Set all hidden's to false.\n */\nconst cleanHidden = (lst: HvListValue[]) =>\n  lst.map((item) => ({ ...item, isHidden: false }));\n\nconst valuesExist = (values: HvListValue[]) =>\n  values != null && values?.length > 0;\n\n/** Filter selected ordered element `id`s (or `label`) */\nconst getSelectedIds = (list: HvListValue[]) =>\n  getSelected(list).map((item) => item.id || item.label);\n\nexport const HvDropdownList = (props: HvDropdownListProps) => {\n  const {\n    id,\n    classes: classesProp,\n    values = [],\n    multiSelect = false,\n    showSearch = false,\n    onChange,\n    onCancel,\n    labels,\n    notifyChangesOnFirstRender = false,\n    hasTooltips = false,\n    singleSelectionToggle,\n    height: heightProp,\n    maxHeight: maxHeightProp,\n    virtualized = false,\n    ...others\n  } = useDefaultProps(\"HvDropdownList\", props);\n  const { classes, cx } = useClasses(classesProp);\n\n  const [searchStr, setSearchStr] = useState<string>(\"\");\n  const [list, setList] = useState<HvListValue[]>(clone(values));\n  const [allSelected, setAllSelected] = useState<boolean>(false);\n  const [anySelected, setAnySelected] = useState<boolean>(false);\n  const { popper } = useBaseDropdownContext();\n  const { maxWidth, maxHeight } = popper?.styles.popper || {};\n\n  const hasChanges = useMemo(() => {\n    return String(getSelectedIds(values)) !== String(getSelectedIds(list));\n  }, [list, values]);\n\n  const newLabels = {\n    selectAll: labels?.selectAll,\n    selectionConjunction: labels?.multiSelectionConjunction,\n  };\n\n  /**\n   * Update states associated with select all.\n   */\n  const updateSelectAll = (listValues: HvListValue[]) => {\n    if (!listValues) return;\n    const nbrSelected = getSelected(listValues).length;\n    const hasSelection = nbrSelected > 0;\n    const allSelect = nbrSelected === listValues.length;\n\n    setAnySelected(hasSelection);\n    setAllSelected(hasSelection && allSelect);\n  };\n\n  /**\n   * After the first render, call onChange if notifyChangesOnFirstRender.\n   */\n  useEffect(() => {\n    if (!valuesExist(values)) return;\n    setList(clone(values));\n    updateSelectAll(values);\n    if (notifyChangesOnFirstRender) {\n      onChange?.(values, false, false, true);\n    }\n  }, [values, notifyChangesOnFirstRender, onChange]);\n\n  /**\n   * Sets the filtered values to the state.\n   *\n   * @param {String} str - The value that is being looked.\n   */\n  const handleSearch = (str: string) => {\n    const results = list\n      ? list.filter(\n          ({\n            searchValue,\n            label,\n            value,\n          }: {\n            searchValue?: any;\n            label?: any;\n            value?: any;\n          }) => {\n            let stringValue = \"\";\n            if (\n              typeof searchValue === \"string\" ||\n              searchValue instanceof String\n            ) {\n              stringValue = searchValue.toLowerCase();\n            } else if (typeof label === \"string\" || label instanceof String) {\n              stringValue = label.toLowerCase();\n            } else if (typeof value === \"string\" || value instanceof String) {\n              stringValue = value.toLowerCase();\n            }\n\n            return stringValue.indexOf(str.toLowerCase()) >= 0;\n          },\n        )\n      : null;\n\n    if (results != null) {\n      const newList = list.map((elem) => {\n        const isResult = results.find((result) => result.label === elem.label);\n        return { ...elem, isHidden: !isResult };\n      });\n\n      setList(newList);\n      setSearchStr(str);\n    }\n    return str;\n  };\n\n  /**\n   * Create search element.\n   *\n   * @returns {*}\n   */\n  const renderSearch = () => (\n    <div className={classes.searchContainer}>\n      <HvInput\n        id={setId(id, \"search\")}\n        type=\"search\"\n        value={searchStr}\n        placeholder={labels?.searchPlaceholder}\n        aria-label={labels?.searchPlaceholder}\n        onChange={(event, str) => handleSearch(str)}\n      />\n    </div>\n  );\n\n  /**\n   * Select all the values inside the dropdown.\n   *\n   */\n  const handleSelectAll = () => {\n    const newList = list.map((elem) => ({ ...elem, selected: !anySelected }));\n    setList(newList);\n    updateSelectAll(newList);\n  };\n\n  /**\n   * Create selecteAll component.\n   *\n   * @returns {*}\n   */\n  const renderSelectAll = () => {\n    const selectAll = labels?.selectAll;\n    const multiSelectionConjunction = labels?.multiSelectionConjunction;\n    const nbrSelected = getSelected(list).length;\n\n    const defaultLabel = (\n      <HvTypography component=\"span\">\n        {nbrSelected > 0 ? (\n          <>\n            <b>{nbrSelected}</b>\n            {` ${multiSelectionConjunction} ${list.length}`}\n          </>\n        ) : (\n          <>\n            <b>{selectAll}</b>\n            {` (${list.length})`}\n          </>\n        )}\n      </HvTypography>\n    );\n\n    return (\n      <div className={classes.selectAllContainer}>\n        <HvCheckBox\n          id={setId(id, \"select-all\")}\n          label={defaultLabel}\n          onChange={() => handleSelectAll()}\n          classes={{\n            container: classes.selection,\n          }}\n          className={classes.selectAll}\n          indeterminate={anySelected && !allSelected}\n          checked={allSelected}\n        />\n      </div>\n    );\n  };\n\n  /**\n   * When selecting the state list is updated with the corresponding selection.\n   *\n   * @param listValues - elements selected.\n   */\n  const onSelection: HvListProps[\"onChange\"] = (listValues) => {\n    if (!multiSelect) {\n      onChange(cleanHidden(listValues), true, true, true);\n    } else {\n      updateSelectAll(listValues);\n      setList(clone(listValues));\n    }\n  };\n\n  /**\n   * Render action buttons.\n   */\n  const renderActions = () => {\n    const applyLabel = labels?.applyLabel;\n    const cancelLabel = labels?.cancelLabel;\n    return (\n      <HvActionBar id={setId(id, \"actions\")}>\n        <HvButton\n          id={setId(id, \"actions-apply\")}\n          disabled={!hasChanges}\n          onClick={() => onChange(cleanHidden(list), true, true, true)}\n          variant=\"primaryGhost\"\n        >\n          {applyLabel}\n        </HvButton>\n        <HvButton\n          id={setId(id, \"actions-cancel\")}\n          onClick={onCancel}\n          variant=\"primaryGhost\"\n        >\n          {cancelLabel}\n        </HvButton>\n      </HvActionBar>\n    );\n  };\n\n  const showList = valuesExist(values);\n  /** bottom margin + Panel padding + Search size + SelectAll + ActionBar size */\n  const elementsSize = theme.spacing(\n    5 + 2 + (showSearch ? 5 : 0) + (showList && multiSelect ? 4 + 6 : 0),\n  );\n\n  return (\n    <div className={classes.rootList}>\n      <div className={classes.listBorderDown} />\n      <div className={classes.listContainer}>\n        {showSearch && renderSearch()}\n        {showList && multiSelect && renderSelectAll()}\n        {showList && (\n          <HvList\n            id={setId(id, \"list\")}\n            style={mergeStyles(undefined, {\n              height: heightProp,\n              \"--maxW\": maxWidth,\n              \"--maxH\": maxHeightProp ?? `calc(${maxHeight} - ${elementsSize})`,\n            })}\n            classes={{\n              root: cx(classes.dropdownListContainer, {\n                [classes.virtualized]: virtualized,\n              }),\n            }}\n            values={list}\n            multiSelect={multiSelect}\n            useSelector={multiSelect}\n            showSelectAll={false}\n            onChange={onSelection}\n            labels={newLabels}\n            hasTooltips={hasTooltips}\n            selectable\n            condensed\n            singleSelectionToggle={singleSelectionToggle}\n            height={heightProp}\n            virtualized={virtualized}\n            {...others}\n          />\n        )}\n      </div>\n      {showList && multiSelect ? renderActions() : null}\n    </div>\n  );\n};\n"],"names":[],"mappings":"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"}