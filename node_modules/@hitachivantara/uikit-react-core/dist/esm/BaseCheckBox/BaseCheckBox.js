import { jsx } from "react/jsx-runtime";
import { forwardRef, useState, useCallback } from "react";
import MuiCheckbox from "@mui/material/Checkbox";
import { useDefaultProps } from "@hitachivantara/uikit-react-utils";
import { useClasses } from "./BaseCheckBox.styles.js";
import { staticClasses } from "./BaseCheckBox.styles.js";
import { Check, Partial, Box } from "./icons.js";
const getSelectorIcons = () => {
  return {
    checkbox: /* @__PURE__ */ jsx(Box, {}),
    checkboxPartial: /* @__PURE__ */ jsx(Partial, {}),
    checkboxChecked: /* @__PURE__ */ jsx(Check, {})
  };
};
const HvBaseCheckBox = forwardRef(function HvBaseCheckBox2(props, ref) {
  const {
    id,
    classes: classesProp,
    className,
    name,
    inputProps,
    onChange,
    onFocusVisible,
    onBlur,
    checked,
    indeterminate,
    defaultChecked,
    value = "on",
    required = false,
    readOnly = false,
    disabled = false,
    semantic = false,
    ...others
  } = useDefaultProps("HvBaseCheckBox", props);
  const { classes, cx } = useClasses(classesProp);
  const [focusVisible, setFocusVisible] = useState(false);
  const icons = getSelectorIcons();
  const onChangeCallback = useCallback(
    (event) => {
      if (readOnly) {
        return;
      }
      onChange?.(event, event.target.checked, value);
    },
    [onChange, readOnly, value]
  );
  const onBlurCallback = useCallback(
    (event) => {
      setFocusVisible(false);
      onBlur?.(event);
    },
    [onBlur]
  );
  const onFocusVisibleCallback = useCallback(
    (event) => {
      setFocusVisible(true);
      onFocusVisible?.(event);
    },
    [onFocusVisible]
  );
  return /* @__PURE__ */ jsx(
    MuiCheckbox,
    {
      ref,
      id,
      name,
      value,
      className: cx(
        classes.root,
        {
          [classes.disabled]: disabled,
          [classes.focusVisible]: focusVisible,
          [classes.checked]: checked,
          [classes.indeterminate]: indeterminate,
          [classes.semantic]: semantic
        },
        className
      ),
      icon: icons.checkbox,
      indeterminateIcon: icons.checkboxPartial,
      checkedIcon: icons.checkboxChecked,
      disabled,
      required,
      readOnly,
      checked,
      defaultChecked,
      indeterminate,
      inputProps,
      onChange: onChangeCallback,
      onFocusVisible: onFocusVisibleCallback,
      onBlur: onBlurCallback,
      color: "default",
      ...others
    }
  );
});
export {
  HvBaseCheckBox,
  staticClasses as baseCheckBoxClasses
};
