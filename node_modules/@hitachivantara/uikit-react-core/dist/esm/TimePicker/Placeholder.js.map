{"version":3,"file":"Placeholder.js","sources":["../../../src/TimePicker/Placeholder.tsx"],"sourcesContent":["import { forwardRef, useRef } from \"react\";\nimport { useDateSegment } from \"@react-aria/datepicker\";\nimport {\n  DateFieldState,\n  DateSegment,\n  SegmentType,\n} from \"@react-stately/datepicker\";\n\nimport { HvBaseProps } from \"../types/generic\";\n\n/** Convert `Date` into `hh:mm:ss` format */\nconst getDateValue = (date: any) => {\n  if (!date) return \"\";\n  const { hour, minute, second } = date;\n\n  return [hour, minute, second]\n    .map((el) => String(el).padStart(2, \"0\"))\n    .join(\":\");\n};\n\nconst PlaceholderSegment = ({\n  segment,\n  state,\n  placeholder,\n}: {\n  segment: DateSegment;\n  state: DateFieldState;\n  placeholder?: string;\n}) => {\n  const ref = useRef(null);\n  const { segmentProps } = useDateSegment(segment, state, ref);\n\n  return (\n    <div ref={ref} {...segmentProps}>\n      {(() => {\n        if (segment.type === \"literal\") return segment.text;\n        if (segment.isPlaceholder) return placeholder ?? segment.text;\n        return segment.text.padStart(2, \"0\");\n      })()}\n    </div>\n  );\n};\n\nexport interface PlaceholderProps extends HvBaseProps<HTMLDivElement> {\n  name?: string;\n  state: DateFieldState;\n  placeholders: Partial<Record<SegmentType, string>>;\n}\n\nexport const Placeholder = forwardRef<HTMLDivElement, PlaceholderProps>(\n  function Placeholder(props, ref) {\n    const { name, state, placeholders, onKeyDown, ...others } = props;\n    const { value, segments } = state;\n\n    return (\n      <>\n        {/* eslint-disable-next-line jsx-a11y/no-static-element-interactions */}\n        <div\n          ref={ref}\n          onKeyDown={(event) => {\n            // stop ArrowDown from opening dropdown\n            event.stopPropagation();\n            onKeyDown?.(event);\n          }}\n          {...others}\n        >\n          {name && (\n            <input type=\"hidden\" name={name} value={getDateValue(value)} />\n          )}\n          {segments.map((segment, i) => (\n            <PlaceholderSegment\n              key={i}\n              segment={segment}\n              state={state}\n              placeholder={placeholders[segment.type]}\n            />\n          ))}\n        </div>\n      </>\n    );\n  },\n);\n"],"names":["Placeholder"],"mappings":";;;AAWA,MAAM,eAAe,CAAC,SAAc;AAC9B,MAAA,CAAC,KAAa,QAAA;AAClB,QAAM,EAAE,MAAM,QAAQ,OAAW,IAAA;AAEjC,SAAO,CAAC,MAAM,QAAQ,MAAM,EACzB,IAAI,CAAC,OAAO,OAAO,EAAE,EAAE,SAAS,GAAG,GAAG,CAAC,EACvC,KAAK,GAAG;AACb;AAEA,MAAM,qBAAqB,CAAC;AAAA,EAC1B;AAAA,EACA;AAAA,EACA;AACF,MAIM;AACE,QAAA,MAAM,OAAO,IAAI;AACvB,QAAM,EAAE,aAAa,IAAI,eAAe,SAAS,OAAO,GAAG;AAE3D,SACG,oBAAA,OAAA,EAAI,KAAW,GAAG,cACf,WAAM,MAAA;AACN,QAAI,QAAQ,SAAS,UAAW,QAAO,QAAQ;AAC/C,QAAI,QAAQ,cAAsB,QAAA,eAAe,QAAQ;AACzD,WAAO,QAAQ,KAAK,SAAS,GAAG,GAAG;AAAA,QAEvC;AAEJ;AAQO,MAAM,cAAc;AAAA,EACzB,SAASA,aAAY,OAAO,KAAK;AAC/B,UAAM,EAAE,MAAM,OAAO,cAAc,WAAW,GAAG,WAAW;AACtD,UAAA,EAAE,OAAO,SAAA,IAAa;AAE5B,WAGI,oBAAA,UAAA,EAAA,UAAA;AAAA,MAAC;AAAA,MAAA;AAAA,QACC;AAAA,QACA,WAAW,CAAC,UAAU;AAEpB,gBAAM,gBAAgB;AACtB,sBAAY,KAAK;AAAA,QACnB;AAAA,QACC,GAAG;AAAA,QAEH,UAAA;AAAA,UACC,QAAA,oBAAC,WAAM,MAAK,UAAS,MAAY,OAAO,aAAa,KAAK,GAAG;AAAA,UAE9D,SAAS,IAAI,CAAC,SAAS,MACtB;AAAA,YAAC;AAAA,YAAA;AAAA,cAEC;AAAA,cACA;AAAA,cACA,aAAa,aAAa,QAAQ,IAAI;AAAA,YAAA;AAAA,YAHjC;AAAA,UAKR,CAAA;AAAA,QAAA;AAAA,MAAA;AAAA,IAAA,GAEL;AAAA,EAAA;AAGN;"}