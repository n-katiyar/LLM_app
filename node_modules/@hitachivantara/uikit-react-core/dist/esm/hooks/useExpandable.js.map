{"version":3,"file":"useExpandable.js","sources":["../../../src/hooks/useExpandable.ts"],"sourcesContent":["import type { HvAccordionProps } from \"../Accordion\";\nimport { setId } from \"../utils/setId\";\nimport { useControlled } from \"./useControlled\";\nimport { useUniqueId } from \"./useUniqueId\";\n\nexport interface UseExpandableParams\n  extends Pick<\n    HvAccordionProps,\n    \"id\" | \"disabled\" | \"expanded\" | \"defaultExpanded\"\n  > {}\n\n/** expandable hook that handles a11y & open state for accordions, etc. */\nexport function useExpandable({\n  id: idProp,\n  disabled,\n  expanded,\n  defaultExpanded,\n}: UseExpandableParams) {\n  const [isOpen, setIsOpen] = useControlled(expanded, Boolean(defaultExpanded));\n\n  const id = useUniqueId(idProp);\n  const buttonId = setId(id, \"button\");\n  const regionId = setId(id, \"container\");\n\n  return {\n    isOpen,\n    toggleOpen: (newOpen?: boolean) => setIsOpen((o) => newOpen ?? !o),\n    buttonProps: {\n      id: buttonId,\n      \"aria-disabled\": disabled,\n      \"aria-expanded\": isOpen,\n      \"aria-controls\": isOpen ? regionId : undefined,\n    },\n    regionProps: {\n      id: regionId,\n      role: \"region\",\n      \"aria-labelledby\": buttonId,\n    },\n  };\n}\n"],"names":[],"mappings":";;;AAYO,SAAS,cAAc;AAAA,EAC5B,IAAI;AAAA,EACJ;AAAA,EACA;AAAA,EACA;AACF,GAAwB;AAChB,QAAA,CAAC,QAAQ,SAAS,IAAI,cAAc,UAAU,QAAQ,eAAe,CAAC;AAEtE,QAAA,KAAK,YAAY,MAAM;AACvB,QAAA,WAAW,MAAM,IAAI,QAAQ;AAC7B,QAAA,WAAW,MAAM,IAAI,WAAW;AAE/B,SAAA;AAAA,IACL;AAAA,IACA,YAAY,CAAC,YAAsB,UAAU,CAAC,MAAM,WAAW,CAAC,CAAC;AAAA,IACjE,aAAa;AAAA,MACX,IAAI;AAAA,MACJ,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB,SAAS,WAAW;AAAA,IACvC;AAAA,IACA,aAAa;AAAA,MACX,IAAI;AAAA,MACJ,MAAM;AAAA,MACN,mBAAmB;AAAA,IAAA;AAAA,EAEvB;AACF;"}