{"version":3,"file":"useFocus.js","sources":["../../../src/hooks/useFocus.ts"],"sourcesContent":["import { useMemo } from \"react\";\n\nimport { getDocument } from \"../utils/document\";\n\n/** server-side safe `document.activeElement` wrapper */\nconst getActiveEl = () => getDocument()?.activeElement || null;\n\nfunction makeFocusUtils(containerRef: React.RefObject<HTMLElement>) {\n  function focus(el?: Element | null, checkFocus = true) {\n    if (!checkFocus || containerRef.current?.contains(getActiveEl())) {\n      (el as HTMLElement)?.focus();\n    }\n  }\n\n  return {\n    focusPrevious() {\n      focus(getActiveEl()?.previousElementSibling);\n    },\n    focusNext() {\n      focus(getActiveEl()?.nextElementSibling);\n    },\n    focusFirst() {\n      focus(getActiveEl()?.parentElement?.firstElementChild);\n    },\n    focusLast() {\n      focus(getActiveEl()?.parentElement?.lastElementChild);\n    },\n    focusChild(index: number) {\n      focus(containerRef.current?.children[index], false);\n    },\n    focusSibling(index: number) {\n      focus(getActiveEl()?.parentElement?.children[index]);\n    },\n  };\n}\n\nexport function useFocus({\n  containerRef,\n}: {\n  containerRef: React.RefObject<HTMLElement>;\n}) {\n  return useMemo(() => makeFocusUtils(containerRef), [containerRef]);\n}\n"],"names":[],"mappings":";;AAKA,MAAM,cAAc,MAAM,eAAe,iBAAiB;AAE1D,SAAS,eAAe,cAA4C;AACzD,WAAA,MAAM,IAAqB,aAAa,MAAM;AACrD,QAAI,CAAC,cAAc,aAAa,SAAS,SAAS,YAAA,CAAa,GAAG;AAC/D,UAAoB,MAAM;AAAA,IAAA;AAAA,EAC7B;AAGK,SAAA;AAAA,IACL,gBAAgB;AACR,YAAA,eAAe,sBAAsB;AAAA,IAC7C;AAAA,IACA,YAAY;AACJ,YAAA,eAAe,kBAAkB;AAAA,IACzC;AAAA,IACA,aAAa;AACL,YAAA,YAAA,GAAe,eAAe,iBAAiB;AAAA,IACvD;AAAA,IACA,YAAY;AACJ,YAAA,YAAA,GAAe,eAAe,gBAAgB;AAAA,IACtD;AAAA,IACA,WAAW,OAAe;AACxB,YAAM,aAAa,SAAS,SAAS,KAAK,GAAG,KAAK;AAAA,IACpD;AAAA,IACA,aAAa,OAAe;AAC1B,YAAM,YAAY,GAAG,eAAe,SAAS,KAAK,CAAC;AAAA,IAAA;AAAA,EAEvD;AACF;AAEO,SAAS,SAAS;AAAA,EACvB;AACF,GAEG;AACD,SAAO,QAAQ,MAAM,eAAe,YAAY,GAAG,CAAC,YAAY,CAAC;AACnE;"}