{"version":3,"file":"useHvHeaderGroups.js","sources":["../../../../src/Table/hooks/useHvHeaderGroups.ts"],"sourcesContent":["import { Hooks } from \"react-table\";\n\n// #region ##### TYPES #####\n\nexport interface UseHvHeaderGroupsInstance {\n  hasGroupedColumns?: boolean;\n}\n\n// props target: <table><thead><tr><th>\nexport interface UseHvHeaderGroupsColumnProps {\n  style?: React.CSSProperties;\n  groupColumnMostLeft?: boolean;\n  groupColumnMostRight?: boolean;\n}\n\n// props target: <table><tbody><tr><td>\nexport interface UseHvHeaderGroupsCellProps {\n  groupColumnMostLeft?: boolean;\n  groupColumnMostRight?: boolean;\n}\n\nexport type UseHvHeaderGroupsProps = (<\n  D extends object = Record<string, unknown>,\n>(\n  hooks: Hooks<D>,\n) => void) & { pluginName: string };\n\n// #endregion ##### TYPES #####\n\n/**\n * Moving non grouped headers to the top level,\n * by placing them in the position of their top level placeholder.\n *\n * By default the header groups are built bottom top,\n * that results in non grouped headers to be placed\n * at the bottom row in the table head.\n *\n * @param {Array.<Object>} headerGroups - table header groups\n */\nconst replaceHeaderPlaceholders = (headerGroups: any) => {\n  const [headerGroup] = headerGroups;\n\n  const hasPlaceholderHeaders = headerGroup.headers.some(\n    (h: any) => h.placeholderOf != null,\n  );\n  if (!hasPlaceholderHeaders) {\n    return; // no placeholder header found to replace\n  }\n\n  const maxDepth = headerGroups.length - 1;\n  const leafGroup = headerGroups[maxDepth];\n\n  headerGroup.headers.forEach((header: any, position: any) => {\n    const { placeholderOf } = header;\n\n    const isPlaceholderHeader = placeholderOf != null;\n    if (isPlaceholderHeader) {\n      // is placeholder header\n      const leafIndex =\n        leafGroup.headers\n          .slice(position)\n          .findIndex(({ id }: any) => id === placeholderOf.id) + position;\n\n      // store leaf placeholder header\n      header.variant = placeholderOf.variant;\n      header.depth = maxDepth;\n      leafGroup.headers[leafIndex] = header;\n\n      // replace placeholder with leaf header\n      placeholderOf.rowSpan = maxDepth + 1;\n      headerGroup.headers[position] = placeholderOf;\n    }\n  });\n};\n\nconst getCellProps = (column: any, isHeaderCell = false) => ({\n  groupColumnMostLeft: column.isGroupLeftColumn,\n  groupColumnMostRight: column.isGroupRightColumn,\n  rowSpan: isHeaderCell && column.rowSpan != null ? column.rowSpan : 1,\n});\n\n// props target: <table><thead><tr><th>\nconst getHeaderPropsHook = (props: any, { instance, column }: any) => {\n  const nextProps: UseHvHeaderGroupsColumnProps = instance.hasGroupedColumns\n    ? getCellProps(column, true)\n    : {};\n\n  if (instance.hasGroupedColumns) {\n    const isPlaceholder = column.placeholderOf != null;\n\n    nextProps.style = {\n      display: isPlaceholder ? \"none\" : props.style?.display,\n    };\n\n    if (instance.hasStickyColumns) {\n      if (isPlaceholder) {\n        nextProps.style.display = \"inline-flex\";\n        nextProps.style.visibility = \"hidden\";\n      }\n\n      if (column.parent || isPlaceholder) {\n        nextProps.style.marginTop = `calc(var(--cell-height) * -1)`;\n      }\n\n      if (column.rowSpan > 1) {\n        // rowSpan doesn't work with flex, so we need to simulate it by adjusting the height value manually\n        nextProps.style.height = `calc(var(--first-row-cell-height) + var(--cell-height) * ${\n          column.rowSpan - 1\n        })`;\n      }\n    }\n  }\n\n  return [props, nextProps];\n};\n\n// props target: <table><tbody><tr><td>\nconst getCellPropsHook = (props: any, { instance, cell }: any) => {\n  const nextProps: UseHvHeaderGroupsCellProps = instance.hasGroupedColumns\n    ? getCellProps(cell.column)\n    : {};\n\n  return [props, nextProps];\n};\n\nconst visibleColumnsHook = (visibleColumns: any, { instance }: any) => {\n  const parentList = new Set();\n\n  visibleColumns.forEach(({ parent }: { parent: any }) => {\n    if (parent != null && !parentList.has(parent)) {\n      parentList.add(parent);\n    }\n  });\n\n  const hasGroupedColumns = parentList.size > 0;\n  if (hasGroupedColumns) {\n    parentList.forEach((parent: any) => {\n      parent.align = \"center\";\n      parent.isGroupLeftColumn = true;\n      parent.isGroupRightColumn = true;\n\n      const { columns } = parent;\n      columns[0].isGroupLeftColumn = true;\n      columns[columns.length - 1].isGroupRightColumn = true;\n    });\n  }\n\n  Object.assign(instance, { hasGroupedColumns });\n\n  return visibleColumns;\n};\n\nconst useInstanceHook = (instance: any) => {\n  if (instance.hasGroupedColumns) {\n    replaceHeaderPlaceholders(instance.headerGroups);\n  }\n};\n\nexport const useHvHeaderGroups: UseHvHeaderGroupsProps = (hooks) => {\n  hooks.visibleColumns.push(visibleColumnsHook);\n  hooks.useInstance.push(useInstanceHook);\n\n  // props target: <table><thead><tr><th>\n  hooks.getHeaderProps.push(getHeaderPropsHook);\n  // props target: <table><tbody><tr><td>\n  hooks.getCellProps.push(getCellPropsHook);\n};\n\nuseHvHeaderGroups.pluginName = \"useHvHeaderGroups\";\n"],"names":[],"mappings":"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"}