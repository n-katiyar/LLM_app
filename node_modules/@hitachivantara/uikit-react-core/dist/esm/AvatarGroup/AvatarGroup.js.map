{"version":3,"file":"AvatarGroup.js","sources":["../../../src/AvatarGroup/AvatarGroup.tsx"],"sourcesContent":["import { Children, forwardRef } from \"react\";\nimport {\n  mergeStyles,\n  useCss,\n  useDefaultProps,\n  type ExtractNames,\n} from \"@hitachivantara/uikit-react-utils\";\nimport { HvSize, theme } from \"@hitachivantara/uikit-styles\";\n\nimport { HvAvatar } from \"../Avatar/Avatar\";\nimport { HvBaseProps } from \"../types/generic\";\nimport { staticClasses, useClasses } from \"./AvatarGroup.styles\";\nimport { HvAvatarGroupProvider } from \"./AvatarGroupContext\";\n\nexport { staticClasses as avatarGroupClasses };\n\nexport type HvAvatarGroupClasses = ExtractNames<typeof useClasses>;\n\nexport interface HvAvatarGroupProps extends HvBaseProps {\n  /** A Jss Object used to override or extend the styles applied to the component. */\n  classes?: HvAvatarGroupClasses;\n  /** The avatar size. */\n  size?: HvSize;\n  /** The spacing between avatars. */\n  spacing?: \"compact\" | \"loose\";\n  /** The direction of the group. */\n  direction?: \"row\" | \"column\";\n  /** Whether the avatars display behind the previous avatar or on top. */\n  toBack?: boolean;\n  /**\n   * The maximum number of visible avatars. If there are more avatars then the value of this property, an added avatar will\n   * be added to the end of the list, indicating the number of hidden avatars.\n   */\n  maxVisible?: number;\n  /**\n   * What to show as an overflow representation.\n   * If `undefined` a default `HvAvatar` will be displayed along with a HvTooltip with the count of overflowing items.\n   * */\n  overflowComponent?: (overflowCount: number) => React.ReactNode;\n  /**\n   * If `true` the avatars will be brought to the front when hovered.\n   */\n  highlight?: boolean;\n}\n\nconst getSpacingValue = (\n  spacing: HvAvatarGroupProps[\"spacing\"],\n  size: HvAvatarGroupProps[\"size\"],\n) => {\n  switch (size) {\n    case \"xs\":\n      return spacing === \"compact\" ? 24 : 16;\n    case \"sm\":\n      return spacing === \"compact\" ? 30 : 18;\n    case \"md\":\n      return spacing === \"compact\" ? 36 : 20;\n    case \"lg\":\n      return spacing === \"compact\" ? 44 : 24;\n    case \"xl\":\n      return spacing === \"compact\" ? 72 : 34;\n    default:\n      return spacing === \"compact\" ? 30 : 18;\n  }\n};\n\nconst getFontSize = (size: HvAvatarGroupProps[\"size\"]) => {\n  switch (size) {\n    case \"xs\":\n      return \"1em\";\n    case \"sm\":\n      return \"1.25em\";\n    case \"md\":\n      return \"1.5em\";\n    case \"lg\":\n      return \"1.75em\";\n    case \"xl\":\n      return \"3em\";\n    default:\n      return \"1em\";\n  }\n};\n\ninterface OverflowProps {\n  direction: HvAvatarGroupProps[\"direction\"];\n  childrenToShow: React.ReactNode[];\n  spacingValue: number;\n  overflowComponent?: (n: number) => React.ReactNode;\n  totalChildren: number;\n  maxVisible: number;\n  size: HvAvatarGroupProps[\"size\"];\n}\n\nconst Overflow = ({\n  direction,\n  childrenToShow,\n  spacingValue,\n  overflowComponent,\n  totalChildren,\n  maxVisible,\n  size,\n}: OverflowProps) => {\n  const { css } = useCss();\n\n  return (\n    <div\n      style={{\n        marginLeft:\n          direction === \"row\" && childrenToShow.length > 0 ? -spacingValue : 0,\n        marginTop:\n          direction === \"column\" && childrenToShow.length > 0\n            ? -spacingValue\n            : 0,\n        zIndex: 0,\n      }}\n    >\n      {overflowComponent ? (\n        overflowComponent(totalChildren - maxVisible)\n      ) : (\n        <HvAvatar\n          size={size}\n          backgroundColor={theme.colors.atmo4}\n          classes={{\n            avatar: css({\n              [`&.HvAvatar-${size}`]: {\n                fontSize: getFontSize(size),\n              },\n            }),\n          }}\n        >\n          +{totalChildren - maxVisible}\n        </HvAvatar>\n      )}\n    </div>\n  );\n};\n\n/**\n * The AvatarGroup component is used to group multiple avatars.\n */\nexport const HvAvatarGroup = forwardRef<HTMLDivElement, HvAvatarGroupProps>(\n  function HvAvatarGroup(props, ref) {\n    const {\n      className,\n      style,\n      classes: classesProp,\n      children,\n      size = \"sm\",\n      spacing = \"loose\",\n      direction = \"row\",\n      maxVisible = 3,\n      overflowComponent,\n      highlight = false,\n      toBack = false,\n      ...others\n    } = useDefaultProps(\"HvAvatarGroup\", props);\n    const { classes, cx } = useClasses(classesProp);\n\n    const spacingValue = getSpacingValue(spacing, size);\n\n    const totalChildren = Children.count(children);\n    const willOverflow = totalChildren > maxVisible;\n\n    const childrenToShow = Children.toArray(children).slice(0, maxVisible);\n\n    // Since the `HvAvatar` components are displayed in reverse order using `row-reverse`, we need to reverse the array.\n    if (toBack) childrenToShow.reverse();\n\n    return (\n      <div\n        className={cx(\n          classes.root,\n          classes[direction],\n          {\n            [classes.highlight]: highlight,\n            [classes.toBack]: toBack,\n          },\n          className,\n        )}\n        style={mergeStyles(style, {\n          \"--spacing\": `-${spacingValue}px`,\n        })}\n        ref={ref}\n        {...others}\n      >\n        <HvAvatarGroupProvider size={size}>\n          {toBack && willOverflow && (\n            <Overflow\n              childrenToShow={childrenToShow}\n              direction={direction}\n              maxVisible={maxVisible}\n              overflowComponent={overflowComponent}\n              size={size}\n              spacingValue={spacingValue}\n              totalChildren={totalChildren}\n            />\n          )}\n          {childrenToShow}\n          {!toBack && willOverflow && (\n            <Overflow\n              childrenToShow={childrenToShow}\n              direction={direction}\n              maxVisible={maxVisible}\n              overflowComponent={overflowComponent}\n              size={size}\n              spacingValue={spacingValue}\n              totalChildren={totalChildren}\n            />\n          )}\n        </HvAvatarGroupProvider>\n      </div>\n    );\n  },\n);\n"],"names":["HvAvatarGroup"],"mappings":"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"}