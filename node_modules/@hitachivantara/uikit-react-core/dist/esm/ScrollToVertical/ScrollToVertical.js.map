{"version":3,"file":"ScrollToVertical.js","sources":["../../../src/ScrollToVertical/ScrollToVertical.tsx"],"sourcesContent":["import {\n  useDefaultProps,\n  type ExtractNames,\n} from \"@hitachivantara/uikit-react-utils\";\n\nimport { useScrollTo } from \"../hooks/useScrollTo\";\nimport { HvBaseProps } from \"../types/generic\";\nimport {\n  HvScrollToOption,\n  HvScrollToTooltipPositions,\n  HvScrollToVerticalPositions,\n} from \"../types/scroll\";\nimport { isKey } from \"../utils/keyboardUtils\";\nimport { setId } from \"../utils/setId\";\nimport {\n  calculateOffset,\n  staticClasses,\n  useClasses,\n} from \"./ScrollToVertical.styles\";\nimport { HvVerticalScrollListItem } from \"./VerticalScrollListItem\";\n\nexport { staticClasses as scrollToVerticalClasses };\n\nexport type HvScrollToVerticalClasses = ExtractNames<typeof useClasses>;\n\nexport interface HvScrollToVerticalProps\n  extends HvBaseProps<HTMLOListElement, \"onChange\" | \"onClick\"> {\n  /** An Array of Objects with Label and Value. Label is the displayed Element and Value is the local navigation location applied */\n  options: HvScrollToOption[];\n  /**\n   * Should the active element be reflected in the URL.\n   *\n   * @default true\n   *\n   * @deprecated Use `navigationMode` instead.\n   * */\n  href?: boolean;\n  /**\n   * The navigation mode to be used when the user clicks on a tab element.\n   * - `push` will add a new entry to the history stack.\n   * - `replace` will replace the current entry on the history stack.\n   * - `none` will not add any entry to the history stack.\n   *\n   * Defaults to `push`, unless the deprecated `href` prop is set to `false`, in which case it defaults to `none`.\n   *\n   * When set to `none`, then each element will render a button instead of a link.\n   *\n   * @default \"push\"\n   */\n  navigationMode?: \"push\" | \"replace\" | \"none\";\n  /**\n   * When set to `true`, the generated links will be relative (e.g. `#section`).\n   * Relative URLs take into account not only the current location, but also the base URL if it is set (i.e. a `<base>` tag).\n   * This can lead to unexpected behavior.\n   *\n   * When set to `false`, the links will be generated from the current location's full URL (e.g. `http://example.com/hello/world?value=123#section`).\n   *\n   * @default false\n   */\n  relativeLinks?: boolean;\n  /** Default selected index passed from the parent. */\n  defaultSelectedIndex?: number;\n  /**\n   * The Id of the scrollable container containing displayed elements.\n   *\n   * Defaults to `window` if unspecified.\n   */\n  scrollElementId?: string;\n  /**\n   * Defines the offset from the top of each element for getting an optimal viewing region in the container.\n   * This allows to exclude regions of the container that are obscured by other content (such as fixed-positioned toolbars or titles)\n   * or to put more breathing room between the targeted element and the edges of the container.\n   *\n   * Each element can also have a specific offset via the options property.\n   */\n  offset?: number;\n  /** Position of the Vertical scroll to. */\n  position?: HvScrollToVerticalPositions;\n  /** Position of tooltip identifying the current item. */\n  tooltipPosition?: HvScrollToTooltipPositions;\n  /** A function called each time the selected index changes. */\n  onChange?: (\n    event:\n      | Event\n      | React.MouseEvent<HTMLDivElement | HTMLAnchorElement>\n      | React.KeyboardEvent<HTMLDivElement | HTMLAnchorElement>,\n    index: number,\n  ) => void;\n  /** A function called each time an user clicks on a tab element. */\n  onClick?: (\n    event: React.MouseEvent<HTMLDivElement | HTMLAnchorElement>,\n    index: number,\n  ) => void;\n  /** A function called each time an user press enter on a tab element. */\n  onEnter?: (\n    event: React.KeyboardEvent<HTMLDivElement | HTMLAnchorElement>,\n    index: number,\n  ) => void;\n  /** A Jss Object used to override or extend the styles applied. */\n  classes?: HvScrollToVerticalClasses;\n}\n\n/**\n * The vertical scroll to element can be used to quickly navigate in a page.\n */\nexport const HvScrollToVertical = (props: HvScrollToVerticalProps) => {\n  const {\n    id,\n    defaultSelectedIndex = 0,\n    scrollElementId,\n    // @ts-ignore\n    href = true,\n    navigationMode = href ? \"push\" : \"none\",\n    relativeLinks = false,\n    onChange,\n    onClick,\n    onEnter,\n    className,\n    classes: classesProp,\n    options,\n    offset = 0,\n    position = \"relative\",\n    tooltipPosition = \"left\",\n    style,\n    ...others\n  } = useDefaultProps(\"HvScrollToVertical\", props);\n\n  const { classes, cx } = useClasses(classesProp);\n\n  const [selectedIndex, setScrollTo, elements] = useScrollTo(\n    defaultSelectedIndex,\n    scrollElementId,\n    navigationMode,\n    relativeLinks,\n    offset,\n    options,\n    onChange,\n  );\n\n  const tabs = elements.map((option, index) => (\n    <HvVerticalScrollListItem\n      id={setId(id, `item-${index}`)}\n      onClick={(event) => {\n        event.preventDefault();\n\n        setScrollTo(event, option.value, index, () => onChange?.(event, index));\n        onClick?.(event, index);\n      }}\n      onKeyDown={(event) => {\n        if (isKey(event, \"Enter\") !== true) return;\n        event.preventDefault();\n\n        setScrollTo(event, option.value, index, () => onChange?.(event, index));\n        onEnter?.(event, index);\n      }}\n      href={navigationMode !== \"none\" ? option.href : undefined}\n      tooltipPlacement={tooltipPosition}\n      selected={selectedIndex === index}\n      key={option.key || option.label}\n      label={option.label}\n    />\n  ));\n\n  const positionOffset = calculateOffset(options.length);\n\n  return (\n    <ol\n      className={cx(\n        classes.root,\n        {\n          [classes.positionFixed]: position === \"fixed\",\n          [classes.positionAbsolute]: position === \"absolute\",\n        },\n        className,\n      )}\n      style={{ top: `calc(50% - ${positionOffset}px)`, ...style }}\n      id={id}\n      {...others}\n    >\n      {tabs}\n    </ol>\n  );\n};\n"],"names":[],"mappings":";;;;;;;;AAyGa,MAAA,qBAAqB,CAAC,UAAmC;AAC9D,QAAA;AAAA,IACJ;AAAA,IACA,uBAAuB;AAAA,IACvB;AAAA;AAAA,IAEA,OAAO;AAAA,IACP,iBAAiB,OAAO,SAAS;AAAA,IACjC,gBAAgB;AAAA,IAChB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,SAAS;AAAA,IACT;AAAA,IACA,SAAS;AAAA,IACT,WAAW;AAAA,IACX,kBAAkB;AAAA,IAClB;AAAA,IACA,GAAG;AAAA,EAAA,IACD,gBAAgB,sBAAsB,KAAK;AAE/C,QAAM,EAAE,SAAS,OAAO,WAAW,WAAW;AAE9C,QAAM,CAAC,eAAe,aAAa,QAAQ,IAAI;AAAA,IAC7C;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAEA,QAAM,OAAO,SAAS,IAAI,CAAC,QAAQ,UACjC;AAAA,IAAC;AAAA,IAAA;AAAA,MACC,IAAI,MAAM,IAAI,QAAQ,KAAK,EAAE;AAAA,MAC7B,SAAS,CAAC,UAAU;AAClB,cAAM,eAAe;AAET,oBAAA,OAAO,OAAO,OAAO,OAAO,MAAM,WAAW,OAAO,KAAK,CAAC;AACtE,kBAAU,OAAO,KAAK;AAAA,MACxB;AAAA,MACA,WAAW,CAAC,UAAU;AACpB,YAAI,MAAM,OAAO,OAAO,MAAM,KAAM;AACpC,cAAM,eAAe;AAET,oBAAA,OAAO,OAAO,OAAO,OAAO,MAAM,WAAW,OAAO,KAAK,CAAC;AACtE,kBAAU,OAAO,KAAK;AAAA,MACxB;AAAA,MACA,MAAM,mBAAmB,SAAS,OAAO,OAAO;AAAA,MAChD,kBAAkB;AAAA,MAClB,UAAU,kBAAkB;AAAA,MAE5B,OAAO,OAAO;AAAA,IAAA;AAAA,IADT,OAAO,OAAO,OAAO;AAAA,EAAA,CAG7B;AAEK,QAAA,iBAAiB,gBAAgB,QAAQ,MAAM;AAGnD,SAAA;AAAA,IAAC;AAAA,IAAA;AAAA,MACC,WAAW;AAAA,QACT,QAAQ;AAAA,QACR;AAAA,UACE,CAAC,QAAQ,aAAa,GAAG,aAAa;AAAA,UACtC,CAAC,QAAQ,gBAAgB,GAAG,aAAa;AAAA,QAC3C;AAAA,QACA;AAAA,MACF;AAAA,MACA,OAAO,EAAE,KAAK,cAAc,cAAc,OAAO,GAAG,MAAM;AAAA,MAC1D;AAAA,MACC,GAAG;AAAA,MAEH,UAAA;AAAA,IAAA;AAAA,EACH;AAEJ;"}