{"version":3,"file":"Banner.js","sources":["../../../src/Banner/Banner.tsx"],"sourcesContent":["import { forwardRef, useCallback } from \"react\";\nimport Slide, { SlideProps } from \"@mui/material/Slide\";\nimport Snackbar, {\n  SnackbarProps as MuiSnackbarProps,\n  SnackbarOrigin,\n} from \"@mui/material/Snackbar\";\nimport {\n  useDefaultProps,\n  type ExtractNames,\n} from \"@hitachivantara/uikit-react-utils\";\n\nimport { HvActionsGenericProps } from \"../ActionsGeneric\";\nimport { setId } from \"../utils/setId\";\nimport { staticClasses, useClasses } from \"./Banner.styles\";\nimport {\n  HvBannerContent,\n  HvBannerContentProps,\n} from \"./BannerContent/BannerContent\";\nimport { HvBannerActionPosition, HvBannerVariant } from \"./types\";\n\nexport { staticClasses as bannerClasses };\n\nexport type HvBannerClasses = ExtractNames<typeof useClasses>;\n\nexport interface HvBannerProps\n  extends Omit<MuiSnackbarProps, \"anchorOrigin\" | \"classes\" | \"onClose\"> {\n  /** If true, the snackbar is open. */\n  open: boolean;\n  /**\n   * Callback fired when the component requests to be closed.\n   * Typically onClose is used to set state in the parent component, which is used to control the Snackbar open prop.\n   * The reason parameter can optionally be used to control the response to onClose, for example ignoring click away.\n   * */\n  onClose?: (event: React.MouseEvent<HTMLButtonElement>) => void;\n  /** The message to display. */\n  label?: string;\n  /** The anchor of the Snackbar. */\n  anchorOrigin?: \"top\" | \"bottom\";\n  /** Variant of the snackbar. */\n  variant?: HvBannerVariant;\n  /** Custom icon to replace the variant default. */\n  customIcon?: React.ReactNode;\n  /** Controls if the associated icon to the variant should be shown. */\n  showIcon?: boolean;\n  /** Actions to display on the right side. */\n  actions?: HvActionsGenericProps[\"actions\"];\n  /**\n   * The callback function called when an action is triggered, receiving `action` as parameter.\n   *\n   * @deprecated Use `onAction` instead.\n   * */\n  actionsCallback?: HvActionsGenericProps[\"actionsCallback\"];\n  /** The callback function called when an action is triggered, receiving `action` as parameter. */\n  onAction?: HvActionsGenericProps[\"onAction\"];\n  /** The position property of the header. */\n  actionsPosition?: HvBannerActionPosition;\n  /** How much the transition animation last in milliseconds, if 0 no animation is played. */\n  transitionDuration?: number;\n  /** Direction of slide transition. */\n  transitionDirection?: \"up\" | \"down\" | \"left\" | \"right\";\n  /** The container the banner should slide from. */\n  container?: SlideProps[\"container\"];\n  /** Offset from top/bottom of the page, in px. Defaults to 60px. */\n  offset?: number;\n  /** Props to pass down to the banner Wrapper. An object `actionProps` can be included to be passed as others to actions. */\n  bannerContentProps?: HvBannerContentProps;\n  /** A Jss Object used to override or extend the styles applied to the component. */\n  classes?: HvBannerClasses;\n  /** @ignore */\n  ref?: MuiSnackbarProps[\"ref\"];\n}\n\n/**\n * A Banner displays an important and succinct message. It can also provide actions for the user to address, or dismiss.\n * It requires a user action, for it to be dismissed. Banners should appear at the top of the screen, below a top app bar.\n */\nexport const HvBanner = forwardRef<\n  React.ComponentRef<typeof Snackbar>,\n  HvBannerProps\n>(function HvBanner(props, ref) {\n  const {\n    id,\n    classes: classesProp,\n    className,\n    open,\n    onClose,\n    anchorOrigin = \"top\",\n    variant = \"default\",\n    transitionDuration = 300,\n    transitionDirection = \"down\",\n    container,\n    showIcon = false,\n    customIcon,\n    actions,\n    actionsCallback, // TODO - remove in v6\n    onAction,\n    actionsPosition = \"auto\",\n    label,\n    offset = 60,\n    bannerContentProps,\n    ...others\n  } = useDefaultProps(\"HvBanner\", props);\n  const { classes, cx } = useClasses(classesProp);\n\n  const anchorOriginBanner: SnackbarOrigin = {\n    horizontal: \"center\",\n    vertical: anchorOrigin,\n  };\n\n  const SlideTransition = useCallback<\n    NonNullable<MuiSnackbarProps[\"TransitionComponent\"]>\n  >(\n    (properties) => (\n      <Slide\n        {...properties}\n        container={container}\n        direction={transitionDirection}\n      />\n    ),\n    [container, transitionDirection],\n  );\n\n  return (\n    <Snackbar\n      ref={ref}\n      id={id}\n      open={open}\n      className={className}\n      classes={{\n        root: cx(classes.root, { [classes.rootClosed]: !open }),\n        anchorOriginTopCenter: classes.anchorOriginTopCenter,\n        anchorOriginBottomCenter: classes.anchorOriginBottomCenter,\n      }}\n      style={{ [anchorOrigin]: offset }}\n      anchorOrigin={anchorOriginBanner}\n      TransitionComponent={SlideTransition}\n      transitionDuration={transitionDuration}\n      {...others}\n    >\n      <HvBannerContent\n        id={setId(id, \"content\")}\n        content={label}\n        variant={variant}\n        customIcon={customIcon}\n        showIcon={showIcon}\n        actions={actions}\n        actionsCallback={actionsCallback}\n        onAction={onAction}\n        actionsPosition={actionsPosition}\n        onClose={onClose}\n        {...bannerContentProps}\n      />\n    </Snackbar>\n  );\n});\n"],"names":["HvBanner"],"mappings":";;;;;;;;;AA4EO,MAAM,WAAW,WAGtB,SAASA,UAAS,OAAO,KAAK;AACxB,QAAA;AAAA,IACJ;AAAA,IACA,SAAS;AAAA,IACT;AAAA,IACA;AAAA,IACA;AAAA,IACA,eAAe;AAAA,IACf,UAAU;AAAA,IACV,qBAAqB;AAAA,IACrB,sBAAsB;AAAA,IACtB;AAAA,IACA,WAAW;AAAA,IACX;AAAA,IACA;AAAA,IACA;AAAA;AAAA,IACA;AAAA,IACA,kBAAkB;AAAA,IAClB;AAAA,IACA,SAAS;AAAA,IACT;AAAA,IACA,GAAG;AAAA,EAAA,IACD,gBAAgB,YAAY,KAAK;AACrC,QAAM,EAAE,SAAS,OAAO,WAAW,WAAW;AAE9C,QAAM,qBAAqC;AAAA,IACzC,YAAY;AAAA,IACZ,UAAU;AAAA,EACZ;AAEA,QAAM,kBAAkB;AAAA,IAGtB,CAAC,eACC;AAAA,MAAC;AAAA,MAAA;AAAA,QACE,GAAG;AAAA,QACJ;AAAA,QACA,WAAW;AAAA,MAAA;AAAA,IACb;AAAA,IAEF,CAAC,WAAW,mBAAmB;AAAA,EACjC;AAGE,SAAA;AAAA,IAAC;AAAA,IAAA;AAAA,MACC;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,SAAS;AAAA,QACP,MAAM,GAAG,QAAQ,MAAM,EAAE,CAAC,QAAQ,UAAU,GAAG,CAAC,MAAM;AAAA,QACtD,uBAAuB,QAAQ;AAAA,QAC/B,0BAA0B,QAAQ;AAAA,MACpC;AAAA,MACA,OAAO,EAAE,CAAC,YAAY,GAAG,OAAO;AAAA,MAChC,cAAc;AAAA,MACd,qBAAqB;AAAA,MACrB;AAAA,MACC,GAAG;AAAA,MAEJ,UAAA;AAAA,QAAC;AAAA,QAAA;AAAA,UACC,IAAI,MAAM,IAAI,SAAS;AAAA,UACvB,SAAS;AAAA,UACT;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACC,GAAG;AAAA,QAAA;AAAA,MAAA;AAAA,IACN;AAAA,EACF;AAEJ,CAAC;"}