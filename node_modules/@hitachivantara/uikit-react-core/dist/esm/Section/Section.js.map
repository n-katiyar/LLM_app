{"version":3,"file":"Section.js","sources":["../../../src/Section/Section.tsx"],"sourcesContent":["import { forwardRef } from \"react\";\nimport { DropDownXS } from \"@hitachivantara/uikit-react-icons\";\nimport {\n  useDefaultProps,\n  type ExtractNames,\n} from \"@hitachivantara/uikit-react-utils\";\n\nimport { HvButton, HvButtonProps } from \"../Button\";\nimport { useExpandable } from \"../hooks/useExpandable\";\nimport { HvBaseProps } from \"../types/generic\";\nimport { staticClasses, useClasses } from \"./Section.styles\";\n\nexport { staticClasses as sectionClasses };\n\nexport type HvSectionClasses = ExtractNames<typeof useClasses>;\n\nexport interface HvSectionProps\n  extends Omit<HvBaseProps<HTMLDivElement>, \"title\" | \"onToggle\"> {\n  /** The title of the section */\n  title?: React.ReactNode;\n  /** Whether or not the section is expandable.  */\n  expandable?: boolean;\n  /** Whether the section is open or not, if this property is defined the accordion must be fully controlled. */\n  expanded?: boolean;\n  /** When uncontrolled, defines the initial expanded state. */\n  defaultExpanded?: boolean;\n  /** Section actions */\n  actions?: React.ReactNode;\n  /** Section onExpand callback */\n  onToggle?: (\n    event: React.MouseEvent<HTMLButtonElement>,\n    open: boolean,\n  ) => void;\n  /** Props to be passed to the expand button */\n  expandButtonProps?: HvButtonProps;\n  /** Determines whether or not the header has a shadow on the bottom border. */\n  raisedHeader?: boolean;\n  /** A Jss Object used to override or extend the styles applied to the empty state component. */\n  classes?: HvSectionClasses;\n  /** Content container ref. */\n  contentRef?: React.Ref<HTMLDivElement>;\n}\n\n/**\n * Sections allow grouping information on a page under the same topic.\n */\nexport const HvSection = forwardRef<HTMLDivElement, HvSectionProps>(\n  function HvSection(props, ref) {\n    const {\n      id,\n      classes: classesProp,\n      className,\n      title,\n      expandable,\n      expanded,\n      defaultExpanded = true,\n      actions,\n      onToggle,\n      expandButtonProps,\n      raisedHeader,\n      contentRef,\n      children,\n      ...others\n    } = useDefaultProps(\"HvSection\", props);\n    const { classes, cx } = useClasses(classesProp);\n\n    const { isOpen, toggleOpen, buttonProps, regionProps } = useExpandable({\n      id,\n      expanded,\n      defaultExpanded,\n    });\n\n    const hasHeader = title || actions || expandable;\n\n    return (\n      <div\n        ref={ref}\n        id={id}\n        className={cx(classes.root, className, {\n          [classes.raisedHeader]: raisedHeader && isOpen,\n        })}\n        {...others}\n      >\n        {hasHeader && (\n          <div className={classes.header}>\n            {expandable && (\n              <HvButton\n                icon\n                onClick={(event) => {\n                  toggleOpen();\n                  onToggle?.(event, !isOpen);\n                }}\n                aria-label={isOpen ? \"Collapse\" : \"Expand\"}\n                {...buttonProps}\n                {...expandButtonProps}\n              >\n                <DropDownXS rotate={isOpen} />\n              </HvButton>\n            )}\n            {title}\n            <div className={classes.actions}>{actions}</div>\n          </div>\n        )}\n        <div\n          ref={contentRef}\n          hidden={!isOpen}\n          className={cx(classes.content, {\n            [classes.hidden]: expandable && !isOpen,\n            [classes.spaceTop]: !hasHeader,\n            [classes.hasHeader]: hasHeader,\n          })}\n          {...(expandable && regionProps)}\n        >\n          {children}\n        </div>\n      </div>\n    );\n  },\n);\n"],"names":["HvSection"],"mappings":";;;;;;;;AA8CO,MAAM,YAAY;AAAA,EACvB,SAASA,WAAU,OAAO,KAAK;AACvB,UAAA;AAAA,MACJ;AAAA,MACA,SAAS;AAAA,MACT;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,kBAAkB;AAAA,MAClB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,GAAG;AAAA,IAAA,IACD,gBAAgB,aAAa,KAAK;AACtC,UAAM,EAAE,SAAS,OAAO,WAAW,WAAW;AAE9C,UAAM,EAAE,QAAQ,YAAY,aAAa,YAAA,IAAgB,cAAc;AAAA,MACrE;AAAA,MACA;AAAA,MACA;AAAA,IAAA,CACD;AAEK,UAAA,YAAY,SAAS,WAAW;AAGpC,WAAA;AAAA,MAAC;AAAA,MAAA;AAAA,QACC;AAAA,QACA;AAAA,QACA,WAAW,GAAG,QAAQ,MAAM,WAAW;AAAA,UACrC,CAAC,QAAQ,YAAY,GAAG,gBAAgB;AAAA,QAAA,CACzC;AAAA,QACA,GAAG;AAAA,QAEH,UAAA;AAAA,UAAA,aACE,qBAAA,OAAA,EAAI,WAAW,QAAQ,QACrB,UAAA;AAAA,YACC,cAAA;AAAA,cAAC;AAAA,cAAA;AAAA,gBACC,MAAI;AAAA,gBACJ,SAAS,CAAC,UAAU;AACP,6BAAA;AACA,6BAAA,OAAO,CAAC,MAAM;AAAA,gBAC3B;AAAA,gBACA,cAAY,SAAS,aAAa;AAAA,gBACjC,GAAG;AAAA,gBACH,GAAG;AAAA,gBAEJ,UAAA,oBAAC,YAAW,EAAA,QAAQ,OAAQ,CAAA;AAAA,cAAA;AAAA,YAC9B;AAAA,YAED;AAAA,YACA,oBAAA,OAAA,EAAI,WAAW,QAAQ,SAAU,UAAQ,QAAA,CAAA;AAAA,UAAA,GAC5C;AAAA,UAEF;AAAA,YAAC;AAAA,YAAA;AAAA,cACC,KAAK;AAAA,cACL,QAAQ,CAAC;AAAA,cACT,WAAW,GAAG,QAAQ,SAAS;AAAA,gBAC7B,CAAC,QAAQ,MAAM,GAAG,cAAc,CAAC;AAAA,gBACjC,CAAC,QAAQ,QAAQ,GAAG,CAAC;AAAA,gBACrB,CAAC,QAAQ,SAAS,GAAG;AAAA,cAAA,CACtB;AAAA,cACA,GAAI,cAAc;AAAA,cAElB;AAAA,YAAA;AAAA,UAAA;AAAA,QACH;AAAA,MAAA;AAAA,IACF;AAAA,EAAA;AAGN;"}