{"version":3,"file":"focusableElementFinder.js","sources":["../../../src/utils/focusableElementFinder.ts"],"sourcesContent":["const SELECTORS =\n  'input, button, select, textarea, a[href], [tabindex]:not([tabindex=\"-1\"])';\n\n/** Gets the list of focusable elements. */\nexport const getFocusableList = (node: any) =>\n  node?.querySelectorAll(SELECTORS) || [];\n\n/** Auxiliary function to find adjacent nodes to focus. */\nexport const getPrevNextFocus = (nodeId?: string) => {\n  const nodes = getFocusableList(document);\n\n  const nbNodes = nodes.length;\n  let index = 0;\n  for (; index < nbNodes; index += 1) {\n    if (nodes[index].id === nodeId) {\n      break;\n    }\n  }\n  return {\n    nextFocus: nodes[index + 1 > nbNodes - 1 ? 0 : index + 1],\n    prevFocus: nodes[index - 1 < 0 ? nbNodes - 1 : index - 1],\n  };\n};\n\n/** Get the first and last focusable element from a node. */\nexport const getFirstAndLastFocus = (node: any) => {\n  const focusableList = getFocusableList(node);\n\n  return {\n    first: focusableList[0] || null,\n    last: focusableList[focusableList.length - 1] || null,\n  };\n};\n\nexport default getPrevNextFocus;\n"],"names":[],"mappings":"AAAA,MAAM,YACJ;AAGK,MAAM,mBAAmB,CAAC,SAC/B,MAAM,iBAAiB,SAAS,KAAK,CAAA;AAG1B,MAAA,mBAAmB,CAAC,WAAoB;AAC7C,QAAA,QAAQ,iBAAiB,QAAQ;AAEvC,QAAM,UAAU,MAAM;AACtB,MAAI,QAAQ;AACL,SAAA,QAAQ,SAAS,SAAS,GAAG;AAClC,QAAI,MAAM,KAAK,EAAE,OAAO,QAAQ;AAC9B;AAAA,IAAA;AAAA,EACF;AAEK,SAAA;AAAA,IACL,WAAW,MAAM,QAAQ,IAAI,UAAU,IAAI,IAAI,QAAQ,CAAC;AAAA,IACxD,WAAW,MAAM,QAAQ,IAAI,IAAI,UAAU,IAAI,QAAQ,CAAC;AAAA,EAC1D;AACF;AAGa,MAAA,uBAAuB,CAAC,SAAc;AAC3C,QAAA,gBAAgB,iBAAiB,IAAI;AAEpC,SAAA;AAAA,IACL,OAAO,cAAc,CAAC,KAAK;AAAA,IAC3B,MAAM,cAAc,cAAc,SAAS,CAAC,KAAK;AAAA,EACnD;AACF;"}