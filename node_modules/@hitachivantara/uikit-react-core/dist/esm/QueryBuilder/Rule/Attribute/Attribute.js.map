{"version":3,"file":"Attribute.js","sources":["../../../../../src/QueryBuilder/Rule/Attribute/Attribute.tsx"],"sourcesContent":["import { memo, useMemo } from \"react\";\n\nimport { HvDropdown } from \"../../../Dropdown\";\nimport { useQueryBuilderContext } from \"../../Context\";\nimport { isBigList } from \"../../utils\";\n\nexport interface AttributeProps {\n  id: React.Key;\n  attribute?: string;\n  disabled?: boolean;\n  isInvalid?: boolean;\n}\n\nexport const Attribute = ({\n  id,\n  attribute,\n  disabled,\n  isInvalid,\n}: AttributeProps) => {\n  const { dispatchAction, attributes, operators, labels, readOnly } =\n    useQueryBuilderContext();\n\n  const values = useMemo(() => {\n    if (!attributes) return [];\n\n    return Object.keys(attributes).map((key) => ({\n      id: key,\n      label: attributes[key].label,\n      selected: key === attribute,\n    }));\n  }, [attributes, attribute]);\n\n  const currentType =\n    attribute != null && attributes ? attributes[attribute]?.type : null;\n\n  return (\n    <HvDropdown\n      singleSelectionToggle={false}\n      label={labels.rule.attribute.label}\n      placeholder={labels.rule.attribute.placeholder}\n      values={values}\n      disabled={disabled}\n      readOnly={readOnly}\n      status={isInvalid ? \"invalid\" : \"valid\"}\n      statusMessage={labels.rule.attribute.exists}\n      onChange={(selected) => {\n        if (selected) {\n          const attributeId = selected.id;\n\n          const type =\n            attributes && attributeId && attributes[attributeId]?.type;\n          const typeOperators = type ? operators[type] : undefined;\n\n          let operator;\n          if (currentType === type) {\n            operator = undefined;\n          } else if (typeOperators?.length === 1) {\n            operator = typeOperators[0].operator;\n          } else {\n            operator = null;\n          }\n\n          // default boolean attributes to true\n          const value = type === \"boolean\" ? true : undefined;\n\n          dispatchAction({\n            type: \"set-attribute\",\n            id,\n            attribute: attributeId?.toString(),\n            operator,\n            value,\n          });\n        } else {\n          dispatchAction({ type: \"set-attribute\", id, attribute: null });\n        }\n      }}\n      showSearch={isBigList(values)}\n      {...(isBigList(values) && { virtualized: true, height: 300 })}\n    />\n  );\n};\n\nexport default memo(Attribute);\n"],"names":[],"mappings":";;;;;AAaO,MAAM,YAAY,CAAC;AAAA,EACxB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,MAAsB;AACpB,QAAM,EAAE,gBAAgB,YAAY,WAAW,QAAQ,aACrD,uBAAuB;AAEnB,QAAA,SAAS,QAAQ,MAAM;AACvB,QAAA,CAAC,WAAY,QAAO,CAAC;AAEzB,WAAO,OAAO,KAAK,UAAU,EAAE,IAAI,CAAC,SAAS;AAAA,MAC3C,IAAI;AAAA,MACJ,OAAO,WAAW,GAAG,EAAE;AAAA,MACvB,UAAU,QAAQ;AAAA,IAAA,EAClB;AAAA,EAAA,GACD,CAAC,YAAY,SAAS,CAAC;AAE1B,QAAM,cACJ,aAAa,QAAQ,aAAa,WAAW,SAAS,GAAG,OAAO;AAGhE,SAAA;AAAA,IAAC;AAAA,IAAA;AAAA,MACC,uBAAuB;AAAA,MACvB,OAAO,OAAO,KAAK,UAAU;AAAA,MAC7B,aAAa,OAAO,KAAK,UAAU;AAAA,MACnC;AAAA,MACA;AAAA,MACA;AAAA,MACA,QAAQ,YAAY,YAAY;AAAA,MAChC,eAAe,OAAO,KAAK,UAAU;AAAA,MACrC,UAAU,CAAC,aAAa;AACtB,YAAI,UAAU;AACZ,gBAAM,cAAc,SAAS;AAE7B,gBAAM,OACJ,cAAc,eAAe,WAAW,WAAW,GAAG;AACxD,gBAAM,gBAAgB,OAAO,UAAU,IAAI,IAAI;AAE3C,cAAA;AACJ,cAAI,gBAAgB,MAAM;AACb,uBAAA;AAAA,UAAA,WACF,eAAe,WAAW,GAAG;AAC3B,uBAAA,cAAc,CAAC,EAAE;AAAA,UAAA,OACvB;AACM,uBAAA;AAAA,UAAA;AAIP,gBAAA,QAAQ,SAAS,YAAY,OAAO;AAE3B,yBAAA;AAAA,YACb,MAAM;AAAA,YACN;AAAA,YACA,WAAW,aAAa,SAAS;AAAA,YACjC;AAAA,YACA;AAAA,UAAA,CACD;AAAA,QAAA,OACI;AACL,yBAAe,EAAE,MAAM,iBAAiB,IAAI,WAAW,MAAM;AAAA,QAAA;AAAA,MAEjE;AAAA,MACA,YAAY,UAAU,MAAM;AAAA,MAC3B,GAAI,UAAU,MAAM,KAAK,EAAE,aAAa,MAAM,QAAQ,IAAI;AAAA,IAAA;AAAA,EAC7D;AAEJ;AAEe,KAAK,SAAS;"}