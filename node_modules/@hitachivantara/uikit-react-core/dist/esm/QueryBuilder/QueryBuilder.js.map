{"version":3,"file":"QueryBuilder.js","sources":["../../../src/QueryBuilder/QueryBuilder.tsx"],"sourcesContent":["import { useEffect, useMemo, useReducer, useRef, useState } from \"react\";\nimport {\n  useDefaultProps,\n  type ExtractNames,\n} from \"@hitachivantara/uikit-react-utils\";\n\nimport { useControlled } from \"../hooks/useControlled\";\nimport { useLabels } from \"../hooks/useLabels\";\nimport { DeepPartial } from \"../types/generic\";\nimport { isEqual } from \"../utils/helpers\";\nimport { ConfirmationDialog } from \"./ConfirmationDialog\";\nimport {\n  defaultCombinators,\n  defaultLabels,\n  defaultOperators,\n  HvQueryBuilderProvider,\n} from \"./Context\";\nimport { staticClasses, useClasses } from \"./QueryBuilder.styles\";\nimport { RuleGroup } from \"./RuleGroup\";\nimport {\n  AskAction,\n  defaultRendererKey,\n  HvQueryBuilderAttribute,\n  HvQueryBuilderLabels,\n  HvQueryBuilderQuery,\n  HvQueryBuilderQueryCombinator,\n  HvQueryBuilderQueryOperator,\n  HvQueryBuilderRenderers,\n} from \"./types\";\nimport { clearNodeIds, emptyGroup, setNodeIds } from \"./utils\";\nimport reducer from \"./utils/reducer\";\n\nexport { staticClasses as queryBuilderClasses };\n\nexport type HvQueryBuilderClasses = ExtractNames<typeof useClasses>;\n\nexport interface HvQueryBuilderProps {\n  /** The query attribute types. */\n  attributes?: Record<string, HvQueryBuilderAttribute>;\n  /** The query rules operators by attribute type and combinator. */\n  operators?: Record<string, HvQueryBuilderQueryOperator[]>;\n  /** The query combinators operands. */\n  combinators?: HvQueryBuilderQueryCombinator[];\n  /** The query when the component is controlled. */\n  value?: HvQueryBuilderQuery;\n  /** The initial query when the component is uncontrolled. */\n  defaultValue?: HvQueryBuilderQuery;\n  /**\n   * The initial query when the component is uncontrolled.\n   *\n   * @deprecated Use `defaultValue` instead.\n   * */\n  query?: HvQueryBuilderQuery; // TODO - remove in v6\n  /** Callback fired when the query changes. */\n  onChange?: (value: HvQueryBuilderQuery) => void;\n  /** Max depth of nested query groups. */\n  maxDepth?: number;\n  /** Object containing all the labels. */\n  labels?: DeepPartial<HvQueryBuilderLabels>;\n  /** Whether the query builder is in read-only mode. */\n  readOnly?: boolean;\n  /**\n   * Operators that should use the empty value renderer when selected.\n   *\n   * When one of the listed operators is selected, the rule value is reset and an empty component is rendered.\n   * This property takes priority over `renderers`.\n   *\n   * @default [\"Empty\", \"IsNotEmpty\"]\n   * */\n  emptyRenderer?: string[];\n  /** Custom renderers for the rules' value. */\n  renderers?: HvQueryBuilderRenderers;\n  /** Whether to opt-out of the confirmation dialogs shown before removing rules and rule groups. @default false. */\n  disableConfirmation?: boolean;\n  /**\n   * Whether to allow attributes to be repeated in AND conditions.\n   * By default an error is shown when the selected attribute already exists in an AND conditions.\n   * @default false\n   */\n  allowRepeatedAttributes?: boolean; // TODO - review in v6: should we even have this validation? if needed, we should review its behavior.\n  /** A Jss Object used to override or extend the styles applied. */\n  classes?: HvQueryBuilderClasses;\n}\n\n// TODO - v6\n// - \"range\", \"Empty\", and \"IsNotEmpty\" operators with internal/built-in logic\n// - review query builder validation\n\n// Notes:\n// Deep clone is needed throughout the component to avoid undesired mutations in props, state, and ref values\n\n/**\n * This component allows you to create conditions and group them using logical operators.\n * It outputs a structured set of rules which can be easily parsed to create SQL/NoSQL/whatever queries.\n *\n * Take a look at the [usage page](https://lumada-design.github.io/uikit/master/?path=/docs/widgets-query-builder-usage--docs) to learn more about this component.\n */\nexport const HvQueryBuilder = (props: HvQueryBuilderProps) => {\n  const {\n    attributes,\n    renderers,\n    query: queryProp, // TODO - remove in v6\n    value,\n    defaultValue,\n    onChange,\n    disableConfirmation = false,\n    allowRepeatedAttributes = false,\n    operators = defaultOperators,\n    combinators = defaultCombinators,\n    maxDepth = 1,\n    labels: labelsProp,\n    readOnly = false,\n    emptyRenderer = [\"Empty\", \"IsNotEmpty\"],\n    classes: classesProp,\n  } = useDefaultProps(\"HvQueryBuilder\", props);\n\n  if (\n    import.meta.env.DEV &&\n    [\n      Object.values(attributes || {}).map(({ type }) => type),\n      Object.values(operators || {}).flatMap((ops) =>\n        ops.map(({ operator }) => operator),\n      ),\n    ]\n      .flat()\n      ?.find((key) => key === defaultRendererKey)\n  ) {\n    // eslint-disable-next-line no-console\n    console.error(\n      `${defaultRendererKey} is a restricted key and shouldn't be used as an attribute or operator type. Update the key to avoid unexpected behaviors.`,\n    );\n  }\n\n  const { classes } = useClasses(classesProp);\n\n  const currentAttributes = useRef<HvQueryBuilderProps[\"attributes\"] | null>(\n    null,\n  );\n\n  const controlled = useRef(value != null);\n  const initialQuery = useRef(\n    value ?? defaultValue ?? queryProp ?? emptyGroup(),\n  );\n  const [query, setQuery] = useControlled(value, initialQuery.current);\n  const prevQuery = useRef(query);\n\n  const [pendingAction, setPendingAction] = useState<AskAction>();\n  const [initialState, setInitialState] = useState(true);\n\n  const [state, dispatchAction] = useReducer(\n    reducer,\n    setNodeIds(structuredClone(initialQuery.current)),\n  );\n\n  const labels = useLabels(defaultLabels, labelsProp);\n\n  const contextValue = useMemo(\n    () => ({\n      dispatchAction,\n      askAction: setPendingAction,\n      attributes,\n      operators,\n      combinators,\n      maxDepth,\n      labels,\n      initialTouched: initialState,\n      readOnly,\n      renderers,\n      disableConfirmation,\n      allowRepeatedAttributes,\n      emptyRenderer,\n    }),\n    [\n      attributes,\n      operators,\n      combinators,\n      maxDepth,\n      labels,\n      readOnly,\n      initialState,\n      renderers,\n      disableConfirmation,\n      emptyRenderer,\n      allowRepeatedAttributes,\n    ],\n  );\n\n  // Keep track of attributes\n  useEffect(() => {\n    if (currentAttributes.current == null) {\n      // First run, nothing to do\n      currentAttributes.current = attributes;\n    } else if (currentAttributes.current !== attributes) {\n      // Attributes changed. The existing query is almost certainly invalid, so reset it\n      currentAttributes.current = attributes;\n      dispatchAction({ type: \"reset-query\" });\n    }\n  }, [attributes]);\n\n  useEffect(() => {\n    // \"value\" prop was updated by user (when controlled)\n    if (!isEqual(prevQuery.current, query)) {\n      dispatchAction({\n        type: \"set-query\",\n        query: setNodeIds(structuredClone(query), state),\n      });\n      prevQuery.current = query;\n    } else if (\n      !isEqual(\n        clearNodeIds(structuredClone(state)),\n        clearNodeIds(structuredClone(query)),\n      )\n    ) {\n      setInitialState(false);\n\n      // TODO - remove \"true\" from clearNodeIds in v6 (only keep else statement)\n      // To avoid breaking changes, clearNodeIds will delete all ids provided by the user when uncontrolled\n      // In the future if the user provides ids, it doesn't make sense to remove them with onChange\n      if (!controlled.current) {\n        onChange?.(\n          clearNodeIds(structuredClone(state), true) as HvQueryBuilderQuery,\n        );\n      } else {\n        // When controlled, the ids provided by the user are not removed. Only the auto generated ones.\n        onChange?.(clearNodeIds(structuredClone(state)) as HvQueryBuilderQuery);\n      }\n\n      prevQuery.current = state;\n      // This will only run if uncontrolled\n      setQuery(state);\n    }\n  }, [onChange, query, setQuery, state]);\n\n  const handleConfirm = () => {\n    if (pendingAction) {\n      setPendingAction(undefined);\n      pendingAction.actions.forEach((action) => dispatchAction(action));\n    }\n  };\n\n  const handleCancel = () => {\n    setPendingAction(undefined);\n  };\n\n  return (\n    <HvQueryBuilderProvider value={contextValue}>\n      <RuleGroup\n        level={0}\n        id={state.id}\n        combinator={state.combinator}\n        rules={state.rules}\n        classes={classes}\n      />\n      <ConfirmationDialog\n        isOpen={pendingAction != null}\n        onConfirm={handleConfirm}\n        onCancel={handleCancel}\n        title={pendingAction?.dialog.dialogTitle}\n        message={pendingAction?.dialog.dialogMessage}\n        confirmButtonLabel={pendingAction?.dialog.dialogConfirm}\n        cancelButtonLabel={pendingAction?.dialog.dialogCancel}\n        closeButtonTooltip={pendingAction?.dialog.dialogCloseTooltip}\n      />\n    </HvQueryBuilderProvider>\n  );\n};\n"],"names":[],"mappings":"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"}