{"version":3,"file":"Provider.js","sources":["../../../src/providers/Provider.tsx"],"sourcesContent":["import { useMemo } from \"react\";\nimport createCache, { EmotionCache } from \"@emotion/cache\";\nimport {\n  CacheProvider,\n  ClassNames,\n  css as cssReact,\n  Global,\n} from \"@emotion/react\";\nimport {\n  CssBaseline,\n  CssScopedBaseline,\n  getThemesVars,\n  HvThemeStructure,\n} from \"@hitachivantara/uikit-styles\";\n\nimport { useUniqueId } from \"../hooks/useUniqueId\";\nimport { HvTheme } from \"../types/theme\";\nimport { getElementById } from \"../utils/document\";\nimport { processThemes } from \"../utils/theme\";\nimport {\n  defaultCacheKey,\n  defaultEmotionCache,\n  HvThemeProvider,\n} from \"./ThemeProvider\";\n\n// Provider props\nexport interface HvProviderProps {\n  /**\n   * Your component tree.\n   */\n  children?: React.ReactNode;\n  /**\n   * Id of your root element.\n   */\n  rootElementId?: string;\n  /**\n   * By default the baseline styles are applied globally, `global`, to the application for the UI Kit components to work properly.\n   * If you need to scope the baseline styles to avoid styling conflicts, you can set this property to `scoped`.\n   * To scope the baseline to your root, you need to add the `rootElementId` property.\n   * If the `rootElementId` property is not set, the baseline will be scoped to a new container, `hv-uikit-scoped-root*`, created around your content.\n   * If you are providing your own baseline styles, you can set this property to `none` to disable the baseline styles.\n   */\n  cssBaseline?: \"global\" | \"scoped\" | \"none\";\n  /**\n   * By default the theme styles are applied globally, `global`, to the application.\n   * If you need to scope the theme styles to avoid styling conflicts, you can set this property to `scoped`.\n   * To scope the theme to your root, you need to add the `rootElementId` property.\n   * If the `rootElementId` property is not set, the theme will be scoped to a new container, `hv-uikit-scoped-root*`, created around your content.\n   */\n  cssTheme?: \"global\" | \"scoped\";\n  /**\n   * The string used to prefix the class names and uniquely identify them. The key can only contain lower case alphabetical characters.\n   * This is useful to avoid class name collisions.\n   *\n   * If `emotionCache` is passed, this is value is ignored.\n   *\n   * @default \"hv\"\n   */\n  classNameKey?: string;\n  /**\n   * The emotion cache instance to use. If no value is provided, the default cache is used.\n   */\n  emotionCache?: EmotionCache;\n  /**\n   * List of themes to be used by UI Kit.\n   * You can provide your own themes created with the `createTheme` utility and/or the default themes `ds3` and `ds5` provided by UI Kit.\n   *\n   * If no value is provided, the `ds5` theme will be used.\n   */\n  themes?: (HvTheme | HvThemeStructure)[];\n  /**\n   * The active theme. It must be one of the themes passed to `themes`.\n   *\n   * If no value is provided, the first theme from the `themes` list is used. If no `themes` list is provided, the `ds5` theme will be used.\n   */\n  theme?: string;\n  /**\n   * The active color mode. It must be one of the color modes of the active theme.\n   *\n   * If no value is provided, the first color mode defined in the active theme is used.\n   * For the default themes `ds3` and `ds5`, the `dawn` color mode is the one used.\n   */\n  colorMode?: string;\n}\n\nconst scopedRootPrefix = \"hv-uikit-scoped-root\" as const;\n\n/**\n * Enables theming capabilities and makes cross-component theme properties available down the tree.\n */\nexport const HvProvider = ({\n  children,\n  rootElementId,\n  cssBaseline = \"global\",\n  cssTheme = \"global\",\n  themes,\n  theme,\n  colorMode,\n  emotionCache: emotionCacheProp,\n  classNameKey = defaultCacheKey,\n}: HvProviderProps) => {\n  const generatedId = useUniqueId();\n  const scopedRootId = `${scopedRootPrefix}-${generatedId}`;\n\n  // Themes\n  const themesList = processThemes(themes);\n\n  // Emotion cache\n  // Moves UI Kit styles to the top of the <head> so they're loaded first\n  // This enables users to override the UI Kit styles if necessary\n  const emotionCache = useMemo(() => {\n    if (emotionCacheProp) return emotionCacheProp;\n    // reuse the default shared cache if `classNameKey` is the same\n    if (classNameKey === defaultCacheKey) return defaultEmotionCache;\n\n    return createCache({ key: classNameKey, prepend: true });\n  }, [classNameKey, emotionCacheProp]);\n\n  return (\n    <CacheProvider value={emotionCache}>\n      <Global\n        styles={cssReact`\n          ${\n            cssBaseline === \"global\" && {\n              [`@layer hv-uikit-baseline`]: {\n                ...CssBaseline,\n              },\n            }\n          }\n          ${getThemesVars(themesList)}\n        `}\n      />\n      <HvThemeProvider\n        themes={themesList}\n        theme={theme || themesList[0].name}\n        emotionCache={emotionCache}\n        colorMode={colorMode || Object.keys(themesList[0].colors.modes)[0]}\n        themeRootId={\n          cssTheme === \"scoped\" ? rootElementId || scopedRootId : undefined\n        }\n      >\n        <ClassNames>\n          {({ css }) => {\n            if (cssBaseline === \"scoped\") {\n              const rootElement = getElementById(rootElementId);\n\n              if (rootElement) {\n                rootElement.classList.add(\n                  css({\n                    [`@layer ${rootElementId}-baseline`]: {\n                      ...CssScopedBaseline,\n                    },\n                  }),\n                );\n              }\n            }\n\n            return (cssTheme === \"scoped\" || cssBaseline === \"scoped\") &&\n              !rootElementId ? (\n              <div\n                id={scopedRootId}\n                className={\n                  cssBaseline === \"scoped\"\n                    ? css({\n                        [`@layer ${rootElementId}-baseline`]: {\n                          ...CssScopedBaseline,\n                        },\n                      })\n                    : undefined\n                }\n              >\n                {children}\n              </div>\n            ) : (\n              children\n            );\n          }}\n        </ClassNames>\n      </HvThemeProvider>\n    </CacheProvider>\n  );\n};\n"],"names":["cssReact","css"],"mappings":";;;;;;;;;;AAqFA,MAAM,mBAAmB;AAKlB,MAAM,aAAa,CAAC;AAAA,EACzB;AAAA,EACA;AAAA,EACA,cAAc;AAAA,EACd,WAAW;AAAA,EACX;AAAA,EACA;AAAA,EACA;AAAA,EACA,cAAc;AAAA,EACd,eAAe;AACjB,MAAuB;AACrB,QAAM,cAAc,YAAY;AAChC,QAAM,eAAe,GAAG,gBAAgB,IAAI,WAAW;AAGjD,QAAA,aAAa,cAAc,MAAM;AAKjC,QAAA,eAAe,QAAQ,MAAM;AACjC,QAAI,iBAAyB,QAAA;AAEzB,QAAA,iBAAiB,gBAAwB,QAAA;AAE7C,WAAO,YAAY,EAAE,KAAK,cAAc,SAAS,MAAM;AAAA,EAAA,GACtD,CAAC,cAAc,gBAAgB,CAAC;AAGjC,SAAA,qBAAC,eAAc,EAAA,OAAO,cACpB,UAAA;AAAA,IAAA;AAAA,MAAC;AAAA,MAAA;AAAA,QACC,QAAQA;AAAAA,YAEJ,gBAAgB,YAAY;AAAA,UAC1B,CAAC,0BAA0B,GAAG;AAAA,YAC5B,GAAG;AAAA,UAAA;AAAA,QAGT,CAAA;AAAA,YACE,cAAc,UAAU,CAAC;AAAA;AAAA,MAAA;AAAA,IAE/B;AAAA,IACA;AAAA,MAAC;AAAA,MAAA;AAAA,QACC,QAAQ;AAAA,QACR,OAAO,SAAS,WAAW,CAAC,EAAE;AAAA,QAC9B;AAAA,QACA,WAAW,aAAa,OAAO,KAAK,WAAW,CAAC,EAAE,OAAO,KAAK,EAAE,CAAC;AAAA,QACjE,aACE,aAAa,WAAW,iBAAiB,eAAe;AAAA,QAG1D,UAAC,oBAAA,YAAA,EACE,UAAC,CAAA,EAAE,KAAAC,WAAU;AACZ,cAAI,gBAAgB,UAAU;AACtB,kBAAA,cAAc,eAAe,aAAa;AAEhD,gBAAI,aAAa;AACf,0BAAY,UAAU;AAAA,gBACpBA,KAAI;AAAA,kBACF,CAAC,UAAU,aAAa,WAAW,GAAG;AAAA,oBACpC,GAAG;AAAA,kBAAA;AAAA,gBAEN,CAAA;AAAA,cACH;AAAA,YAAA;AAAA,UACF;AAGF,kBAAQ,aAAa,YAAY,gBAAgB,aAC/C,CAAC,gBACD;AAAA,YAAC;AAAA,YAAA;AAAA,cACC,IAAI;AAAA,cACJ,WACE,gBAAgB,WACZA,KAAI;AAAA,gBACF,CAAC,UAAU,aAAa,WAAW,GAAG;AAAA,kBACpC,GAAG;AAAA,gBAAA;AAAA,cAEN,CAAA,IACD;AAAA,cAGL;AAAA,YAAA;AAAA,UAAA,IAGH;AAAA,QAAA,EAGN,CAAA;AAAA,MAAA;AAAA,IAAA;AAAA,EACF,GACF;AAEJ;"}