{"version":3,"file":"ThemeProvider.js","sources":["../../../src/providers/ThemeProvider.tsx"],"sourcesContent":["import { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { EmotionCache } from \"@emotion/cache\";\nimport {\n  createTheme,\n  ThemeProvider as MuiThemeProvider,\n} from \"@mui/material/styles\";\nimport {\n  defaultCacheKey,\n  defaultEmotionCache,\n  EmotionContext,\n  HvThemeContext,\n  type HvThemeContextValue,\n} from \"@hitachivantara/uikit-react-shared\";\nimport { HvThemeStructure, parseTheme } from \"@hitachivantara/uikit-styles\";\n\nimport { HvTheme } from \"../types/theme\";\nimport { setElementAttrs } from \"../utils/theme\";\n\nexport { HvThemeContext };\nexport type { HvThemeContextValue };\n\nexport { defaultCacheKey, defaultEmotionCache, EmotionContext };\n\ninterface HvThemeProviderProps {\n  children: React.ReactNode;\n  themes: (HvTheme | HvThemeStructure)[];\n  theme: string;\n  emotionCache: EmotionCache;\n  colorMode: string;\n  themeRootId?: string;\n}\n\nexport const HvThemeProvider = ({\n  children,\n  themes: themesList,\n  theme: themeProp,\n  emotionCache,\n  colorMode: colorModeProp,\n  themeRootId: rootId,\n}: HvThemeProviderProps) => {\n  const [theme, setTheme] = useState(themeProp);\n  const [colorMode, setColorMode] = useState(colorModeProp);\n\n  const {\n    theme: activeTheme,\n    selectedTheme,\n    selectedMode,\n    colorModes,\n    colorScheme,\n  } = parseTheme(themesList, theme, colorMode);\n\n  const themes = themesList.map((t) => t.name);\n\n  // review in v6 so that theme/colorMode isn't both controlled & uncontrolled\n  useEffect(() => {\n    setTheme(themeProp);\n    setColorMode(colorModeProp);\n  }, [colorModeProp, themeProp]);\n\n  useEffect(() => {\n    setElementAttrs(selectedTheme, selectedMode, colorScheme, rootId);\n  }, [colorScheme, rootId, selectedMode, selectedTheme]);\n\n  const changeTheme = useCallback(\n    (newTheme = selectedTheme, newMode = selectedMode) => {\n      setTheme(newTheme);\n      setColorMode(newMode);\n    },\n    [selectedMode, selectedTheme],\n  );\n\n  const value = useMemo<HvThemeContextValue>(\n    () => ({\n      themes,\n      colorModes,\n      activeTheme: activeTheme as HvTheme,\n      selectedTheme,\n      selectedMode,\n      changeTheme,\n      rootId,\n    }),\n    [\n      themes,\n      colorModes,\n      activeTheme,\n      selectedTheme,\n      selectedMode,\n      changeTheme,\n      rootId,\n    ],\n  );\n\n  const muiTheme = useMemo(() => {\n    const colors = activeTheme.colors.modes[colorMode];\n    return createTheme({\n      spacing: activeTheme.space.base,\n      typography: {\n        fontFamily: activeTheme.fontFamily.body,\n      },\n      palette: {\n        primary: { main: colors.primary },\n        success: { main: colors.positive },\n        warning: { main: colors.warning },\n        error: { main: colors.negative },\n        info: { main: colors.primary },\n        text: {\n          primary: colors.secondary,\n          secondary: colors.secondary_80,\n          disabled: colors.secondary_60,\n        },\n        background: {\n          default: colors.atmo2,\n          paper: colors.atmo1,\n        },\n        divider: colors.atmo4,\n        action: {\n          active: colors.primary,\n          hover: colors.primary_80,\n          selected: colors.primary_80,\n          disabled: colors.secondary_60,\n          disabledBackground: colors.atmo3,\n        },\n      },\n      components: {\n        MuiButtonBase: {\n          defaultProps: {\n            disableRipple: true,\n            disableTouchRipple: true,\n          },\n        },\n      },\n      breakpoints: activeTheme.breakpoints,\n    });\n  }, [activeTheme, colorMode]);\n\n  const emotionCacheValue = useMemo(\n    () => ({ cache: emotionCache }),\n    [emotionCache],\n  );\n\n  return (\n    <MuiThemeProvider theme={muiTheme}>\n      <HvThemeContext.Provider value={value}>\n        <EmotionContext.Provider value={emotionCacheValue}>\n          {children}\n        </EmotionContext.Provider>\n      </HvThemeContext.Provider>\n    </MuiThemeProvider>\n  );\n};\n"],"names":["MuiThemeProvider"],"mappings":";;;;;;;AAgCO,MAAM,kBAAkB,CAAC;AAAA,EAC9B;AAAA,EACA,QAAQ;AAAA,EACR,OAAO;AAAA,EACP;AAAA,EACA,WAAW;AAAA,EACX,aAAa;AACf,MAA4B;AAC1B,QAAM,CAAC,OAAO,QAAQ,IAAI,SAAS,SAAS;AAC5C,QAAM,CAAC,WAAW,YAAY,IAAI,SAAS,aAAa;AAElD,QAAA;AAAA,IACJ,OAAO;AAAA,IACP;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACE,IAAA,WAAW,YAAY,OAAO,SAAS;AAE3C,QAAM,SAAS,WAAW,IAAI,CAAC,MAAM,EAAE,IAAI;AAG3C,YAAU,MAAM;AACd,aAAS,SAAS;AAClB,iBAAa,aAAa;AAAA,EAAA,GACzB,CAAC,eAAe,SAAS,CAAC;AAE7B,YAAU,MAAM;AACE,oBAAA,eAAe,cAAc,aAAa,MAAM;AAAA,KAC/D,CAAC,aAAa,QAAQ,cAAc,aAAa,CAAC;AAErD,QAAM,cAAc;AAAA,IAClB,CAAC,WAAW,eAAe,UAAU,iBAAiB;AACpD,eAAS,QAAQ;AACjB,mBAAa,OAAO;AAAA,IACtB;AAAA,IACA,CAAC,cAAc,aAAa;AAAA,EAC9B;AAEA,QAAM,QAAQ;AAAA,IACZ,OAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IAAA;AAAA,IAEF;AAAA,MACE;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IAAA;AAAA,EAEJ;AAEM,QAAA,WAAW,QAAQ,MAAM;AAC7B,UAAM,SAAS,YAAY,OAAO,MAAM,SAAS;AACjD,WAAO,YAAY;AAAA,MACjB,SAAS,YAAY,MAAM;AAAA,MAC3B,YAAY;AAAA,QACV,YAAY,YAAY,WAAW;AAAA,MACrC;AAAA,MACA,SAAS;AAAA,QACP,SAAS,EAAE,MAAM,OAAO,QAAQ;AAAA,QAChC,SAAS,EAAE,MAAM,OAAO,SAAS;AAAA,QACjC,SAAS,EAAE,MAAM,OAAO,QAAQ;AAAA,QAChC,OAAO,EAAE,MAAM,OAAO,SAAS;AAAA,QAC/B,MAAM,EAAE,MAAM,OAAO,QAAQ;AAAA,QAC7B,MAAM;AAAA,UACJ,SAAS,OAAO;AAAA,UAChB,WAAW,OAAO;AAAA,UAClB,UAAU,OAAO;AAAA,QACnB;AAAA,QACA,YAAY;AAAA,UACV,SAAS,OAAO;AAAA,UAChB,OAAO,OAAO;AAAA,QAChB;AAAA,QACA,SAAS,OAAO;AAAA,QAChB,QAAQ;AAAA,UACN,QAAQ,OAAO;AAAA,UACf,OAAO,OAAO;AAAA,UACd,UAAU,OAAO;AAAA,UACjB,UAAU,OAAO;AAAA,UACjB,oBAAoB,OAAO;AAAA,QAAA;AAAA,MAE/B;AAAA,MACA,YAAY;AAAA,QACV,eAAe;AAAA,UACb,cAAc;AAAA,YACZ,eAAe;AAAA,YACf,oBAAoB;AAAA,UAAA;AAAA,QACtB;AAAA,MAEJ;AAAA,MACA,aAAa,YAAY;AAAA,IAAA,CAC1B;AAAA,EAAA,GACA,CAAC,aAAa,SAAS,CAAC;AAE3B,QAAM,oBAAoB;AAAA,IACxB,OAAO,EAAE,OAAO;IAChB,CAAC,YAAY;AAAA,EACf;AAEA,6BACGA,eAAiB,EAAA,OAAO,UACvB,UAAA,oBAAC,eAAe,UAAf,EAAwB,OACvB,UAAA,oBAAC,eAAe,UAAf,EAAwB,OAAO,mBAC7B,SAAA,CACH,EACF,CAAA,GACF;AAEJ;"}