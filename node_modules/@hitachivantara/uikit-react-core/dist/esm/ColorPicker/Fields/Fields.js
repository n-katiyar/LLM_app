import { jsxs, jsx } from "react/jsx-runtime";
import { useState, useRef, useEffect } from "react";
import * as color from "react-color/lib/helpers/color";
import { useDefaultProps } from "@hitachivantara/uikit-react-utils";
import { useClasses } from "./Fields.styles.js";
import { staticClasses } from "./Fields.styles.js";
import { HvInput } from "../../Input/Input.js";
const Fields = (props) => {
  const {
    className,
    onChange,
    rgb,
    hex,
    classes: classesProp
  } = useDefaultProps("HvColorPickerFields", props);
  const { classes, cx } = useClasses(classesProp);
  const [internalHex, setInternalHex] = useState(hex);
  const [internalRed, setInternalRed] = useState(rgb?.r);
  const [internalGreen, setInternalGreen] = useState(rgb?.g);
  const [internalBlue, setInternalBlue] = useState(rgb?.b);
  const hexInputRef = useRef(null);
  const redInputRef = useRef(null);
  const greenInputRef = useRef(null);
  const blueInputRef = useRef(null);
  useEffect(() => {
    if (document.activeElement !== hexInputRef.current) {
      setInternalHex(hex);
    }
  }, [hex]);
  useEffect(() => {
    if (document.activeElement !== redInputRef.current) {
      setInternalRed(rgb?.r);
    }
    if (document.activeElement !== greenInputRef.current) {
      setInternalGreen(rgb?.g);
    }
    if (document.activeElement !== blueInputRef.current) {
      setInternalBlue(rgb?.b);
    }
  }, [rgb]);
  const handleChange = (data, event) => {
    if (data.hex && color.isValidHex(data.hex)) {
      onChange(
        {
          hex: data.hex,
          source: "hex"
        },
        event
      );
    } else if (data.r !== void 0 || data.g !== void 0 || data.b !== void 0) {
      onChange(
        {
          r: data.r ?? rgb?.r,
          g: data.g ?? rgb?.g,
          b: data.b ?? rgb?.b,
          source: "rgb"
        },
        event
      );
    }
  };
  const onChangeHex = (event, value) => {
    setInternalHex(value);
    handleChange({ hex: value }, event);
  };
  const onChangeRbg = (event, value, colorPart) => {
    if (colorPart === "r") setInternalRed(Number(value));
    if (colorPart === "g") setInternalGreen(Number(value));
    if (colorPart === "b") setInternalBlue(Number(value));
    handleChange(
      {
        r: colorPart === "r" ? Number(value) : rgb?.r,
        g: colorPart === "g" ? Number(value) : rgb?.g,
        b: colorPart === "b" ? Number(value) : rgb?.b
      },
      event
    );
  };
  return /* @__PURE__ */ jsxs("div", { className: cx(classes.fields, className), children: [
    /* @__PURE__ */ jsx(
      HvInput,
      {
        ref: hexInputRef,
        className: classes.double,
        label: "HEX",
        value: internalHex?.replace("#", ""),
        onChange: onChangeHex,
        onBlur: () => setInternalHex(hex),
        disableClear: true
      }
    ),
    /* @__PURE__ */ jsx(
      HvInput,
      {
        ref: redInputRef,
        className: classes.single,
        label: "R",
        value: internalRed,
        onChange: (event, value) => onChangeRbg(event, value, "r"),
        onBlur: () => setInternalRed(rgb?.r),
        inputProps: { type: "number", min: 0, max: 255 },
        disableClear: true
      }
    ),
    /* @__PURE__ */ jsx(
      HvInput,
      {
        ref: greenInputRef,
        className: classes.single,
        label: "G",
        value: internalGreen,
        onChange: (event, value) => onChangeRbg(event, value, "g"),
        onBlur: () => setInternalGreen(rgb?.g),
        inputProps: { type: "number", min: 0, max: 255 },
        disableClear: true
      }
    ),
    /* @__PURE__ */ jsx(
      HvInput,
      {
        ref: blueInputRef,
        className: classes.single,
        label: "B",
        value: internalBlue,
        onChange: (event, value) => onChangeRbg(event, value, "b"),
        onBlur: () => setInternalBlue(rgb?.b),
        inputProps: { type: "number", min: 0, max: 255 },
        disableClear: true
      }
    )
  ] });
};
export {
  Fields,
  staticClasses as colorPickerFieldsClasses
};
