{"version":3,"file":"SimpleGrid.js","sources":["../../../src/SimpleGrid/SimpleGrid.tsx"],"sourcesContent":["import {\n  useDefaultProps,\n  type ExtractNames,\n} from \"@hitachivantara/uikit-react-utils\";\nimport { HvBreakpoints } from \"@hitachivantara/uikit-styles\";\n\nimport { HvBaseProps } from \"../types/generic\";\nimport {\n  getContainerStyle,\n  staticClasses,\n  useClasses,\n} from \"./SimpleGrid.styles\";\n\nexport { staticClasses as simpleGridClasses };\n\n// TODO: remove in v6\nexport type Spacing = HvBreakpoints;\n\n// TODO: rename in v6 (or inline)\nexport interface Breakpoint {\n  cols?: number;\n  maxWidth?: number;\n  minWidth?: number;\n  spacing?: HvBreakpoints;\n}\n\nexport type HvSimpleGridClasses = ExtractNames<typeof useClasses>;\n\n/** Grid component that enables you to create columns of equal width and define your own breakpoints and responsive behavior. */\nexport interface HvSimpleGridProps extends HvBaseProps {\n  /** Spacing with pre-defined values according the values defined in the theme */\n  spacing?: HvBreakpoints;\n  /**\n   * Provide an array to define responsive behavior:\n   * - `maxWidth` or `minWidth`: max-width or min-width at which media query will work\n   * - `cols`: number of columns per row at given max-width\n   * - `spacing`: optional spacing at given max-width, if not provided spacing from component prop will be used instead\n   */\n  breakpoints?: Breakpoint[];\n  /** Number of how many columns the content will be displayed */\n  cols?: number;\n  /** A Jss Object used to override or extend the styles applied to the component. */\n  classes?: HvSimpleGridClasses;\n}\n\nexport const HvSimpleGrid = (props: HvSimpleGridProps) => {\n  const {\n    children,\n    breakpoints,\n    spacing,\n    cols,\n    className,\n    classes: classesProp,\n    ...others\n  } = useDefaultProps(\"HvSimpleGrid\", props);\n\n  const { classes, cx, css } = useClasses(classesProp);\n\n  const containerStyle = getContainerStyle(breakpoints, spacing, cols);\n\n  return (\n    <div\n      className={cx(css(containerStyle), classes.root, className)}\n      {...others}\n    >\n      {children}\n    </div>\n  );\n};\n"],"names":[],"mappings":";;;;AA6Ca,MAAA,eAAe,CAAC,UAA6B;AAClD,QAAA;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,SAAS;AAAA,IACT,GAAG;AAAA,EAAA,IACD,gBAAgB,gBAAgB,KAAK;AAEzC,QAAM,EAAE,SAAS,IAAI,IAAI,IAAI,WAAW,WAAW;AAEnD,QAAM,iBAAiB,kBAAkB,aAAa,SAAS,IAAI;AAGjE,SAAA;AAAA,IAAC;AAAA,IAAA;AAAA,MACC,WAAW,GAAG,IAAI,cAAc,GAAG,QAAQ,MAAM,SAAS;AAAA,MACzD,GAAG;AAAA,MAEH;AAAA,IAAA;AAAA,EACH;AAEJ;"}