{"version":3,"file":"Snackbar.js","sources":["../../../src/Snackbar/Snackbar.tsx"],"sourcesContent":["import { forwardRef, useCallback } from \"react\";\nimport Slide, { SlideProps } from \"@mui/material/Slide\";\nimport MuiSnackbar, {\n  SnackbarProps as MuiSnackbarProps,\n  SnackbarCloseReason,\n  SnackbarOrigin,\n} from \"@mui/material/Snackbar\";\nimport {\n  useDefaultProps,\n  type ExtractNames,\n} from \"@hitachivantara/uikit-react-utils\";\n\nimport { HvActionGeneric, HvActionsGenericProps } from \"../ActionsGeneric\";\nimport { capitalize } from \"../utils/helpers\";\nimport { setId } from \"../utils/setId\";\nimport { staticClasses, useClasses } from \"./Snackbar.styles\";\nimport { HvSnackbarContent, HvSnackbarContentProps } from \"./SnackbarContent\";\nimport { HvSnackbarVariant } from \"./types\";\n\nexport { staticClasses as snackbarClasses };\n\nexport type HvSnackbarClasses = ExtractNames<typeof useClasses>;\n\nexport interface HvSnackbarProps\n  extends Omit<MuiSnackbarProps, \"action\" | \"classes\" | \"children\"> {\n  /** If true, Snackbar is open. */\n  open?: boolean;\n  /**\n   * Callback fired when the component requests to be closed.\n   * Typically onClose is used to set state in the parent component, which is used to control the Snackbar open prop.\n   * The reason parameter can optionally be used to control the response to onClose, for example ignoring click away.\n   * */\n  onClose?: (\n    event: Event | React.SyntheticEvent<any, Event>,\n    reason: SnackbarCloseReason,\n  ) => void;\n  /** The message to display. */\n  label?: React.ReactNode;\n  /**\n   * The anchor of the Snackbar. vertical: \"top\", \"bottom\" | horizontal: \"left\", \"center\", \"right\".\n   * It defines where the snackbar will end his animation */\n  anchorOrigin?: SnackbarOrigin;\n  /** The number of milliseconds to wait before automatically calling the onClose function. onClose should then set the state of the open prop to hide the Snackbar */\n  autoHideDuration?: number;\n  /** Variant of the snackbar. */\n  variant?: HvSnackbarVariant;\n  /** Custom icon to replace the variant default. */\n  customIcon?: React.ReactNode;\n  /** Controls if the associated icon to the variant should be shown. */\n  showIcon?: boolean;\n  /** Action to display. */\n  action?: React.ReactNode | HvActionGeneric;\n  /**\n   * The callback function called when an action is triggered, receiving `action` as parameter.\n   *\n   * @deprecated Use `onAction` instead.\n   * */\n  actionCallback?: HvActionsGenericProps[\"actionsCallback\"];\n  /** The callback function called when an action is triggered, receiving `action` as parameter. */\n  onAction?: HvActionsGenericProps[\"onAction\"];\n  /** Duration of transition in milliseconds. */\n  transitionDuration?: number;\n  /** Direction of slide transition. */\n  transitionDirection?: \"up\" | \"down\" | \"left\" | \"right\";\n  /** The container the snackbar should slide from. */\n  container?: SlideProps[\"container\"];\n  /** Custom offset from top/bottom of the page, in px. */\n  offset?: number;\n  /** Others applied to the content of the snackbar. */\n  snackbarContentProps?: HvSnackbarContentProps;\n  /** A Jss Object used to override or extend the styles applied to the component. */\n  classes?: HvSnackbarClasses;\n  /** @ignore */\n  ref?: MuiSnackbarProps[\"ref\"];\n}\n\n/**\n * A Snackbar provides brief messages about app processes.\n * It is dismissed automatically after a given interval.\n *\n * Snackbar can be built with two different components:\n * - `HvSnackbar`, which wraps all the positioning, transition, auto hide, etc.\n * - `HvSnackbarContent`, which allows a finer control and customization of the content of the Snackbar.\n */\nexport const HvSnackbar = forwardRef<\n  React.ComponentRef<typeof MuiSnackbar>,\n  HvSnackbarProps\n>(function HvSnackbar(props, ref) {\n  const {\n    classes: classesProp,\n    className,\n    id,\n    open = false,\n    onClose,\n    label = \"\",\n    anchorOrigin = { vertical: \"top\", horizontal: \"right\" },\n    autoHideDuration = 5000,\n    variant = \"default\",\n    showIcon = false,\n    customIcon = null,\n    action = null,\n    actionCallback, // TODO - remove in v6\n    onAction,\n    transitionDuration = 300,\n    transitionDirection = \"left\",\n    container,\n    offset = 60,\n    snackbarContentProps,\n    ...others\n  } = useDefaultProps(\"HvSnackbar\", props);\n  const { classes } = useClasses(classesProp);\n\n  const anchorOriginOffset = {\n    anchorOriginTop: {\n      top: `${offset}px`,\n    },\n    anchorOriginBottom: {\n      bottom: `${offset}px`,\n    },\n  };\n\n  const SlideTransition = useCallback<\n    NonNullable<MuiSnackbarProps[\"TransitionComponent\"]>\n  >(\n    (properties) => (\n      <Slide\n        {...properties}\n        container={container}\n        direction={transitionDirection}\n      />\n    ),\n    [container, transitionDirection],\n  );\n\n  return (\n    <MuiSnackbar\n      ref={ref}\n      style={\n        anchorOriginOffset[`anchorOrigin${capitalize(anchorOrigin.vertical)}`]\n      }\n      classes={classes}\n      className={className}\n      id={id}\n      anchorOrigin={anchorOrigin}\n      open={open}\n      onClose={onClose}\n      autoHideDuration={autoHideDuration}\n      transitionDuration={transitionDuration}\n      TransitionComponent={SlideTransition}\n      {...others}\n    >\n      <HvSnackbarContent\n        id={setId(id, \"content\")}\n        label={label}\n        variant={variant}\n        customIcon={customIcon}\n        showIcon={showIcon}\n        action={action}\n        actionCallback={actionCallback}\n        onAction={onAction}\n        {...snackbarContentProps}\n      />\n    </MuiSnackbar>\n  );\n});\n"],"names":["HvSnackbar","MuiSnackbar"],"mappings":";;;;;;;;;;AAoFO,MAAM,aAAa,WAGxB,SAASA,YAAW,OAAO,KAAK;AAC1B,QAAA;AAAA,IACJ,SAAS;AAAA,IACT;AAAA,IACA;AAAA,IACA,OAAO;AAAA,IACP;AAAA,IACA,QAAQ;AAAA,IACR,eAAe,EAAE,UAAU,OAAO,YAAY,QAAQ;AAAA,IACtD,mBAAmB;AAAA,IACnB,UAAU;AAAA,IACV,WAAW;AAAA,IACX,aAAa;AAAA,IACb,SAAS;AAAA,IACT;AAAA;AAAA,IACA;AAAA,IACA,qBAAqB;AAAA,IACrB,sBAAsB;AAAA,IACtB;AAAA,IACA,SAAS;AAAA,IACT;AAAA,IACA,GAAG;AAAA,EAAA,IACD,gBAAgB,cAAc,KAAK;AACvC,QAAM,EAAE,QAAA,IAAY,WAAW,WAAW;AAE1C,QAAM,qBAAqB;AAAA,IACzB,iBAAiB;AAAA,MACf,KAAK,GAAG,MAAM;AAAA,IAChB;AAAA,IACA,oBAAoB;AAAA,MAClB,QAAQ,GAAG,MAAM;AAAA,IAAA;AAAA,EAErB;AAEA,QAAM,kBAAkB;AAAA,IAGtB,CAAC,eACC;AAAA,MAAC;AAAA,MAAA;AAAA,QACE,GAAG;AAAA,QACJ;AAAA,QACA,WAAW;AAAA,MAAA;AAAA,IACb;AAAA,IAEF,CAAC,WAAW,mBAAmB;AAAA,EACjC;AAGE,SAAA;AAAA,IAACC;AAAAA,IAAA;AAAA,MACC;AAAA,MACA,OACE,mBAAmB,eAAe,WAAW,aAAa,QAAQ,CAAC,EAAE;AAAA,MAEvE;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,qBAAqB;AAAA,MACpB,GAAG;AAAA,MAEJ,UAAA;AAAA,QAAC;AAAA,QAAA;AAAA,UACC,IAAI,MAAM,IAAI,SAAS;AAAA,UACvB;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACC,GAAG;AAAA,QAAA;AAAA,MAAA;AAAA,IACN;AAAA,EACF;AAEJ,CAAC;"}