{"version":3,"file":"SnackbarContent.js","sources":["../../../../src/Snackbar/SnackbarContent/SnackbarContent.tsx"],"sourcesContent":["import { forwardRef, isValidElement } from \"react\";\nimport SnackbarContent, {\n  SnackbarContentProps as MuiSnackbarContentProps,\n} from \"@mui/material/SnackbarContent\";\nimport {\n  useDefaultProps,\n  useTheme,\n  type ExtractNames,\n} from \"@hitachivantara/uikit-react-utils\";\n\nimport {\n  HvActionGeneric,\n  HvActionsGeneric,\n  HvActionsGenericProps,\n} from \"../../ActionsGeneric\";\nimport { HvButtonVariant } from \"../../Button\";\nimport { iconVariant } from \"../../utils/iconVariant\";\nimport { setId } from \"../../utils/setId\";\nimport { HvSnackbarVariant } from \"../types\";\nimport { staticClasses, useClasses } from \"./SnackbarContent.styles\";\n\nexport { staticClasses as snackbarContentClasses };\n\nexport type HvSnackbarContentClasses = ExtractNames<typeof useClasses>;\n\nexport interface HvSnackbarContentProps\n  extends Omit<MuiSnackbarContentProps, \"variant\" | \"action\" | \"classes\"> {\n  /** The message to display. */\n  label?: React.ReactNode;\n  /** Variant of the snackbar. */\n  variant?: HvSnackbarVariant;\n  /** Controls if the associated icon to the variant should be shown. */\n  showIcon?: boolean;\n  /** Custom icon to replace the variant default. */\n  customIcon?: React.ReactNode;\n  /** Action to display. */\n  action?: React.ReactNode | HvActionGeneric;\n  /**\n   * The callback function called when an action is triggered, receiving `action` as parameter.\n   *\n   * @deprecated Use `onAction` instead.\n   * */\n  actionCallback?: HvActionsGenericProps[\"actionsCallback\"];\n  /** The callback function called when an action is triggered, receiving `action` as parameter. */\n  onAction?: HvActionsGenericProps[\"onAction\"];\n  /** A Jss Object used to override or extend the styles applied to the component. */\n  classes?: HvSnackbarContentClasses;\n}\n\nexport const HvSnackbarContent = forwardRef<\n  HTMLDivElement,\n  HvSnackbarContentProps\n>(function HvSnackbarContent(props, ref) {\n  const {\n    className,\n    id,\n    classes: classesProp,\n    label,\n    variant = \"default\",\n    showIcon,\n    customIcon,\n    action,\n    actionCallback, // TODO - remove in v6\n    onAction,\n    ...others\n  } = useDefaultProps(\"HvSnackbarContent\", props);\n\n  const icon = customIcon || (showIcon && iconVariant(variant, \"base_dark\"));\n  const innerAction: any = isValidElement(action) ? action : [action];\n\n  const { classes, cx } = useClasses(classesProp);\n  const { activeTheme } = useTheme();\n\n  return (\n    <SnackbarContent\n      ref={ref}\n      id={id}\n      classes={{\n        root: classes.root,\n        message: classes.message,\n      }}\n      className={cx(classes?.[variant], className)}\n      message={\n        <div id={setId(id, \"message\")} className={classes.messageSpan}>\n          {icon && <div className={classes.iconVariant}>{icon}</div>}\n          <div className={classes.messageText}>{label}</div>\n          {action && (\n            <div id={setId(id, \"action\")} className={classes.action}>\n              <HvActionsGeneric\n                id={id}\n                variant={\n                  activeTheme?.snackbar.actionButtonVariant as HvButtonVariant\n                }\n                actions={innerAction}\n                actionsCallback={actionCallback}\n                onAction={onAction}\n              />\n            </div>\n          )}\n        </div>\n      }\n      {...others}\n    />\n  );\n});\n"],"names":["HvSnackbarContent"],"mappings":";;;;;;;;;AAiDO,MAAM,oBAAoB,WAG/B,SAASA,mBAAkB,OAAO,KAAK;AACjC,QAAA;AAAA,IACJ;AAAA,IACA;AAAA,IACA,SAAS;AAAA,IACT;AAAA,IACA,UAAU;AAAA,IACV;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAAA,IACA;AAAA,IACA,GAAG;AAAA,EAAA,IACD,gBAAgB,qBAAqB,KAAK;AAE9C,QAAM,OAAO,cAAe,YAAY,YAAY,SAAS,WAAW;AACxE,QAAM,cAAmB,eAAe,MAAM,IAAI,SAAS,CAAC,MAAM;AAElE,QAAM,EAAE,SAAS,OAAO,WAAW,WAAW;AACxC,QAAA,EAAE,YAAY,IAAI,SAAS;AAG/B,SAAA;AAAA,IAAC;AAAA,IAAA;AAAA,MACC;AAAA,MACA;AAAA,MACA,SAAS;AAAA,QACP,MAAM,QAAQ;AAAA,QACd,SAAS,QAAQ;AAAA,MACnB;AAAA,MACA,WAAW,GAAG,UAAU,OAAO,GAAG,SAAS;AAAA,MAC3C,SACG,qBAAA,OAAA,EAAI,IAAI,MAAM,IAAI,SAAS,GAAG,WAAW,QAAQ,aAC/C,UAAA;AAAA,QAAA,QAAS,oBAAA,OAAA,EAAI,WAAW,QAAQ,aAAc,UAAK,MAAA;AAAA,QACnD,oBAAA,OAAA,EAAI,WAAW,QAAQ,aAAc,UAAM,OAAA;AAAA,QAC3C,UACE,oBAAA,OAAA,EAAI,IAAI,MAAM,IAAI,QAAQ,GAAG,WAAW,QAAQ,QAC/C,UAAA;AAAA,UAAC;AAAA,UAAA;AAAA,YACC;AAAA,YACA,SACE,aAAa,SAAS;AAAA,YAExB,SAAS;AAAA,YACT,iBAAiB;AAAA,YACjB;AAAA,UAAA;AAAA,QAAA,EAEJ,CAAA;AAAA,MAAA,GAEJ;AAAA,MAED,GAAG;AAAA,IAAA;AAAA,EACN;AAEJ,CAAC;"}