{"version":3,"file":"SliderInput.js","sources":["../../../../src/Slider/SliderInput/SliderInput.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { Remove } from \"@hitachivantara/uikit-react-icons\";\nimport { type ExtractNames } from \"@hitachivantara/uikit-react-utils\";\n\nimport { HvFormStatus } from \"../../FormElement\";\nimport { HvInput, HvInputProps } from \"../../Input\";\nimport { HvBaseProps } from \"../../types/generic\";\nimport { setId } from \"../../utils/setId\";\nimport { knobsValuesToString, stringValuesToKnobs } from \"../utils\";\nimport { staticClasses, useClasses } from \"./SliderInput.styles\";\n\nexport { staticClasses as sliderInputClasses };\n\nexport type HvSliderInputClasses = ExtractNames<typeof useClasses>;\n\nexport interface HvSliderInputProps\n  extends HvBaseProps<HTMLDivElement, \"onChange\"> {\n  /**\n   * Used to generate the aria-label for the inputs.\n   */\n  label?: React.ReactNode;\n  /**\n   * Input status.\n   */\n  status?: HvFormStatus[];\n  /**\n   * The values array to apply to the component\n   */\n  values?: number[];\n  /**\n   * Callback function to be triggered when the selected date has changed.\n   */\n  onChange?: (values: number[], index: number) => void;\n  /**\n   * Attributes applied to the input element.\n   */\n  inputProps?: HvInputProps[];\n  /**\n   * Indicates that the form element is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Indicates that the form element is read only.\n   */\n  readOnly?: boolean;\n  /**\n   * Indicates how many decimals to use.\n   */\n  markDigits?: number;\n  /**\n   * Styles applied from the theme.\n   */\n  classes?: HvSliderInputClasses;\n}\n\nexport const HvSliderInput = ({\n  classes: classesProp,\n  className,\n  id,\n  label,\n  status,\n  values: valuesProp = [],\n  inputProps = [],\n  readOnly = false,\n  disabled = false,\n  markDigits = 0,\n  onChange,\n  ...others\n}: HvSliderInputProps) => {\n  const { classes, cx } = useClasses(classesProp);\n\n  const [inputValues, setInputValues] = useState<string[]>(\n    knobsValuesToString(valuesProp, markDigits),\n  );\n\n  const handleChange = (index: number) => {\n    if (disabled) return;\n\n    onChange?.(stringValuesToKnobs(inputValues), index);\n  };\n\n  useEffect(() => {\n    setInputValues(knobsValuesToString(valuesProp, markDigits));\n  }, [markDigits, valuesProp]);\n\n  return (\n    <div className={cx(classes.inputRoot, className)} {...others}>\n      {inputValues.map((value, index) => (\n        <div key={setId(id, index)} className={classes.inputContainer}>\n          {index !== 0 && (\n            <Remove color={disabled ? \"secondary_60\" : undefined} />\n          )}\n          <HvInput\n            id={setId(id, index)}\n            aria-label={`${label}-${index}`}\n            className={classes.input}\n            disabled={disabled}\n            type=\"number\"\n            value={Number.isNaN(value) || value == null ? \"\" : value.toString()}\n            onEnter={() => handleChange(index)}\n            onBlur={() => handleChange(index)}\n            onChange={(_, inputValue) => {\n              const newValues = [...inputValues];\n              newValues[index] = inputValue;\n              setInputValues(newValues);\n            }}\n            status={status?.[index] || \"standBy\"}\n            readOnly={readOnly}\n            disableClear\n            {...inputProps[index]}\n          />\n        </div>\n      ))}\n    </div>\n  );\n};\n"],"names":[],"mappings":";;;;;;;;AAuDO,MAAM,gBAAgB,CAAC;AAAA,EAC5B,SAAS;AAAA,EACT;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,QAAQ,aAAa,CAAC;AAAA,EACtB,aAAa,CAAC;AAAA,EACd,WAAW;AAAA,EACX,WAAW;AAAA,EACX,aAAa;AAAA,EACb;AAAA,EACA,GAAG;AACL,MAA0B;AACxB,QAAM,EAAE,SAAS,OAAO,WAAW,WAAW;AAExC,QAAA,CAAC,aAAa,cAAc,IAAI;AAAA,IACpC,oBAAoB,YAAY,UAAU;AAAA,EAC5C;AAEM,QAAA,eAAe,CAAC,UAAkB;AACtC,QAAI,SAAU;AAEH,eAAA,oBAAoB,WAAW,GAAG,KAAK;AAAA,EACpD;AAEA,YAAU,MAAM;AACC,mBAAA,oBAAoB,YAAY,UAAU,CAAC;AAAA,EAAA,GACzD,CAAC,YAAY,UAAU,CAAC;AAE3B,6BACG,OAAI,EAAA,WAAW,GAAG,QAAQ,WAAW,SAAS,GAAI,GAAG,QACnD,UAAY,YAAA,IAAI,CAAC,OAAO,+BACtB,OAA2B,EAAA,WAAW,QAAQ,gBAC5C,UAAA;AAAA,IAAA,UAAU,KACR,oBAAA,QAAA,EAAO,OAAO,WAAW,iBAAiB,QAAW;AAAA,IAExD;AAAA,MAAC;AAAA,MAAA;AAAA,QACC,IAAI,MAAM,IAAI,KAAK;AAAA,QACnB,cAAY,GAAG,KAAK,IAAI,KAAK;AAAA,QAC7B,WAAW,QAAQ;AAAA,QACnB;AAAA,QACA,MAAK;AAAA,QACL,OAAO,OAAO,MAAM,KAAK,KAAK,SAAS,OAAO,KAAK,MAAM,SAAS;AAAA,QAClE,SAAS,MAAM,aAAa,KAAK;AAAA,QACjC,QAAQ,MAAM,aAAa,KAAK;AAAA,QAChC,UAAU,CAAC,GAAG,eAAe;AACrB,gBAAA,YAAY,CAAC,GAAG,WAAW;AACjC,oBAAU,KAAK,IAAI;AACnB,yBAAe,SAAS;AAAA,QAC1B;AAAA,QACA,QAAQ,SAAS,KAAK,KAAK;AAAA,QAC3B;AAAA,QACA,cAAY;AAAA,QACX,GAAG,WAAW,KAAK;AAAA,MAAA;AAAA,IAAA;AAAA,EACtB,EAAA,GAtBQ,MAAM,IAAI,KAAK,CAuBzB,CACD,EACH,CAAA;AAEJ;"}