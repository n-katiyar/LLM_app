import { jsx, jsxs } from "react/jsx-runtime";
import { forwardRef, isValidElement, cloneElement } from "react";
import { CloseXS, CheckboxCheck, Checkbox } from "@hitachivantara/uikit-react-icons";
import { useDefaultProps, mergeStyles } from "@hitachivantara/uikit-react-utils";
import { getColor, theme } from "@hitachivantara/uikit-styles";
import { useControlled } from "../hooks/useControlled.js";
import { isDeleteKey } from "../utils/keyboardUtils.js";
import { useClasses } from "./Tag.styles.js";
import { staticClasses } from "./Tag.styles.js";
import { HvButtonBase } from "../ButtonBase/ButtonBase.js";
import { HvTypography } from "../Typography/Typography.js";
const HvTag = forwardRef(function HvTag2(props, ref) {
  const {
    classes: classesProp,
    className,
    component,
    style,
    label,
    disabled,
    type = "semantic",
    selectable,
    selected,
    defaultSelected = false,
    color,
    deleteIcon: deleteIconProp,
    onDelete,
    onClick,
    onKeyDown,
    onKeyUp,
    // TODO: remove from API
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    deleteButtonArialLabel = "Delete tag",
    deleteButtonProps = {},
    ...others
  } = useDefaultProps("HvTag", props);
  const { classes, cx } = useClasses(classesProp);
  const [isSelected, setIsSelected] = useControlled(
    selected,
    Boolean(defaultSelected)
  );
  const handleDeleteClick = (event) => {
    event.stopPropagation();
    onDelete?.(event);
  };
  const backgroundColor = type === "semantic" && getColor(color, "neutral_20") || type === "categorical" && theme.alpha(getColor(color, "cat1"), 0.2) || void 0;
  const isClickable = !!(onClick || onDelete || selectable);
  const CheckboxIcon = isSelected ? CheckboxCheck : Checkbox;
  const deleteIcon = deleteIconProp && isValidElement(deleteIconProp) ? cloneElement(deleteIconProp, {
    className: cx(classes.deleteIcon, {
      [classes.disabledDeleteIcon]: disabled
    }),
    onClick: handleDeleteClick
  }) : /* @__PURE__ */ jsx(
    CloseXS,
    {
      size: "XS",
      onClick: handleDeleteClick,
      className: cx(classes.deleteIcon, classes.button, classes.tagButton),
      ...deleteButtonProps
    }
  );
  return /* @__PURE__ */ jsxs(
    HvButtonBase,
    {
      ref,
      component: isClickable ? HvButtonBase : "div",
      disabled,
      "data-color": color,
      style: mergeStyles(style, {
        "--bgColor": backgroundColor
      }),
      className: cx(classes.root, classes.chipRoot, className, {
        [classes.disabled]: disabled,
        [classes.selected]: isSelected,
        [classes.clickable]: isClickable && !disabled,
        [classes.categorical]: type === "categorical",
        [classes.categoricalFocus]: type === "categorical" && !disabled,
        [classes.categoricalDisabled]: type === "categorical" && disabled
      }),
      onKeyUp: (event) => {
        if (event.currentTarget === event.target && isDeleteKey(event)) {
          onDelete?.(event);
        }
        onKeyUp?.(event);
      },
      onClick: (event) => {
        if (disabled) return;
        if (selectable) setIsSelected(!isSelected);
        onClick?.(event, !isSelected);
      },
      selected: isClickable && isSelected,
      ...others,
      children: [
        selectable && type === "semantic" && /* @__PURE__ */ jsx(
          CheckboxIcon,
          {
            className: classes.icon,
            color: disabled && ["atmo3", "secondary_60"] || void 0,
            size: "XS"
          }
        ),
        /* @__PURE__ */ jsx(
          HvTypography,
          {
            noWrap: true,
            variant: "caption2",
            component: "span",
            className: classes.label,
            children: label
          }
        ),
        onDelete && !disabled && deleteIcon
      ]
    }
  );
});
export {
  HvTag,
  staticClasses as tagClasses
};
