import { Rule, CSSEntries, Shortcut, StaticRule } from '@unocss/core';
import { T as Theme } from './shared/preset-wind4.MiZzPO05.mjs';
export { r as rules } from './shared/preset-wind4.DIUjJahF.mjs';

declare const verticalAligns: Rule<Theme>[];
declare const textAligns: Rule<Theme>[];

declare const animations: Rule<Theme>[];

declare const backgroundStyles: Rule<Theme>[];

declare const outline: Rule<Theme>[];
declare const appearance: Rule<Theme>[];
declare const willChange: Rule<Theme>[];
declare const listStyle: Rule<Theme>[];
declare const accents: Rule<Theme>[];
declare const carets: Rule<Theme>[];
declare const imageRenderings: Rule<Theme>[];
declare const overscrolls: Rule<Theme>[];
declare const scrollBehaviors: Rule<Theme>[];

declare const borderStyles: string[];
declare const borders: Rule<Theme>[];
declare function handlerBorderStyle([, a, s]: string[]): CSSEntries | undefined;

/**
 * @example op10 op-30 opacity-100
 */
declare const opacity: Rule<Theme>[];
declare const bgColors: Rule<Theme>[];
declare const colorScheme: Rule<Theme>[];

declare const columns: Rule<Theme>[];

declare const containerParent: Rule<Theme>[];
declare const container: Rule<Theme>[];
declare const containerShortcuts: Shortcut<Theme>[];

declare const textDecorations: Rule<Theme>[];

declare const divides: Rule<Theme>[];

declare const filterBase: {
    '--un-blur': string;
    '--un-brightness': string;
    '--un-contrast': string;
    '--un-drop-shadow': string;
    '--un-grayscale': string;
    '--un-hue-rotate': string;
    '--un-invert': string;
    '--un-saturate': string;
    '--un-sepia': string;
};
declare const backdropFilterBase: {
    '--un-backdrop-blur': string;
    '--un-backdrop-brightness': string;
    '--un-backdrop-contrast': string;
    '--un-backdrop-grayscale': string;
    '--un-backdrop-hue-rotate': string;
    '--un-backdrop-invert': string;
    '--un-backdrop-opacity': string;
    '--un-backdrop-saturate': string;
    '--un-backdrop-sepia': string;
};
declare const filters: Rule<Theme>[];

declare const flex: Rule<Theme>[];

declare const gaps: Rule<Theme>[];

declare const grids: Rule<Theme>[];

declare const overflows: Rule<Theme>[];

declare const lineClamps: Rule<Theme>[];

declare const placeholders: Rule<Theme>[];

declare const positions: Rule<Theme>[];
declare const justifies: StaticRule[];
declare const orders: Rule<Theme>[];
declare const alignments: StaticRule[];
declare const placements: StaticRule[];
/**
 * This is to add `flex-` and `grid-` prefix to the alignment rules,
 * supporting `flex="~ items-center"` in attributify mode.
 */
declare const flexGridJustifiesAlignments: StaticRule[];
declare const insets: Rule<Theme>[];
declare const floats: Rule<Theme>[];
declare const zIndexes: Rule<Theme>[];
declare const boxSizing: Rule<Theme>[];

/**
 * Used for debugging, only available in development mode.
 *
 * @example `?` / `where`
 */
declare const questionMark: Rule<Theme>[];

declare const ringBase: {
    '--un-ring-inset': string;
    '--un-ring-offset-width': string;
    '--un-ring-offset-color': string;
    '--un-ring-width': string;
    '--un-ring-color': string;
    '--un-shadow': string;
};
declare const rings: Rule<Theme>[];

declare const scrollSnapTypeBase: {
    '--un-scroll-snap-strictness': string;
};
declare const scrolls: Rule<Theme>[];

declare const boxShadowsBase: {
    '--un-ring-offset-shadow': string;
    '--un-ring-shadow': string;
    '--un-shadow-inset': string;
    '--un-shadow': string;
};
declare const boxShadows: Rule<Theme>[];

declare const sizes: Rule<Theme>[];
declare const aspectRatio: Rule<Theme>[];

declare const paddings: Rule<Theme>[];
declare const margins: Rule<Theme>[];
declare const spaces: Rule<Theme>[];
declare function notLastChildSelector(s: string): string;

declare const varEmpty = " ";
declare const displays: Rule<Theme>[];
declare const appearances: Rule<Theme>[];
declare const cursors: Rule<Theme>[];
declare const contains: Rule<Theme>[];
declare const pointerEvents: Rule<Theme>[];
declare const resizes: Rule<Theme>[];
declare const userSelects: Rule<Theme>[];
declare const whitespaces: Rule<Theme>[];
declare const contentVisibility: Rule<Theme>[];
declare const contents: Rule<Theme>[];
declare const breaks: Rule<Theme>[];
declare const textWraps: Rule<Theme>[];
declare const textOverflows: Rule<Theme>[];
declare const textTransforms: Rule<Theme>[];
declare const fontStyles: Rule<Theme>[];
declare const fontSmoothings: Rule<Theme>[];
declare const hyphens: Rule<Theme>[];
declare const writingModes: Rule<Theme>[];
declare const writingOrientations: Rule<Theme>[];
declare const screenReadersAccess: Rule<Theme>[];
declare const isolations: Rule<Theme>[];
declare const objectPositions: Rule<Theme>[];
declare const backgroundBlendModes: Rule<Theme>[];
declare const mixBlendModes: Rule<Theme>[];
declare const dynamicViewportHeight: Rule<Theme>[];
declare const accessibility: Rule<Theme>[];

declare const svgUtilities: Rule<Theme>[];

declare const borderSpacingBase: {
    '--un-border-spacing-x': number;
    '--un-border-spacing-y': number;
};
declare const tables: Rule<Theme>[];

declare const touchActionBase: {
    '--un-pan-x': string;
    '--un-pan-y': string;
    '--un-pinch-zoom': string;
};
declare const touchActions: Rule<Theme>[];

declare const transformBase: {
    '--un-rotate-x': string;
    '--un-rotate-y': string;
    '--un-rotate-z': string;
    '--un-skew-x': string;
    '--un-skew-y': string;
    '--un-translate-x': number;
    '--un-translate-y': number;
    '--un-translate-z': number;
};
declare const transforms: Rule<Theme>[];

declare const transitions: Rule<Theme>[];

declare const fonts: Rule<Theme>[];
declare const tabSizes: Rule<Theme>[];
declare const textIndents: Rule<Theme>[];
declare const textStrokes: Rule<Theme>[];
declare const textShadows: Rule<Theme>[];
declare const fontVariantNumericBase: {
    '--un-ordinal': string;
    '--un-slashed-zero': string;
    '--un-numeric-figure': string;
    '--un-numeric-spacing': string;
    '--un-numeric-fraction': string;
};
declare const fontVariantNumeric: Rule<Theme>[];
declare function splitShorthand(body: string, type: string): string[] | undefined;

declare const cssVariables: Rule<Theme>[];
declare const cssProperty: Rule<Theme>[];

declare const viewTransition: Rule<Theme>[];

export { accents, accessibility, alignments, animations, appearance, appearances, aspectRatio, backdropFilterBase, backgroundBlendModes, backgroundStyles, bgColors, borderSpacingBase, borderStyles, borders, boxShadows, boxShadowsBase, boxSizing, breaks, carets, colorScheme, columns, container, containerParent, containerShortcuts, contains, contentVisibility, contents, cssProperty, cssVariables, cursors, displays, divides, dynamicViewportHeight, filterBase, filters, flex, flexGridJustifiesAlignments, floats, fontSmoothings, fontStyles, fontVariantNumeric, fontVariantNumericBase, fonts, gaps, grids, handlerBorderStyle, hyphens, imageRenderings, insets, isolations, justifies, lineClamps, listStyle, margins, mixBlendModes, notLastChildSelector, objectPositions, opacity, orders, outline, overflows, overscrolls, paddings, placeholders, placements, pointerEvents, positions, questionMark, resizes, ringBase, rings, screenReadersAccess, scrollBehaviors, scrollSnapTypeBase, scrolls, sizes, spaces, splitShorthand, svgUtilities, tabSizes, tables, textAligns, textDecorations, textIndents, textOverflows, textShadows, textStrokes, textTransforms, textWraps, touchActionBase, touchActions, transformBase, transforms, transitions, userSelects, varEmpty, verticalAligns, viewTransition, whitespaces, willChange, writingModes, writingOrientations, zIndexes };
